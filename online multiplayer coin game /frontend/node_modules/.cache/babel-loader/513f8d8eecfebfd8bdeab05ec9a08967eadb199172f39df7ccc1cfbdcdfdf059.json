{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Tabs, Tab, Alert, Chip, keyframes, Stack, TableContainer, Table, TableHead, TableBody, TableCell, TableRow, Paper, Container, CircularProgress } from '@mui/material';\nimport { TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\n\n// 添加类型定义\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Game = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  const [gameId, setGameId] = useState(initialGameId);\n  const [game, setGame] = useState(null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerId, setPlayerId] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n  const [playerCount, setPlayerCount] = useState(2);\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showResultPage, setShowResultPage] = useState(false);\n  const [batchCompletionTimes, setBatchCompletionTimes] = useState({});\n  const [batchStartTimes, setBatchStartTimes] = useState({});\n  const [batchFlipStates, setBatchFlipStates] = useState({});\n\n  // 添加状态来跟踪硬币的翻转状态和批次完成状态\n  const [flippedCoins, setFlippedCoins] = useState([]);\n  const [pendingBatchCompletion, setPendingBatchCompletion] = useState({});\n\n  // 添加翻转动画状态\n\n  const [flipStates, setFlipStates] = useState({});\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, updatedGame => {\n        console.log('Game state updated:', updatedGame);\n        setGame(updatedGame);\n      });\n      service.connect();\n      setWsService(service);\n\n      // Cleanup function\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  useEffect(() => {\n    let timerInterval = null;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && startTime) {\n      timerInterval = setInterval(() => {\n        setCurrentTime(Date.now() - startTime);\n      }, 1000);\n    }\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'completed' && startTime && !endTime) {\n      setEndTime(Date.now());\n      setShowResultPage(true);\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime, endTime]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && startTime) {\n      const newCompletionTimes = {\n        ...batchCompletionTimes\n      };\n      const newStartTimes = {\n        ...batchStartTimes\n      };\n      game.players.forEach(player => {\n        if (!newStartTimes[player.id]) {\n          newStartTimes[player.id] = {};\n        }\n        if (!newCompletionTimes[player.id]) {\n          newCompletionTimes[player.id] = {};\n        }\n\n        // 使用后端提供的批次开始时间\n        for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          if (batchTasks.length > 0) {\n            const startedAt = batchTasks[0].started_at || startTime;\n            if (!newStartTimes[player.id][batchNum]) {\n              newStartTimes[player.id][batchNum] = startedAt;\n            }\n\n            // 只有当所有任务都完成时才记录完成时间\n            if (batchTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[player.id][batchNum]) {\n              newCompletionTimes[player.id][batchNum] = Date.now() - startedAt;\n            }\n          }\n        }\n      });\n      setBatchStartTimes(newStartTimes);\n      setBatchCompletionTimes(newCompletionTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, startTime]);\n\n  // 添加错误处理函数\n  const handleGameUpdate = updatedGame => {\n    setGame(updatedGame);\n    if (updatedGame.status === 'completed' && !endTime) {\n      setEndTime(Date.now());\n    }\n  };\n  const handleCreateGame = async e => {\n    e.preventDefault();\n    try {\n      setError(null);\n      // 创建游戏\n      const gameId = await gameService.createGame(playerCount, 4, 0);\n      if (gameId) {\n        // 加入游戏\n        const playerId = await gameService.joinGame(gameId, playerName);\n\n        // 更新状态\n        setGameId(gameId);\n        setPlayerId(playerId);\n\n        // 创建WebSocket连接\n        const ws = new WebSocketService(gameId, playerName, handleGameUpdate);\n        setWsService(ws);\n\n        // 获取初始游戏状态\n        const initialGameState = await gameService.getGameState(gameId);\n        setGame(initialGameState);\n\n        // 设置开始时间\n        setStartTime(Date.now());\n        console.log('Game created successfully:', {\n          gameId,\n          playerId\n        });\n      }\n    } catch (err) {\n      console.error('Error creating game:', err);\n      setError(err instanceof Error ? err.message : 'Failed to create game');\n    }\n  };\n  const handleJoinGame = async e => {\n    e.preventDefault();\n    try {\n      setError(null);\n      if (joinGameId) {\n        // 检查游戏是否存在\n        const exists = await gameService.checkGameExists(joinGameId);\n        if (!exists) {\n          setError('Game not found');\n          return;\n        }\n\n        // 加入游戏\n        const playerId = await gameService.joinGame(joinGameId, playerName);\n\n        // 更新状态\n        setGameId(joinGameId);\n        setPlayerId(playerId);\n\n        // 创建WebSocket连接\n        const ws = new WebSocketService(joinGameId, playerName, handleGameUpdate);\n        setWsService(ws);\n\n        // 获取游戏状态\n        const gameState = await gameService.getGameState(joinGameId);\n        setGame(gameState);\n\n        // 设置开始时间\n        setStartTime(Date.now());\n        console.log('Joined game successfully:', {\n          gameId: joinGameId,\n          playerId\n        });\n      }\n    } catch (err) {\n      console.error('Error joining game:', err);\n      setError(err instanceof Error ? err.message : 'Failed to join game');\n    }\n  };\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      setError(null);\n    } catch (error) {\n      setError('Failed to start game. Please try again.');\n      console.error('Error starting game:', error);\n    }\n  };\n  const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n  // 添加一个专门用于渲染目标硬币的函数\n  const renderTargetCoin = type => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: {\n          xs: '20px',\n          sm: '32px'\n        },\n        height: {\n          xs: '20px',\n          sm: '32px'\n        },\n        borderRadius: '50%',\n        border: theme => ({\n          xs: `1px solid ${theme.palette.primary.main}`,\n          sm: `2px solid ${theme.palette.primary.main}`\n        }),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: theme => theme.palette.background.paper,\n        color: theme => theme.palette.text.primary,\n        fontSize: {\n          xs: '0.7rem',\n          sm: '0.9rem'\n        },\n        fontWeight: 'bold',\n        marginBottom: {\n          xs: 0,\n          sm: 1\n        },\n        marginRight: 1\n      },\n      children: type === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 检查批次是否所有硬币都已翻转\n  const isBatchAllFlipped = (batchNum, playerId) => {\n    const batchTasks = game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === playerId);\n    return (batchTasks === null || batchTasks === void 0 ? void 0 : batchTasks.every(t => flippedCoins.includes(t.id))) || false;\n  };\n\n  // 处理硬币翻转\n  const handleCoinFlip = taskId => {\n    const task = game === null || game === void 0 ? void 0 : game.tasks.find(t => t.id === taskId);\n    if (!task || !game) return;\n\n    // 如果硬币已经翻转，不做任何操作\n    if (flippedCoins.includes(taskId)) return;\n\n    // 开始翻转动画\n    setFlipStates(prev => ({\n      ...prev,\n      [taskId]: {\n        isFlipping: true,\n        showOpposite: false\n      }\n    }));\n\n    // 动画完成后记录翻转状态\n    setTimeout(() => {\n      setFlipStates(prev => ({\n        ...prev,\n        [taskId]: {\n          isFlipping: false,\n          showOpposite: true\n        }\n      }));\n\n      // 记录硬币已翻转\n      setFlippedCoins(prev => [...prev, taskId]);\n\n      // 更新待完成的批次\n      setPendingBatchCompletion(prev => {\n        const newState = {\n          ...prev\n        };\n        if (!newState[task.batch_number]) {\n          newState[task.batch_number] = [];\n        }\n        if (!newState[task.batch_number].includes(taskId)) {\n          newState[task.batch_number] = [...newState[task.batch_number], taskId];\n        }\n        return newState;\n      });\n\n      // 检查是否所有硬币都已翻转\n      if (task.assigned_to && isBatchAllFlipped(task.batch_number, task.assigned_to)) {\n        handleCompleteBatch(task.batch_number);\n      }\n    }, 600);\n  };\n\n  // 处理批次完成\n  const handleCompleteBatch = batchNum => {\n    const pendingTasks = pendingBatchCompletion[batchNum] || [];\n    if (pendingTasks.length === 0) return;\n\n    // 发送所有任务完成的请求\n    pendingTasks.forEach(taskId => {\n      if (wsService) {\n        wsService.completeTask(taskId);\n      }\n    });\n\n    // 清理这个批次的待完成状态\n    setPendingBatchCompletion(prev => {\n      const newState = {\n        ...prev\n      };\n      delete newState[batchNum];\n      return newState;\n    });\n  };\n\n  // 修改渲染硬币的函数\n  const renderCoin = (type, isFlipping, isSmall = false, onClick, taskId) => {\n    const flipState = taskId ? flipStates[taskId] : undefined;\n    const isFlipped = taskId ? flippedCoins.includes(taskId) : false;\n\n    // 决定显示哪一面\n    const displayType = isFlipped ? type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS : type;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: isSmall ? 20 : 32,\n        height: isSmall ? 20 : 32,\n        borderRadius: '50%',\n        backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n        border: `${isSmall ? 1 : 2}px solid #B8860B`,\n        color: '#704214',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 'bold',\n        fontSize: isSmall ? '0.6rem' : '0.8rem',\n        perspective: 1000,\n        mb: isSmall ? 0 : 1,\n        position: 'relative',\n        cursor: onClick ? 'pointer' : 'default',\n        transition: 'transform 0.6s',\n        transformStyle: 'preserve-3d',\n        transform: flipState !== null && flipState !== void 0 && flipState.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n        '&:hover': onClick ? {\n          transform: 'scale(1.05)',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n        } : {},\n        '&:active': onClick ? {\n          transform: 'scale(0.95)'\n        } : {},\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          borderRadius: '50%',\n          background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n          pointerEvents: 'none'\n        }\n      },\n      onClick: onClick,\n      children: displayType === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 监听游戏状态变化\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks) {\n      // 检查是否有新的批次开始\n      game.players.forEach(player => {\n        const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n        const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n\n        // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n        if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n          // 清理上一个批次的翻转状态\n          const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n          const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n          setFlippedCoins(prev => prev.filter(id => !prevBatchTaskIds.includes(id)));\n        }\n      });\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks]);\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n\n  // 渲染任务行\n  const renderTaskRow = tasks => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: 1,\n        mb: 2\n      },\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: renderCoin(task.type, false, false, task.assigned_to === playerId && !flippedCoins.includes(task.id) ? () => handleCoinFlip(task.id) : undefined, task.id)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染玩家卡片\n  const renderPlayer = player => {\n    var _currentBatchTasks$;\n    const currentBatchTasks = (game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === player.current_batch && t.assigned_to === player.id)) || [];\n    const completedTasks = (game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.status === TaskStatus.COMPLETED && t.assigned_to === player.id)) || [];\n\n    // 获取当前批次的目标类型\n    const currentBatchTarget = (_currentBatchTasks$ = currentBatchTasks[0]) === null || _currentBatchTasks$ === void 0 ? void 0 : _currentBatchTasks$.type;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: player.status,\n            color: player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\",\n            size: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2,\n            bgcolor: 'background.default',\n            p: 2,\n            borderRadius: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              mb: 1\n            },\n            children: [\"Current Batch: \", player.current_batch, \" / \", game === null || game === void 0 ? void 0 : game.max_batches, currentBatchTarget && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                mt: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  mr: 1\n                },\n                children: \"Target:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 37\n              }, this), renderCoin(currentBatchTarget, false, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              color: \"text.secondary\",\n              children: \"Current Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 578,\n              columnNumber: 29\n            }, this), renderTaskRow(currentBatchTasks)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 25\n          }, this), completedTasks.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              color: \"text.secondary\",\n              children: \"Completed Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 586,\n              columnNumber: 33\n            }, this), renderTaskRow(completedTasks)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 29\n          }, this), player.id === playerId && isBatchAllFlipped(player.current_batch, player.id) && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => handleCompleteBatch(player.current_batch),\n            sx: {\n              mt: 2\n            },\n            children: \"Complete This Batch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 17\n      }, this)\n    }, player.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 13\n    }, this);\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n\n  // 添加一个辅助函数来处理毫秒到时间的转换\n  const formatTimeFromMs = ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const formatTimeWithMs = ms => {\n    if (ms < 0) return '0:00.000';\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    const milliseconds = ms % 1000;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}.${milliseconds.toString().padStart(3, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTimeFromMs(totalTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteGame = () => {\n    setShowResultPage(true);\n  };\n  const handleReturnToMain = () => {\n    window.location.reload();\n  };\n  const renderResultPage = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 600,\n          width: '100%',\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            mb: 3,\n            color: 'primary.main'\n          },\n          children: \"Game Complete! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            mb: 4\n          },\n          children: [\"Total Time: \", formatTimeFromMs(totalTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMain,\n          size: \"large\",\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 13\n    }, this);\n  };\n  const renderStatistics = () => {\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mb: 2,\n          color: 'primary.main'\n        },\n        children: \"Game Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 17\n      }, this), Array.from({\n        length: game.max_batches\n      }, (_, i) => i + 1).map(batchNum => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: [\"Batch \", batchNum]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          sx: {\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Player\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 754,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 755,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 756,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 753,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 752,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [game.players.map(player => {\n                var _batchCompletionTimes;\n                const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n                const completedTasks = batchTasks.filter(t => t.status === TaskStatus.COMPLETED).length;\n                const completionTime = (_batchCompletionTimes = batchCompletionTimes[player.id]) === null || _batchCompletionTimes === void 0 ? void 0 : _batchCompletionTimes[batchNum];\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: player.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 773,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: completionTime ? formatTimeWithMs(completionTime) : '-'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 774,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: /*#__PURE__*/_jsxDEV(Chip, {\n                      label: completedTasks > 0 ? 'Completed' : 'Pending',\n                      size: \"small\",\n                      color: completedTasks > 0 ? 'success' : 'default'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 778,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 777,\n                    columnNumber: 49\n                  }, this)]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 772,\n                  columnNumber: 45\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(TableRow, {\n                sx: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                },\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 788,\n                    columnNumber: 52\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 788,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: formatTimeFromMs(game.players.reduce((sum, p) => {\n                      var _p$batch_completion_t;\n                      return sum + (((_p$batch_completion_t = p.batch_completion_time) === null || _p$batch_completion_t === void 0 ? void 0 : _p$batch_completion_t[batchNum]) || 0);\n                    }, 0))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 790,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 789,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 797,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 787,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 759,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 751,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 25\n        }, this)]\n      }, batchNum, true, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 添加调试日志\n  useEffect(() => {\n    console.log('Current game state:', {\n      gameId,\n      playerId,\n      game,\n      wsService\n    });\n  }, [gameId, playerId, game, wsService]);\n\n  // 渲染主菜单\n  const renderMainMenu = () => /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 600,\n      width: '100%',\n      mx: 'auto',\n      mt: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n        p: 4,\n        borderTopLeftRadius: 8,\n        borderTopRightRadius: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        sx: {\n          fontWeight: 'bold',\n          background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent',\n          textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n          textAlign: 'center',\n          mb: 1\n        },\n        children: \"Online Multiplayer Coin Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"text.secondary\",\n        align: \"center\",\n        children: \"Flip coins with your friends in this multiplayer game!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 844,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 827,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        background: '#ffffff',\n        p: 4,\n        borderBottomLeftRadius: 8,\n        borderBottomRightRadius: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Tabs, {\n        value: activeTab,\n        onChange: (e, newValue) => setActiveTab(newValue),\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"CREATE GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 857,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"JOIN GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 858,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 856,\n        columnNumber: 17\n      }, this), activeTab === 0 ?\n      /*#__PURE__*/\n      // Create game form\n      _jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleCreateGame,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Name\",\n          required: true,\n          value: playerName,\n          onChange: e => setPlayerName(e.target.value),\n          sx: {\n            mb: 2\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Number of Players\",\n          type: \"number\",\n          required: true,\n          value: playerCount,\n          onChange: e => setPlayerCount(Number(e.target.value)),\n          inputProps: {\n            min: 2,\n            max: 5\n          },\n          helperText: \"Minimum 2, maximum 5 players\",\n          sx: {\n            mb: 3\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: !playerName || playerCount < 2 || playerCount > 5,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 885,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 863,\n        columnNumber: 21\n      }, this) :\n      /*#__PURE__*/\n      // Join game form\n      _jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleJoinGame,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Name\",\n          required: true,\n          value: playerName,\n          onChange: e => setPlayerName(e.target.value),\n          sx: {\n            mb: 2\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Game Code\",\n          required: true,\n          value: joinGameId,\n          onChange: e => setJoinGameId(e.target.value),\n          sx: {\n            mb: 3\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 906,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: !playerName || !joinGameId,\n          children: \"Join Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 915,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 896,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 850,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 820,\n    columnNumber: 9\n  }, this);\n  const renderGame = () => {\n    var _game$players$;\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 1,\n              color: 'primary.main'\n            },\n            children: [\"Game ID: \", game.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 941,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              color: 'text.primary'\n            },\n            children: [\"Game Status: \", game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 944,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 21\n        }, this), (game.status === 'in_progress' || game.status === 'completed') && startTime && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'text.secondary'\n          },\n          children: [\"Time: \", formatTimeFromMs(game.status === 'completed' && endTime ? endTime - startTime : currentTime - startTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 949,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 934,\n        columnNumber: 17\n      }, this), game.status === 'waiting' && playerId === ((_game$players$ = game.players[0]) === null || _game$players$ === void 0 ? void 0 : _game$players$.id) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartGame,\n        sx: {\n          mb: 3\n        },\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 956,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 3,\n            children: game.players.map(renderPlayer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 968,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 967,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: renderStatistics()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 974,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 933,\n      columnNumber: 13\n    }, this);\n  };\n  const renderGameComplete = () => {\n    // 确保有开始和结束时间\n    if (!startTime || !endTime || !game) return null;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        maxWidth: 800,\n        width: '100%',\n        mx: 'auto',\n        mt: 4,\n        p: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          mb: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            fontWeight: 'bold',\n            background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n            WebkitBackgroundClip: 'text',\n            WebkitTextFillColor: 'transparent',\n            mb: 2\n          },\n          children: \"Game Statistics \\uD83C\\uDFAE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 995,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 994,\n        columnNumber: 17\n      }, this), Array.from({\n        length: game.max_batches\n      }, (_, i) => i + 1).map(batchNum => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            mb: 2,\n            color: 'primary.main'\n          },\n          children: [\"Batch \", batchNum, \" Statistics\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1009,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          variant: \"outlined\",\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                sx: {\n                  backgroundColor: 'rgba(33, 150, 243, 0.08)'\n                },\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Player\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1016,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Completion Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1017,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Tasks Completed\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1018,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1015,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1014,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: game.players.map(player => {\n                var _batchCompletionTimes2;\n                const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n                const completedTasks = batchTasks.filter(t => t.status === TaskStatus.COMPLETED).length;\n                const completionTime = (_batchCompletionTimes2 = batchCompletionTimes[player.id]) === null || _batchCompletionTimes2 === void 0 ? void 0 : _batchCompletionTimes2[batchNum];\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: player.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1035,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: completionTime ? formatTimeWithMs(completionTime) : '-'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1036,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: [completedTasks, \"/\", batchTasks.length]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1039,\n                    columnNumber: 49\n                  }, this)]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1034,\n                  columnNumber: 45\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1021,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1013,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1012,\n          columnNumber: 25\n        }, this)]\n      }, batchNum, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1008,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4,\n          p: 2,\n          backgroundColor: 'rgba(33, 150, 243, 0.08)',\n          borderRadius: 1,\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            mb: 1\n          },\n          children: [\"Total Game Time: \", formatTimeWithMs(endTime - startTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1059,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1052,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4,\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setGameId('');\n            setGame(null);\n            setWsService(null);\n            setStartTime(null);\n            setEndTime(null);\n          },\n          sx: {\n            minWidth: 200,\n            borderRadius: 2\n          },\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1066,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1065,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 987,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [!gameId ? renderMainMenu() : (game === null || game === void 0 ? void 0 : game.status) === 'completed' ? renderGameComplete() : game ? renderGame() : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1096,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mt: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1100,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1088,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"OWK8GRD/wz+7VheHTtAJtXNydDo=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","keyframes","Stack","TableContainer","Table","TableHead","TableBody","TableCell","TableRow","Paper","Container","CircularProgress","TaskStatus","PlayerStatus","TaskType","gameService","WebSocketService","jsxDEV","_jsxDEV","Game","gameId","initialGameId","_s","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","currentTime","setCurrentTime","showResultPage","setShowResultPage","batchCompletionTimes","setBatchCompletionTimes","batchStartTimes","setBatchStartTimes","batchFlipStates","setBatchFlipStates","flippedCoins","setFlippedCoins","pendingBatchCompletion","setPendingBatchCompletion","flipStates","setFlipStates","service","updatedGame","console","log","connect","disconnect","status","Date","now","timerInterval","setInterval","clearInterval","tasks","newCompletionTimes","newStartTimes","players","forEach","player","id","batchNum","max_batches","batchTasks","filter","t","batch_number","assigned_to","length","startedAt","started_at","every","COMPLETED","handleGameUpdate","handleCreateGame","e","preventDefault","createGame","joinGame","ws","initialGameState","getGameState","err","Error","message","handleJoinGame","exists","checkGameExists","gameState","handleStartGame","startGame","flipAnimation","renderTargetCoin","type","sx","width","xs","sm","height","borderRadius","border","theme","palette","primary","main","display","alignItems","justifyContent","backgroundColor","background","paper","color","text","fontSize","fontWeight","marginBottom","marginRight","children","HEADS","fileName","_jsxFileName","lineNumber","columnNumber","isBatchAllFlipped","includes","handleCoinFlip","taskId","task","find","prev","isFlipping","showOpposite","setTimeout","newState","handleCompleteBatch","pendingTasks","completeTask","renderCoin","isSmall","onClick","flipState","undefined","isFlipped","displayType","TAILS","perspective","mb","position","cursor","transition","transformStyle","transform","boxShadow","content","top","left","right","bottom","pointerEvents","playerTasks","currentBatchTasks","current_batch","PENDING","prevBatchTasks","prevBatchTaskIds","map","getPlayerStatusColor","ACTIVE","WAITING","IDLE","getTaskStatusColor","IN_PROGRESS","renderTaskRow","flexWrap","gap","renderPlayer","_currentBatchTasks$","completedTasks","currentBatchTarget","variant","name","label","size","bgcolor","p","mt","mr","handleTabChange","_","newValue","handleGameComplete","formatTimeFromMs","ms","totalSeconds","Math","floor","minutes","seconds","toString","padStart","formatTimeWithMs","milliseconds","renderCompletionDialog","totalTime","open","onClose","PaperProps","textAlign","flexDirection","py","window","location","reload","handleCompleteGame","handleReturnToMain","renderResultPage","minHeight","maxWidth","renderStatistics","Array","from","i","component","align","_batchCompletionTimes","completionTime","reduce","sum","_p$batch_completion_t","batch_completion_time","renderMainMenu","mx","borderTopLeftRadius","borderTopRightRadius","WebkitBackgroundClip","WebkitTextFillColor","textShadow","borderBottomLeftRadius","borderBottomRightRadius","value","onChange","onSubmit","fullWidth","required","target","autoComplete","Number","inputProps","min","max","helperText","disabled","renderGame","_game$players$","container","spacing","item","md","renderGameComplete","_batchCompletionTimes2","minWidth","severity","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes,\n    Stack,\n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableCell,\n    TableRow,\n    Paper,\n    Container,\n    CircularProgress\n} from '@mui/material';\nimport { Game as GameType, Player, Task, TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\n\ninterface GameProps {\n    gameId?: string;\n}\n\ntype TabType = 0 | 1;\n\n// 添加类型定义\ninterface CompletionTimes {\n    [key: string]: {\n        [key: number]: number;\n    };\n}\n\ninterface BatchStartTimes {\n    [key: string]: {\n        [key: number]: number;\n    };\n}\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | undefined>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState<TabType>(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n    const [batchCompletionTimes, setBatchCompletionTimes] = useState<CompletionTimes>({});\n    const [batchStartTimes, setBatchStartTimes] = useState<BatchStartTimes>({});\n    const [batchFlipStates, setBatchFlipStates] = useState<{\n        [batchNum: number]: {\n            [taskId: string]: boolean;  // true means flipped\n        };\n    }>({});\n\n    // 添加状态来跟踪硬币的翻转状态和批次完成状态\n    const [flippedCoins, setFlippedCoins] = useState<string[]>([]);\n    const [pendingBatchCompletion, setPendingBatchCompletion] = useState<{\n        [batchNum: number]: string[];  // batchNum -> taskIds\n    }>({});\n\n    // 添加翻转动画状态\n    interface FlipState {\n        isFlipping: boolean;\n        showOpposite: boolean;\n    }\n    const [flipStates, setFlipStates] = useState<{\n        [key: string]: FlipState;\n    }>({});\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, (updatedGame) => {\n                console.log('Game state updated:', updatedGame);\n                setGame(updatedGame);\n            });\n            service.connect();\n            setWsService(service);\n\n            // Cleanup function\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && startTime) {\n            timerInterval = setInterval(() => {\n                setCurrentTime(Date.now() - startTime);\n            }, 1000);\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, startTime, endTime]);\n\n    useEffect(() => {\n        if (game?.tasks && startTime) {\n            const newCompletionTimes: CompletionTimes = { ...batchCompletionTimes };\n            const newStartTimes: BatchStartTimes = { ...batchStartTimes };\n            \n            game.players.forEach(player => {\n                if (!newStartTimes[player.id]) {\n                    newStartTimes[player.id] = {};\n                }\n                if (!newCompletionTimes[player.id]) {\n                    newCompletionTimes[player.id] = {};\n                }\n\n                // 使用后端提供的批次开始时间\n                for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    if (batchTasks.length > 0) {\n                        const startedAt = batchTasks[0].started_at || startTime;\n                        if (!newStartTimes[player.id][batchNum]) {\n                            newStartTimes[player.id][batchNum] = startedAt;\n                        }\n                        \n                        // 只有当所有任务都完成时才记录完成时间\n                        if (batchTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                            !newCompletionTimes[player.id][batchNum]) {\n                            newCompletionTimes[player.id][batchNum] = Date.now() - startedAt;\n                        }\n                    }\n                }\n            });\n            \n            setBatchStartTimes(newStartTimes);\n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.tasks, startTime]);\n\n    // 添加错误处理函数\n    const handleGameUpdate = (updatedGame: GameType) => {\n        setGame(updatedGame);\n        if (updatedGame.status === 'completed' && !endTime) {\n            setEndTime(Date.now());\n        }\n    };\n\n    const handleCreateGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            // 创建游戏\n            const gameId = await gameService.createGame(playerCount, 4, 0);\n            if (gameId) {\n                // 加入游戏\n                const playerId = await gameService.joinGame(gameId, playerName);\n                \n                // 更新状态\n                setGameId(gameId);\n                setPlayerId(playerId);\n                \n                // 创建WebSocket连接\n                const ws = new WebSocketService(\n                    gameId,\n                    playerName,\n                    handleGameUpdate\n                );\n                setWsService(ws);\n                \n                // 获取初始游戏状态\n                const initialGameState = await gameService.getGameState(gameId);\n                setGame(initialGameState);\n                \n                // 设置开始时间\n                setStartTime(Date.now());\n                \n                console.log('Game created successfully:', { gameId, playerId });\n            }\n        } catch (err) {\n            console.error('Error creating game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to create game');\n        }\n    };\n\n    const handleJoinGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            if (joinGameId) {\n                // 检查游戏是否存在\n                const exists = await gameService.checkGameExists(joinGameId);\n                if (!exists) {\n                    setError('Game not found');\n                    return;\n                }\n                \n                // 加入游戏\n                const playerId = await gameService.joinGame(joinGameId, playerName);\n                \n                // 更新状态\n                setGameId(joinGameId);\n                setPlayerId(playerId);\n                \n                // 创建WebSocket连接\n                const ws = new WebSocketService(\n                    joinGameId,\n                    playerName,\n                    handleGameUpdate\n                );\n                setWsService(ws);\n                \n                // 获取游戏状态\n                const gameState = await gameService.getGameState(joinGameId);\n                setGame(gameState);\n                \n                // 设置开始时间\n                setStartTime(Date.now());\n                \n                console.log('Joined game successfully:', { gameId: joinGameId, playerId });\n            }\n        } catch (err) {\n            console.error('Error joining game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to join game');\n        }\n    };\n\n    const handleStartGame = async () => {\n        if (!gameId) return;\n\n        try {\n            await gameService.startGame(gameId);\n            setError(null);\n        } catch (error) {\n            setError('Failed to start game. Please try again.');\n            console.error('Error starting game:', error);\n        }\n    };\n\n    const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n    // 添加一个专门用于渲染目标硬币的函数\n    const renderTargetCoin = (type: TaskType) => {\n        return (\n            <Box\n                sx={{\n                    width: { xs: '20px', sm: '32px' },\n                    height: { xs: '20px', sm: '32px' },\n                    borderRadius: '50%',\n                    border: theme => ({\n                        xs: `1px solid ${theme.palette.primary.main}`,\n                        sm: `2px solid ${theme.palette.primary.main}`\n                    }),\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    backgroundColor: theme => theme.palette.background.paper,\n                    color: theme => theme.palette.text.primary,\n                    fontSize: { xs: '0.7rem', sm: '0.9rem' },\n                    fontWeight: 'bold',\n                    marginBottom: { xs: 0, sm: 1 },\n                    marginRight: 1\n                }}\n            >\n                {type === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 检查批次是否所有硬币都已翻转\n    const isBatchAllFlipped = (batchNum: number, playerId: string) => {\n        const batchTasks = game?.tasks.filter(t => \n            t.batch_number === batchNum && \n            t.assigned_to === playerId\n        );\n        return batchTasks?.every(t => flippedCoins.includes(t.id)) || false;\n    };\n\n    // 处理硬币翻转\n    const handleCoinFlip = (taskId: string) => {\n        const task = game?.tasks.find(t => t.id === taskId);\n        if (!task || !game) return;\n\n        // 如果硬币已经翻转，不做任何操作\n        if (flippedCoins.includes(taskId)) return;\n\n        // 开始翻转动画\n        setFlipStates(prev => ({\n            ...prev,\n            [taskId]: { \n                isFlipping: true,\n                showOpposite: false\n            }\n        }));\n\n        // 动画完成后记录翻转状态\n        setTimeout(() => {\n            setFlipStates(prev => ({\n                ...prev,\n                [taskId]: { \n                    isFlipping: false,\n                    showOpposite: true\n                }\n            }));\n            \n            // 记录硬币已翻转\n            setFlippedCoins(prev => [...prev, taskId]);\n\n            // 更新待完成的批次\n            setPendingBatchCompletion(prev => {\n                const newState = { ...prev };\n                if (!newState[task.batch_number]) {\n                    newState[task.batch_number] = [];\n                }\n                if (!newState[task.batch_number].includes(taskId)) {\n                    newState[task.batch_number] = [...newState[task.batch_number], taskId];\n                }\n                return newState;\n            });\n\n            // 检查是否所有硬币都已翻转\n            if (task.assigned_to && isBatchAllFlipped(task.batch_number, task.assigned_to)) {\n                handleCompleteBatch(task.batch_number);\n            }\n        }, 600);\n    };\n\n    // 处理批次完成\n    const handleCompleteBatch = (batchNum: number) => {\n        const pendingTasks = pendingBatchCompletion[batchNum] || [];\n        if (pendingTasks.length === 0) return;\n\n        // 发送所有任务完成的请求\n        pendingTasks.forEach(taskId => {\n            if (wsService) {\n                wsService.completeTask(taskId);\n            }\n        });\n\n        // 清理这个批次的待完成状态\n        setPendingBatchCompletion(prev => {\n            const newState = { ...prev };\n            delete newState[batchNum];\n            return newState;\n        });\n    };\n\n    // 修改渲染硬币的函数\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void, taskId?: string) => {\n        const flipState = taskId ? flipStates[taskId] : undefined;\n        const isFlipped = taskId ? flippedCoins.includes(taskId) : false;\n        \n        // 决定显示哪一面\n        const displayType = isFlipped\n            ? (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) \n            : type;\n\n        return (\n            <Box\n                sx={{\n                    width: isSmall ? 20 : 32,\n                    height: isSmall ? 20 : 32,\n                    borderRadius: '50%',\n                    backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                    border: `${isSmall ? 1 : 2}px solid #B8860B`,\n                    color: '#704214',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontWeight: 'bold',\n                    fontSize: isSmall ? '0.6rem' : '0.8rem',\n                    perspective: 1000,\n                    mb: isSmall ? 0 : 1,\n                    position: 'relative',\n                    cursor: onClick ? 'pointer' : 'default',\n                    transition: 'transform 0.6s',\n                    transformStyle: 'preserve-3d',\n                    transform: flipState?.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n                    '&:hover': onClick ? {\n                        transform: 'scale(1.05)',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                    } : {},\n                    '&:active': onClick ? {\n                        transform: 'scale(0.95)'\n                    } : {},\n                    '&::after': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        borderRadius: '50%',\n                        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                        pointerEvents: 'none'\n                    }\n                }}\n                onClick={onClick}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 监听游戏状态变化\n    useEffect(() => {\n        if (game?.tasks) {\n            // 检查是否有新的批次开始\n            game.players.forEach(player => {\n                const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n                const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n                \n                // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                    // 清理上一个批次的翻转状态\n                    const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n                    const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n                    setFlippedCoins(prev => prev.filter(id => !prevBatchTaskIds.includes(id)));\n                }\n            });\n        }\n    }, [game?.tasks]);\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    // 渲染任务行\n    const renderTaskRow = (tasks: Task[]) => {\n        return (\n            <Box sx={{ \n                display: 'flex', \n                flexWrap: 'wrap',\n                gap: 1,\n                mb: 2 \n            }}>\n                {tasks.map(task => (\n                    <Box\n                        key={task.id}\n                        sx={{\n                            display: 'flex',\n                            alignItems: 'center',\n                        }}>\n                        {renderCoin(\n                            task.type,\n                            false,\n                            false,\n                            task.assigned_to === playerId && !flippedCoins.includes(task.id)\n                                ? () => handleCoinFlip(task.id)\n                                : undefined,\n                            task.id\n                        )}\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    // 渲染玩家卡片\n    const renderPlayer = (player: Player) => {\n        const currentBatchTasks = game?.tasks.filter(t => \n            t.batch_number === player.current_batch && \n            t.assigned_to === player.id\n        ) || [];\n\n        const completedTasks = game?.tasks.filter(t =>\n            t.status === TaskStatus.COMPLETED &&\n            t.assigned_to === player.id\n        ) || [];\n\n        // 获取当前批次的目标类型\n        const currentBatchTarget = currentBatchTasks[0]?.type;\n\n        return (\n            <Card key={player.id} sx={{ mb: 2 }}>\n                <CardContent>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                        <Typography variant=\"h6\">\n                            {player.name}\n                        </Typography>\n                        <Chip \n                            label={player.status}\n                            color={player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\"}\n                            size=\"small\"\n                        />\n                    </Box>\n\n                    <Box sx={{ mb: 2, bgcolor: 'background.default', p: 2, borderRadius: 1 }}>\n                        <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n                            Current Batch: {player.current_batch} / {game?.max_batches}\n                            {currentBatchTarget && (\n                                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\n                                    <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                                        Target:\n                                    </Typography>\n                                    {renderCoin(currentBatchTarget, false, true)}\n                                </Box>\n                            )}\n                        </Typography>\n\n                        <Box sx={{ mb: 2 }}>\n                            <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                                Current Tasks\n                            </Typography>\n                            {renderTaskRow(currentBatchTasks)}\n                        </Box>\n\n                        {completedTasks.length > 0 && (\n                            <Box>\n                                <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                                    Completed Tasks\n                                </Typography>\n                                {renderTaskRow(completedTasks)}\n                            </Box>\n                        )}\n\n                        {player.id === playerId && isBatchAllFlipped(player.current_batch, player.id) && (\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => handleCompleteBatch(player.current_batch)}\n                                sx={{ mt: 2 }}\n                            >\n                                Complete This Batch\n                            </Button>\n                        )}\n                    </Box>\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue as TabType);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    // 添加一个辅助函数来处理毫秒到时间的转换\n    const formatTimeFromMs = (ms: number) => {\n        const totalSeconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    const formatTimeWithMs = (ms: number) => {\n        if (ms < 0) return '0:00.000';\n        const totalSeconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        const milliseconds = ms % 1000;\n        return `${minutes}:${seconds.toString().padStart(2, '0')}.${milliseconds.toString().padStart(3, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed!\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTimeFromMs(totalTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    const handleReturnToMain = () => {\n        window.location.reload();\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTimeFromMs(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMain}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    const renderStatistics = () => {\n        if (!game) return null;\n\n        return (\n            <Box sx={{ p: 2 }}>\n                <Typography variant=\"h6\" sx={{ mb: 2, color: 'primary.main' }}>\n                    Game Statistics\n                </Typography>\n                {Array.from({ length: game.max_batches }, (_, i) => i + 1).map(batchNum => (\n                    <Box key={batchNum} sx={{ mb: 3 }}>\n                        <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                            Batch {batchNum}\n                        </Typography>\n                        <TableContainer component={Paper} sx={{ mb: 2 }}>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Player</TableCell>\n                                        <TableCell align=\"right\">Time</TableCell>\n                                        <TableCell align=\"right\">Status</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {game.players.map(player => {\n                                        const batchTasks = game.tasks.filter(t => \n                                            t.batch_number === batchNum && \n                                            t.assigned_to === player.id\n                                        );\n                                        const completedTasks = batchTasks.filter(t => \n                                            t.status === TaskStatus.COMPLETED\n                                        ).length;\n                                        \n                                        const completionTime = batchCompletionTimes[player.id]?.[batchNum];\n                                        \n                                        return (\n                                            <TableRow key={player.id}>\n                                                <TableCell>{player.name}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    {completionTime ? formatTimeWithMs(completionTime) : '-'}\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Chip \n                                                        label={completedTasks > 0 ? 'Completed' : 'Pending'}\n                                                        size=\"small\"\n                                                        color={completedTasks > 0 ? 'success' : 'default'}\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                    <TableRow sx={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}>\n                                        <TableCell><strong>Total</strong></TableCell>\n                                        <TableCell align=\"right\">\n                                            <strong>\n                                                {formatTimeFromMs(game.players.reduce((sum, p) => \n                                                    sum + (p.batch_completion_time?.[batchNum] || 0), \n                                                    0\n                                                ))}\n                                            </strong>\n                                        </TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    // 添加调试日志\n    useEffect(() => {\n        console.log('Current game state:', {\n            gameId,\n            playerId,\n            game,\n            wsService\n        });\n    }, [gameId, playerId, game, wsService]);\n\n    // 渲染主菜单\n    const renderMainMenu = () => (\n        <Card sx={{\n            maxWidth: 600,\n            width: '100%',\n            mx: 'auto',\n            mt: 4\n        }}>\n            {/* Top section with title and subtitle */}\n            <Box sx={{\n                background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n                p: 4,\n                borderTopLeftRadius: 8,\n                borderTopRightRadius: 8\n            }}>\n                <Typography variant=\"h3\" sx={{\n                    fontWeight: 'bold',\n                    background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n                    WebkitBackgroundClip: 'text',\n                    WebkitTextFillColor: 'transparent',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n                    textAlign: 'center',\n                    mb: 1\n                }}>\n                    Online Multiplayer Coin Game\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"text.secondary\" align=\"center\">\n                    Flip coins with your friends in this multiplayer game!\n                </Typography>\n            </Box>\n\n            {/* Bottom section with form */}\n            <Box sx={{\n                background: '#ffffff',\n                p: 4,\n                borderBottomLeftRadius: 8,\n                borderBottomRightRadius: 8\n            }}>\n                <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue as TabType)} sx={{ mb: 3 }}>\n                    <Tab label=\"CREATE GAME\" />\n                    <Tab label=\"JOIN GAME\" />\n                </Tabs>\n\n                {activeTab === 0 ? (\n                    // Create game form\n                    <Box component=\"form\" onSubmit={handleCreateGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Number of Players\"\n                            type=\"number\"\n                            required\n                            value={playerCount}\n                            onChange={(e) => setPlayerCount(Number(e.target.value))}\n                            inputProps={{ min: 2, max: 5 }}\n                            helperText=\"Minimum 2, maximum 5 players\"\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || playerCount < 2 || playerCount > 5}\n                        >\n                            Create Game\n                        </Button>\n                    </Box>\n                ) : (\n                    // Join game form\n                    <Box component=\"form\" onSubmit={handleJoinGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Game Code\"\n                            required\n                            value={joinGameId}\n                            onChange={(e) => setJoinGameId(e.target.value)}\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || !joinGameId}\n                        >\n                            Join Game\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        </Card>\n    );\n\n    const renderGame = () => {\n        if (!game) return null;\n        \n        return (\n            <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n                <Box sx={{ \n                    display: 'flex', \n                    justifyContent: 'space-between', \n                    alignItems: 'center',\n                    mb: 3\n                }}>\n                    <Box>\n                        <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                            Game ID: {game.id}\n                        </Typography>\n                        <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                            Game Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                        </Typography>\n                    </Box>\n                    {(game.status === 'in_progress' || game.status === 'completed') && startTime && (\n                        <Typography variant=\"h6\" sx={{ color: 'text.secondary' }}>\n                            Time: {formatTimeFromMs(game.status === 'completed' && endTime ? endTime - startTime : currentTime - startTime)}\n                        </Typography>\n                    )}\n                </Box>\n\n                {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleStartGame}\n                        sx={{ mb: 3 }}\n                    >\n                        Start Game\n                    </Button>\n                )}\n\n                <Grid container spacing={3}>\n                    {/* Left column: Player cards */}\n                    <Grid item xs={12} md={7}>\n                        <Stack spacing={3}>\n                            {game.players.map(renderPlayer)}\n                        </Stack>\n                    </Grid>\n\n                    {/* Right column: Results and statistics */}\n                    <Grid item xs={12} md={5}>\n                        {renderStatistics()}\n                    </Grid>\n                </Grid>\n            </Box>\n        );\n    };\n\n    const renderGameComplete = () => {\n        // 确保有开始和结束时间\n        if (!startTime || !endTime || !game) return null;\n\n        return (\n            <Card sx={{\n                maxWidth: 800,\n                width: '100%',\n                mx: 'auto',\n                mt: 4,\n                p: 4\n            }}>\n                <Box sx={{ textAlign: 'center', mb: 4 }}>\n                    <Typography variant=\"h4\" sx={{\n                        fontWeight: 'bold',\n                        background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n                        WebkitBackgroundClip: 'text',\n                        WebkitTextFillColor: 'transparent',\n                        mb: 2\n                    }}>\n                        Game Statistics 🎮\n                    </Typography>\n                </Box>\n\n                {/* 批次统计信息 */}\n                {Array.from({ length: game.max_batches }, (_, i) => i + 1).map(batchNum => (\n                    <Box key={batchNum} sx={{ mb: 4 }}>\n                        <Typography variant=\"h6\" sx={{ mb: 2, color: 'primary.main' }}>\n                            Batch {batchNum} Statistics\n                        </Typography>\n                        <TableContainer component={Paper} variant=\"outlined\">\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow sx={{ backgroundColor: 'rgba(33, 150, 243, 0.08)' }}>\n                                        <TableCell>Player</TableCell>\n                                        <TableCell align=\"right\">Completion Time</TableCell>\n                                        <TableCell align=\"right\">Tasks Completed</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {game.players.map(player => {\n                                        const batchTasks = game.tasks.filter(t => \n                                            t.batch_number === batchNum && \n                                            t.assigned_to === player.id\n                                        );\n                                        const completedTasks = batchTasks.filter(t => \n                                            t.status === TaskStatus.COMPLETED\n                                        ).length;\n                                        \n                                        const completionTime = batchCompletionTimes[player.id]?.[batchNum];\n                                        \n                                        return (\n                                            <TableRow key={player.id}>\n                                                <TableCell>{player.name}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    {completionTime ? formatTimeWithMs(completionTime) : '-'}\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    {completedTasks}/{batchTasks.length}\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Box>\n                ))}\n\n                {/* 总时间 */}\n                <Box sx={{ \n                    mt: 4, \n                    p: 2, \n                    backgroundColor: 'rgba(33, 150, 243, 0.08)', \n                    borderRadius: 1,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                        Total Game Time: {formatTimeWithMs(endTime - startTime)}\n                    </Typography>\n                </Box>\n\n                {/* 返回主菜单按钮 */}\n                <Box sx={{ mt: 4, textAlign: 'center' }}>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() => {\n                            setGameId('');\n                            setGame(null);\n                            setWsService(null);\n                            setStartTime(null);\n                            setEndTime(null);\n                        }}\n                        sx={{\n                            minWidth: 200,\n                            borderRadius: 2\n                        }}\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Box>\n            </Card>\n        );\n    };\n\n    return (\n        <Container>\n            {!gameId ? (\n                renderMainMenu()\n            ) : game?.status === 'completed' ? (\n                renderGameComplete()\n            ) : game ? (\n                renderGame()\n            ) : (\n                <CircularProgress />\n            )}\n            \n            {error && (\n                <Alert severity=\"error\" sx={{ mt: 2 }}>\n                    {error}\n                </Alert>\n            )}\n        </Container>\n    );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}