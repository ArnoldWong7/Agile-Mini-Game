{"ast":null,"code":"import axios from'axios';// 使用相对路径，确保请求通过 nginx 代理\nconst API_URL='/api';const WS_URL=(window.location.protocol==='https:'?'wss://':'ws://')+window.location.host+'/ws';export const gameService={createGame:async(playerCount,maxBatches,tasksPerBatch)=>{console.log('Creating game with params:',{playerCount,maxBatches,tasksPerBatch});const response=await axios.post(\"\".concat(API_URL,\"/games/create\"),null,{params:{player_count:playerCount,max_batches:maxBatches,tasks_per_batch:tasksPerBatch}});console.log('Game created:',response.data);return response.data.game_id;},checkGameExists:async gameId=>{console.log('Checking if game exists:',gameId);const response=await axios.get(\"\".concat(API_URL,\"/games/\").concat(gameId,\"/exists\"));console.log('Game exists response:',response.data);return response.data.exists;},joinGame:async(gameId,playerName)=>{console.log('Joining game:',{gameId,playerName});const response=await axios.post(\"\".concat(API_URL,\"/games/\").concat(gameId,\"/join\"),null,{params:{player_name:playerName}});console.log('Join game response:',response.data);return response.data.player_id;},startGame:async gameId=>{console.log('Starting game:',gameId);await axios.post(\"\".concat(API_URL,\"/games/\").concat(gameId,\"/start\"));console.log('Game started');},getGameState:async gameId=>{console.log('Getting game state:',gameId);const response=await axios.get(\"\".concat(API_URL,\"/games/\").concat(gameId));console.log('Game state:',response.data);return response.data;},flipCoin:async(gameId,taskId)=>{console.log('Flipping coin:',{gameId,taskId});await axios.post(\"\".concat(API_URL,\"/games/\").concat(gameId,\"/flip/\").concat(taskId));console.log('Coin flipped');},syncFlipCoin:async(gameId,taskId)=>{console.log('Syncing flip coin:',{gameId,taskId});await axios.post(\"\".concat(API_URL,\"/games/\").concat(gameId,\"/flip_coin/\").concat(taskId));console.log('Coin flip synced');}};export class WebSocketService{constructor(gameId,playerId,onGameUpdate,onSyncFlipCoin){this.ws=null;this.gameId=void 0;this.playerId=void 0;this.onGameUpdate=void 0;this.onSyncFlipCoin=void 0;this.reconnectAttempts=0;this.maxReconnectAttempts=5;this.gameId=gameId;this.playerId=playerId;this.onGameUpdate=onGameUpdate;this.onSyncFlipCoin=onSyncFlipCoin;console.log('WebSocket service initialized:',{gameId,playerId});}connect(){console.log('Connecting WebSocket...');this.ws=new WebSocket(\"\".concat(WS_URL,\"/\").concat(this.playerId));this.ws.onmessage=event=>{const message=JSON.parse(event.data);console.log('WebSocket message received:',message);switch(message.type){case'game_update':case'game_started':case'task_completed':case'batch_passed':console.log('Updating game state:',message.data);this.onGameUpdate(message.data);break;case'flip_coin':console.log('Flipping coin:',message.task_id);this.onSyncFlipCoin(message.task_id);break;default:console.log('Unknown message type:',message.type);}};this.ws.onopen=()=>{console.log('WebSocket connection opened');this.reconnectAttempts=0;// Request initial game state\nthis.getGameState();};this.ws.onclose=()=>{console.log('WebSocket connection closed');this.handleReconnect();};this.ws.onerror=error=>{console.error('WebSocket error:',error);};}async getGameState(){try{const gameState=await gameService.getGameState(this.gameId);this.onGameUpdate(gameState);}catch(error){console.error('Error getting game state:',error);}}handleReconnect(){if(this.reconnectAttempts<this.maxReconnectAttempts){this.reconnectAttempts++;console.log(\"Attempting to reconnect (\".concat(this.reconnectAttempts,\"/\").concat(this.maxReconnectAttempts,\")...\"));setTimeout(()=>this.connect(),1000*this.reconnectAttempts);}}completeTask(taskId){if(this.ws&&this.ws.readyState===WebSocket.OPEN){const message={type:'complete_task',game_id:this.gameId,task_id:taskId};console.log('Sending complete task message:',message);this.ws.send(JSON.stringify(message));}else{console.error('WebSocket not connected');// Try to reconnect and queue the message\nthis.connect();}}flipCoin(taskId){if(this.ws&&this.ws.readyState===WebSocket.OPEN){const message={type:'flip_coin',game_id:this.gameId,task_id:taskId};console.log('Sending flip coin message:',message);this.ws.send(JSON.stringify(message));}else{console.error('WebSocket not connected');this.connect();}}disconnect(){if(this.ws){console.log('Disconnecting WebSocket');this.ws.close();this.ws=null;}}}","map":{"version":3,"names":["axios","API_URL","WS_URL","window","location","protocol","host","gameService","createGame","playerCount","maxBatches","tasksPerBatch","console","log","response","post","concat","params","player_count","max_batches","tasks_per_batch","data","game_id","checkGameExists","gameId","get","exists","joinGame","playerName","player_name","player_id","startGame","getGameState","flipCoin","taskId","syncFlipCoin","WebSocketService","constructor","playerId","onGameUpdate","onSyncFlipCoin","ws","reconnectAttempts","maxReconnectAttempts","connect","WebSocket","onmessage","event","message","JSON","parse","type","task_id","onopen","onclose","handleReconnect","onerror","error","gameState","setTimeout","completeTask","readyState","OPEN","send","stringify","disconnect","close"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\n// 使用相对路径，确保请求通过 nginx 代理\nconst API_URL = '/api';\nconst WS_URL = (window.location.protocol === 'https:' ? 'wss://' : 'ws://') + window.location.host + '/ws';\n\nexport const gameService = {\n    createGame: async (playerCount: number, maxBatches: number, tasksPerBatch: number): Promise<string> => {\n        console.log('Creating game with params:', { playerCount, maxBatches, tasksPerBatch });\n        const response = await axios.post(`${API_URL}/games/create`, null, {\n            params: { player_count: playerCount, max_batches: maxBatches, tasks_per_batch: tasksPerBatch }\n        });\n        console.log('Game created:', response.data);\n        return response.data.game_id;\n    },\n\n    checkGameExists: async (gameId: string): Promise<boolean> => {\n        console.log('Checking if game exists:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n        console.log('Game exists response:', response.data);\n        return response.data.exists;\n    },\n\n    joinGame: async (gameId: string, playerName: string): Promise<string> => {\n        console.log('Joining game:', { gameId, playerName });\n        const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n            params: { player_name: playerName }\n        });\n        console.log('Join game response:', response.data);\n        return response.data.player_id;\n    },\n\n    startGame: async (gameId: string): Promise<void> => {\n        console.log('Starting game:', gameId);\n        await axios.post(`${API_URL}/games/${gameId}/start`);\n        console.log('Game started');\n    },\n\n    getGameState: async (gameId: string): Promise<Game> => {\n        console.log('Getting game state:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}`);\n        console.log('Game state:', response.data);\n        return response.data;\n    },\n\n    flipCoin: async (gameId: string, taskId: string): Promise<void> => {\n        console.log('Flipping coin:', { gameId, taskId });\n        await axios.post(`${API_URL}/games/${gameId}/flip/${taskId}`);\n        console.log('Coin flipped');\n    },\n\n    syncFlipCoin: async (gameId: string, taskId: string): Promise<void> => {\n        console.log('Syncing flip coin:', { gameId, taskId });\n        await axios.post(`${API_URL}/games/${gameId}/flip_coin/${taskId}`);\n        console.log('Coin flip synced');\n    },\n};\n\nexport class WebSocketService {\n    private ws: WebSocket | null = null;\n    private gameId: string;\n    private playerId: string;\n    private onGameUpdate: (game: Game) => void;\n    private onSyncFlipCoin: (taskId: string) => void;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = 5;\n\n    constructor(gameId: string, playerId: string, onGameUpdate: (game: Game) => void, onSyncFlipCoin: (taskId: string) => void) {\n        this.gameId = gameId;\n        this.playerId = playerId;\n        this.onGameUpdate = onGameUpdate;\n        this.onSyncFlipCoin = onSyncFlipCoin;\n        console.log('WebSocket service initialized:', { gameId, playerId });\n    }\n\n    connect() {\n        console.log('Connecting WebSocket...');\n        this.ws = new WebSocket(`${WS_URL}/${this.playerId}`);\n        \n        this.ws.onmessage = (event) => {\n            const message = JSON.parse(event.data);\n            console.log('WebSocket message received:', message);\n            \n            switch (message.type) {\n                case 'game_update':\n                case 'game_started':\n                case 'task_completed':\n                case 'batch_passed':\n                    console.log('Updating game state:', message.data);\n                    this.onGameUpdate(message.data);\n                    break;\n                case 'flip_coin':\n                    console.log('Flipping coin:', message.task_id);\n                    this.onSyncFlipCoin(message.task_id);\n                    break;\n                default:\n                    console.log('Unknown message type:', message.type);\n            }\n        };\n\n        this.ws.onopen = () => {\n            console.log('WebSocket connection opened');\n            this.reconnectAttempts = 0;\n            // Request initial game state\n            this.getGameState();\n        };\n\n        this.ws.onclose = () => {\n            console.log('WebSocket connection closed');\n            this.handleReconnect();\n        };\n\n        this.ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n    }\n\n    private async getGameState() {\n        try {\n            const gameState = await gameService.getGameState(this.gameId);\n            this.onGameUpdate(gameState);\n        } catch (error) {\n            console.error('Error getting game state:', error);\n        }\n    }\n\n    private handleReconnect() {\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.reconnectAttempts++;\n            console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n            setTimeout(() => this.connect(), 1000 * this.reconnectAttempts);\n        }\n    }\n\n    completeTask(taskId: string) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            const message = {\n                type: 'complete_task',\n                game_id: this.gameId,\n                task_id: taskId\n            };\n            console.log('Sending complete task message:', message);\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.error('WebSocket not connected');\n            // Try to reconnect and queue the message\n            this.connect();\n        }\n    }\n\n    flipCoin(taskId: string) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            const message = {\n                type: 'flip_coin',\n                game_id: this.gameId,\n                task_id: taskId\n            };\n            console.log('Sending flip coin message:', message);\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.error('WebSocket not connected');\n            this.connect();\n        }\n    }\n\n    disconnect() {\n        if (this.ws) {\n            console.log('Disconnecting WebSocket');\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}