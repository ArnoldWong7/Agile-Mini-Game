{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer coin game 2/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Tabs, Tab, Alert, Chip, keyframes, Stack, TableContainer, Table, TableHead, TableBody, TableCell, TableRow, Paper, Container, CircularProgress } from '@mui/material';\nimport { TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Game = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  const [gameId, setGameId] = useState(initialGameId);\n  const [game, setGame] = useState(null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerId, setPlayerId] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n  const [playerCount, setPlayerCount] = useState(2);\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showResultPage, setShowResultPage] = useState(false);\n  const [batchCompletionTimes, setBatchCompletionTimes] = useState({});\n  const [batchStartTimes, setBatchStartTimes] = useState({});\n  const [batchFlipStates, setBatchFlipStates] = useState({});\n\n  // 添加状态来跟踪硬币的翻转状态和批次完成状态\n  const [flippedCoins, setFlippedCoins] = useState([]);\n  const [pendingBatchCompletion, setPendingBatchCompletion] = useState({});\n\n  // 添加翻转动画状态\n\n  const [flipStates, setFlipStates] = useState({});\n\n  // 修改计时器状态和开始时间状态\n  const [elapsedTime, setElapsedTime] = useState(0);\n\n  // 添加批次统计时间的状态\n  const [batchStats, setBatchStats] = useState({});\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, updatedGame => {\n        console.log('Game state updated:', updatedGame);\n        setGame(updatedGame);\n      });\n      service.connect();\n      setWsService(service);\n\n      // Cleanup function\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  useEffect(() => {\n    let timerInterval = null;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && startTime) {\n      timerInterval = setInterval(() => {\n        setCurrentTime(Date.now() - startTime);\n      }, 1000);\n    }\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'completed' && startTime && !endTime) {\n      setEndTime(Date.now());\n      setShowResultPage(true);\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime, endTime]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && game.players) {\n      const newStartTimes = {\n        ...batchStartTimes\n      };\n      const newCompletionTimes = {\n        ...batchCompletionTimes\n      };\n      game.players.forEach(player => {\n        if (!newStartTimes[player.current_batch]) {\n          newStartTimes[player.current_batch] = {};\n        }\n        if (!newCompletionTimes[player.current_batch]) {\n          newCompletionTimes[player.current_batch] = {};\n        }\n\n        // 使用后端提供的批次开始时间\n        if (player.batch_start_time) {\n          Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n            newStartTimes[player.current_batch][Number(batchNum)] = startTime;\n          });\n        }\n\n        // Calculate completion times for each batch\n        for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n          var _newStartTimes$player;\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const startedAt = (_newStartTimes$player = newStartTimes[player.current_batch]) === null || _newStartTimes$player === void 0 ? void 0 : _newStartTimes$player[batchNum];\n          if (startedAt && batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[player.current_batch][player.id]) {\n            newCompletionTimes[player.current_batch][player.id] = Date.now() - startedAt;\n          }\n        }\n      });\n      setBatchStartTimes(newStartTimes);\n      setBatchCompletionTimes(newCompletionTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players]);\n\n  // 添加错误处理函数\n  const handleGameUpdate = updatedGame => {\n    setGame(updatedGame);\n    if (updatedGame.status === 'completed' && !endTime) {\n      setEndTime(Date.now());\n    }\n  };\n  const handleCreateGame = async e => {\n    e.preventDefault();\n    try {\n      setError(null);\n      // 创建游戏\n      const gameId = await gameService.createGame(playerCount, 4, 0);\n      if (gameId) {\n        // 加入游戏\n        const playerId = await gameService.joinGame(gameId, playerName);\n\n        // 更新状态\n        setGameId(gameId);\n        setPlayerId(playerId);\n\n        // 创建WebSocket连接\n        const ws = new WebSocketService(gameId, playerName, handleGameUpdate);\n        setWsService(ws);\n\n        // 获取初始游戏状态\n        const initialGameState = await gameService.getGameState(gameId);\n        setGame(initialGameState);\n\n        // 设置开始时间\n        setStartTime(Date.now());\n        console.log('Game created successfully:', {\n          gameId,\n          playerId\n        });\n      }\n    } catch (err) {\n      console.error('Error creating game:', err);\n      setError(err instanceof Error ? err.message : 'Failed to create game');\n    }\n  };\n  const handleJoinGame = async e => {\n    e.preventDefault();\n    try {\n      setError(null);\n      if (joinGameId) {\n        // 检查游戏是否存在\n        const exists = await gameService.checkGameExists(joinGameId);\n        if (!exists) {\n          setError('Game not found');\n          return;\n        }\n\n        // 加入游戏\n        const playerId = await gameService.joinGame(joinGameId, playerName);\n\n        // 更新状态\n        setGameId(joinGameId);\n        setPlayerId(playerId);\n\n        // 创建WebSocket连接\n        const ws = new WebSocketService(joinGameId, playerName, handleGameUpdate);\n        setWsService(ws);\n\n        // 获取游戏状态\n        const gameState = await gameService.getGameState(joinGameId);\n        setGame(gameState);\n\n        // 设置开始时间\n        setStartTime(Date.now());\n        console.log('Joined game successfully:', {\n          gameId: joinGameId,\n          playerId\n        });\n      }\n    } catch (err) {\n      console.error('Error joining game:', err);\n      setError(err instanceof Error ? err.message : 'Failed to join game');\n    }\n  };\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      const currentTime = Date.now();\n      setStartTime(currentTime);\n      setBatchStartTimes(prev => ({\n        ...prev,\n        1: {\n          1: currentTime\n        }\n      }));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to start game');\n    }\n  };\n  const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n  // 添加一个专门用于渲染目标硬币的函数\n  const renderTargetCoin = type => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: {\n          xs: '20px',\n          sm: '32px'\n        },\n        height: {\n          xs: '20px',\n          sm: '32px'\n        },\n        borderRadius: '50%',\n        border: theme => ({\n          xs: `1px solid ${theme.palette.primary.main}`,\n          sm: `2px solid ${theme.palette.primary.main}`\n        }),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: theme => theme.palette.background.paper,\n        color: theme => theme.palette.text.primary,\n        fontSize: {\n          xs: '0.7rem',\n          sm: '0.9rem'\n        },\n        fontWeight: 'bold',\n        marginBottom: {\n          xs: 0,\n          sm: 1\n        },\n        marginRight: 1\n      },\n      children: type === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 检查批次是否所有硬币都已翻转\n  const isBatchAllFlipped = (batchNum, playerId) => {\n    const batchTasks = game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === playerId);\n    return (batchTasks === null || batchTasks === void 0 ? void 0 : batchTasks.every(t => flippedCoins.includes(t.id))) || false;\n  };\n\n  // 处理硬币翻转\n  const handleCoinFlip = taskId => {\n    const task = game === null || game === void 0 ? void 0 : game.tasks.find(t => t.id === taskId);\n    if (!task || !game) return;\n\n    // 如果硬币已经翻转，不做任何操作\n    if (flippedCoins.includes(taskId)) return;\n\n    // 开始翻转动画\n    setFlipStates(prev => ({\n      ...prev,\n      [taskId]: {\n        isFlipping: true,\n        showOpposite: false\n      }\n    }));\n\n    // 动画完成后记录翻转状态\n    setTimeout(() => {\n      setFlipStates(prev => ({\n        ...prev,\n        [taskId]: {\n          isFlipping: false,\n          showOpposite: true\n        }\n      }));\n\n      // 记录硬币已翻转\n      setFlippedCoins(prev => [...prev, taskId]);\n\n      // 更新待完成的批次\n      setPendingBatchCompletion(prev => {\n        const newState = {\n          ...prev\n        };\n        if (!newState[task.batch_number]) {\n          newState[task.batch_number] = [];\n        }\n        if (!newState[task.batch_number].includes(taskId)) {\n          newState[task.batch_number] = [...newState[task.batch_number], taskId];\n        }\n        return newState;\n      });\n\n      // 检查是否所有硬币都已翻转\n      const batchTasks = game.tasks.filter(t => t.batch_number === task.batch_number && t.assigned_to === playerId);\n      const allFlipped = batchTasks.every(t => flippedCoins.includes(t.id) || t.id === taskId);\n      if (allFlipped) {\n        handleCompleteBatch(task.batch_number);\n      }\n    }, 600);\n  };\n\n  // 处理批次完成\n  const handleCompleteBatch = batchNum => {\n    const pendingTasks = pendingBatchCompletion[batchNum] || [];\n    if (pendingTasks.length === 0) return;\n\n    // 发送所有任务完成的请求\n    const promises = pendingTasks.map(taskId => {\n      if (wsService) {\n        return wsService.completeTask(taskId);\n      }\n      return Promise.resolve();\n    });\n\n    // 等待所有任务完成请求发送完毕\n    Promise.all(promises).then(() => {\n      var _game$players$;\n      // 清理这个批次的待完成状态\n      setPendingBatchCompletion(prev => {\n        const newState = {\n          ...prev\n        };\n        delete newState[batchNum];\n        return newState;\n      });\n\n      // 检查是否是第一个玩家，且是否所有玩家都完成了当前批次\n      if (game && playerId === ((_game$players$ = game.players[0]) === null || _game$players$ === void 0 ? void 0 : _game$players$.id)) {\n        checkAndStartNextBatch(batchNum);\n      }\n    });\n  };\n\n  // 添加一个新函数来检查和开始下一批次\n  const checkAndStartNextBatch = currentBatchNum => {\n    if (!game || !playerId) return;\n\n    // 检查是否所有玩家都完成了当前批次\n    const allCompleted = isCurrentBatchCompletedByAll(currentBatchNum);\n    if (allCompleted && currentBatchNum < game.max_batches) {\n      // 找到第一个玩家的当前任务\n      const firstPlayer = game.players[0];\n      if (firstPlayer.id === playerId) {\n        // 获取下一批次的任务\n        const nextBatchTasks = game.tasks.filter(t => t.batch_number === currentBatchNum + 1 && t.status === TaskStatus.PENDING && t.assigned_to === null);\n\n        // 如果有下一批次的任务，自动开始翻转\n        if (nextBatchTasks.length > 0) {\n          // 自动开始翻转第一个任务\n          const firstTask = nextBatchTasks[0];\n          handleCoinFlip(firstTask.id);\n        }\n      }\n    }\n  };\n\n  // 修改渲染硬币的函数\n  const renderCoin = (type, isFlipping, isSmall = false, onClick, taskId) => {\n    const flipState = taskId ? flipStates[taskId] : undefined;\n    const isFlipped = taskId ? flippedCoins.includes(taskId) : false;\n\n    // 决定显示哪一面\n    const displayType = isFlipped ? type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS : type;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: isSmall ? 20 : 32,\n        height: isSmall ? 20 : 32,\n        borderRadius: '50%',\n        backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n        border: `${isSmall ? 1 : 2}px solid #B8860B`,\n        color: '#704214',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 'bold',\n        fontSize: isSmall ? '0.6rem' : '0.8rem',\n        perspective: 1000,\n        mb: isSmall ? 0 : 1,\n        position: 'relative',\n        cursor: onClick ? 'pointer' : 'default',\n        transition: 'transform 0.6s',\n        transformStyle: 'preserve-3d',\n        transform: flipState !== null && flipState !== void 0 && flipState.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n        '&:hover': onClick ? {\n          transform: 'scale(1.05)',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n        } : {},\n        '&:active': onClick ? {\n          transform: 'scale(0.95)'\n        } : {},\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          borderRadius: '50%',\n          background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n          pointerEvents: 'none'\n        }\n      },\n      onClick: onClick,\n      children: displayType === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 监听游戏状态变化\n  useEffect(() => {\n    var _game$players$2;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && playerId === ((_game$players$2 = game.players[0]) === null || _game$players$2 === void 0 ? void 0 : _game$players$2.id)) {\n      // 检查当前批次是否需要自动开始\n      const currentBatch = game.players[0].current_batch;\n      const prevBatch = currentBatch - 1;\n      if (prevBatch > 0 && isCurrentBatchCompletedByAll(prevBatch)) {\n        checkAndStartNextBatch(prevBatch);\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.status]);\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n\n  // 渲染任务行\n  const renderTaskRow = tasks => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: 1,\n        mb: 2\n      },\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: renderCoin(task.type, false, false, task.assigned_to === playerId && !flippedCoins.includes(task.id) ? () => handleCoinFlip(task.id) : undefined, task.id)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 添加一个函数来检查当前批次是否所有玩家都完成了\n  const isCurrentBatchCompletedByAll = batchNumber => {\n    if (!(game !== null && game !== void 0 && game.tasks) || !game.players) return false;\n    return game.players.every(player => {\n      const playerBatchTasks = game.tasks.filter(t => t.batch_number === batchNumber && t.assigned_to === player.id);\n      return playerBatchTasks.length > 0 && playerBatchTasks.every(t => t.status === TaskStatus.COMPLETED);\n    });\n  };\n\n  // 修改渲染玩家卡片的函数\n  const renderPlayer = player => {\n    var _currentBatchTasks$;\n    const currentBatchTasks = (game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === player.current_batch && t.assigned_to === player.id)) || [];\n    const completedTasks = (game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.status === TaskStatus.COMPLETED && t.assigned_to === player.id)) || [];\n\n    // 获取当前批次的目标类型\n    const currentBatchTarget = (_currentBatchTasks$ = currentBatchTasks[0]) === null || _currentBatchTasks$ === void 0 ? void 0 : _currentBatchTasks$.type;\n\n    // 检查是否可以显示Complete This Batch按钮\n    const canCompleteBatch = player.id === playerId && isBatchAllFlipped(player.current_batch, player.id);\n\n    // 检查是否应该显示等待其他玩家的消息\n    const isWaitingForOthers = player.status === PlayerStatus.WAITING && !isCurrentBatchCompletedByAll(player.current_batch - 1);\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: player.status,\n            color: player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\",\n            size: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2,\n            bgcolor: 'background.default',\n            p: 2,\n            borderRadius: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              mb: 1\n            },\n            children: [\"Current Batch: \", player.current_batch, \" / \", game === null || game === void 0 ? void 0 : game.max_batches, currentBatchTarget && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                mt: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  mr: 1\n                },\n                children: \"Target:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 637,\n                columnNumber: 37\n              }, this), renderCoin(currentBatchTarget, false, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 25\n          }, this), isWaitingForOthers && /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"info\",\n            sx: {\n              mb: 2\n            },\n            children: \"Waiting for other players to complete their current batch...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              color: \"text.secondary\",\n              children: \"Current Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 29\n            }, this), renderTaskRow(currentBatchTasks)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 25\n          }, this), completedTasks.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              color: \"text.secondary\",\n              children: \"Completed Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 33\n            }, this), renderTaskRow(completedTasks)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 29\n          }, this), canCompleteBatch && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => handleCompleteBatch(player.current_batch),\n            sx: {\n              mt: 2\n            },\n            children: \"Complete This Batch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 669,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 17\n      }, this)\n    }, player.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 13\n    }, this);\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n\n  // 添加一个辅助函数来处理毫秒到时间的转换\n  const formatTimeFromMs = ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTimeFromMs(endTime - startTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 734,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 726,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 713,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteGame = () => {\n    setShowResultPage(true);\n  };\n\n  // 修改返回主菜单的处理函数\n  const handleReturnToMainMenu = () => {\n    // 清除游戏状态\n    setGameId('');\n    setGame(null);\n    setWsService(null);\n    setStartTime(null);\n    setEndTime(null);\n    // 清除输入记录\n    setPlayerName('');\n    setPlayerCount(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const renderResultPage = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 600,\n          width: '100%',\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            mb: 3,\n            color: 'primary.main'\n          },\n          children: \"Game Complete! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 796,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            mb: 4\n          },\n          children: [\"Total Time: \", formatTimeFromMs(totalTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 799,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMainMenu,\n          size: \"large\",\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 790,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 781,\n      columnNumber: 13\n    }, this);\n  };\n  const renderStatistics = () => {\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mb: 2,\n          color: 'primary.main'\n        },\n        children: \"Game Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 17\n      }, this), Array.from({\n        length: game.max_batches\n      }, (_, i) => i + 1).map(batchNum => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: [\"Batch \", batchNum]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          sx: {\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Player\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 831,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 832,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 833,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 830,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 829,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [game.players.map(player => {\n                var _player$batch_start_t, _player$batch_complet, _player$batch_start_t2;\n                const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n                const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                const hasStarted = ((_player$batch_start_t = player.batch_start_time) === null || _player$batch_start_t === void 0 ? void 0 : _player$batch_start_t[batchNum]) != null;\n                const completionTime = (_player$batch_complet = player.batch_completion_time) === null || _player$batch_complet === void 0 ? void 0 : _player$batch_complet[batchNum];\n                const startTime = (_player$batch_start_t2 = player.batch_start_time) === null || _player$batch_start_t2 === void 0 ? void 0 : _player$batch_start_t2[batchNum];\n\n                // 计算当前时间（如果批次已开始但未完成）\n                let displayTime = '-';\n                if (completionTime) {\n                  displayTime = formatTimeFromMs(completionTime);\n                } else if (hasStarted && startTime) {\n                  const currentTime = Date.now() - startTime;\n                  displayTime = formatTimeFromMs(currentTime);\n                }\n                let status = 'Pending';\n                if (isCompleted) {\n                  status = 'Completed';\n                } else if (hasStarted) {\n                  status = 'In Progress';\n                }\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: player.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 865,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: displayTime\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 866,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: /*#__PURE__*/_jsxDEV(Chip, {\n                      label: status,\n                      size: \"small\",\n                      color: isCompleted ? 'success' : hasStarted ? 'primary' : 'default'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 868,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 867,\n                    columnNumber: 49\n                  }, this)]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 864,\n                  columnNumber: 45\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(TableRow, {\n                sx: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                },\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 878,\n                    columnNumber: 52\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 878,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: formatTimeFromMs(game.players.reduce((sum, p) => {\n                      var _p$batch_completion_t;\n                      return sum + (((_p$batch_completion_t = p.batch_completion_time) === null || _p$batch_completion_t === void 0 ? void 0 : _p$batch_completion_t[batchNum]) || 0);\n                    }, 0))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 880,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 879,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 887,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 877,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 836,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 828,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 25\n        }, this)]\n      }, batchNum, true, {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 818,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 添加调试日志\n  useEffect(() => {\n    console.log('Current game state:', {\n      gameId,\n      playerId,\n      game,\n      wsService\n    });\n  }, [gameId, playerId, game, wsService]);\n\n  // 更新计时器\n  useEffect(() => {\n    let intervalId;\n    if (startTime && (game === null || game === void 0 ? void 0 : game.status) === 'in_progress') {\n      intervalId = setInterval(() => {\n        setElapsedTime(Date.now() - startTime);\n      }, 1000);\n    }\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [startTime, game === null || game === void 0 ? void 0 : game.status]);\n\n  // 跟踪批次完成时间\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && startTime) {\n      const newCompletionTimes = {\n        ...batchCompletionTimes\n      };\n      const newStartTimes = {\n        ...batchStartTimes\n      };\n      const currentBatch = Math.max(...game.tasks.map(t => t.batch_number));\n      game.players.forEach(player => {\n        if (player.batch_start_time) {\n          Object.entries(player.batch_start_time).forEach(([batchNum, time]) => {\n            const batchNumber = Number(batchNum);\n            if (!newStartTimes[batchNumber]) {\n              newStartTimes[batchNumber] = {};\n            }\n            newStartTimes[batchNumber][batchNumber] = time;\n          });\n        }\n        if (player.batch_completion_time) {\n          Object.entries(player.batch_completion_time).forEach(([batchNum, time]) => {\n            const batchNumber = Number(batchNum);\n            if (!newCompletionTimes[batchNumber]) {\n              newCompletionTimes[batchNumber] = {};\n            }\n            newCompletionTimes[batchNumber][player.id] = time;\n          });\n        }\n      });\n      setBatchStartTimes(newStartTimes);\n      setBatchCompletionTimes(newCompletionTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players, startTime]);\n\n  // 更新批次统计信息\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && startTime) {\n      const newStats = {\n        ...batchStats\n      };\n      for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n        if (!newStats[batchNum]) {\n          newStats[batchNum] = {};\n        }\n        game.players.forEach(player => {\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const completedTasks = batchTasks.filter(t => t.status === TaskStatus.COMPLETED);\n          if (batchTasks.length > 0) {\n            if (completedTasks.length === batchTasks.length && !newStats[batchNum][player.id]) {\n              newStats[batchNum][player.id] = {\n                completionTime: elapsedTime,\n                tasksCompleted: completedTasks.length,\n                totalTasks: batchTasks.length\n              };\n            } else if (!newStats[batchNum][player.id]) {\n              newStats[batchNum][player.id] = {\n                completionTime: 0,\n                tasksCompleted: completedTasks.length,\n                totalTasks: batchTasks.length\n              };\n            }\n          }\n        });\n      }\n      setBatchStats(newStats);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players, game === null || game === void 0 ? void 0 : game.max_batches, startTime, elapsedTime]);\n\n  // 修改统计页面中的完成时间显示\n  const renderBatchStatistics = (batchNum, player) => {\n    var _batchStats$batchNum;\n    const stats = (_batchStats$batchNum = batchStats[batchNum]) === null || _batchStats$batchNum === void 0 ? void 0 : _batchStats$batchNum[player.id];\n    return /*#__PURE__*/_jsxDEV(TableRow, {\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        children: player.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1007,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        children: stats !== null && stats !== void 0 && stats.completionTime ? formatTimeFromMs(stats.completionTime) : '-'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1008,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        children: [stats === null || stats === void 0 ? void 0 : stats.tasksCompleted, \"/\", (stats === null || stats === void 0 ? void 0 : stats.totalTasks) || 0]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1011,\n        columnNumber: 17\n      }, this)]\n    }, player.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1006,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染主菜单\n  const renderMainMenu = () => /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 600,\n      width: '100%',\n      mx: 'auto',\n      mt: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n        p: 4,\n        borderTopLeftRadius: 8,\n        borderTopRightRadius: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        sx: {\n          fontWeight: 'bold',\n          background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent',\n          textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n          textAlign: 'center',\n          mb: 1\n        },\n        children: \"Online Multiplayer Coin Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1033,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"text.secondary\",\n        align: \"center\",\n        children: \"Flip coins with your friends in this multiplayer game!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1044,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1027,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        background: '#ffffff',\n        p: 4,\n        borderBottomLeftRadius: 8,\n        borderBottomRightRadius: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Tabs, {\n        value: activeTab,\n        onChange: (e, newValue) => {\n          setActiveTab(newValue);\n          // 切换标签时也清除输入\n          setPlayerName('');\n          setPlayerCount(2);\n          setJoinGameId('');\n          setError(null);\n        },\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"CREATE GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1064,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"JOIN GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1065,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1056,\n        columnNumber: 17\n      }, this), activeTab === 0 ?\n      /*#__PURE__*/\n      // Create game form\n      _jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleCreateGame,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Name\",\n          required: true,\n          value: playerName,\n          onChange: e => setPlayerName(e.target.value),\n          sx: {\n            mb: 2\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1071,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Number of Players\",\n          type: \"number\",\n          required: true,\n          value: playerCount,\n          onChange: e => setPlayerCount(Number(e.target.value)),\n          inputProps: {\n            min: 2,\n            max: 5\n          },\n          helperText: \"Minimum 2, maximum 5 players\",\n          sx: {\n            mb: 3\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1080,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: !playerName || playerCount < 2 || playerCount > 5,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1092,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1070,\n        columnNumber: 21\n      }, this) :\n      /*#__PURE__*/\n      // Join game form\n      _jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleJoinGame,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Name\",\n          required: true,\n          value: playerName,\n          onChange: e => setPlayerName(e.target.value),\n          sx: {\n            mb: 2\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1104,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Game Code\",\n          required: true,\n          value: joinGameId,\n          onChange: e => setJoinGameId(e.target.value),\n          sx: {\n            mb: 3\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: !playerName || !joinGameId,\n          children: \"Join Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1122,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1103,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1050,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1020,\n    columnNumber: 9\n  }, this);\n  const renderGame = () => {\n    var _game$players$3;\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 1,\n              color: 'primary.main'\n            },\n            children: [\"Game ID: \", game.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1149,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              color: 'text.primary'\n            },\n            children: [\"Status: \", game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1152,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1148,\n          columnNumber: 21\n        }, this), (game.status === 'in_progress' || game.status === 'completed') && startTime && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'text.secondary'\n          },\n          children: [\"Time: \", formatTimeFromMs(elapsedTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1157,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1142,\n        columnNumber: 17\n      }, this), game.status === 'waiting' && playerId === ((_game$players$3 = game.players[0]) === null || _game$players$3 === void 0 ? void 0 : _game$players$3.id) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartGame,\n        sx: {\n          mb: 3\n        },\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1165,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 3,\n            children: game.players.map(renderPlayer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1178,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: renderStatistics()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1184,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1175,\n        columnNumber: 17\n      }, this), game.status === 'completed' && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4,\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMainMenu,\n          sx: {\n            minWidth: 200,\n            borderRadius: 2\n          },\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1192,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1191,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1140,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [!gameId ? renderMainMenu() : game ? renderGame() : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1215,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mt: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1219,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1209,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"fndMRq24EiM6h1Zw0SqmvPVtInA=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","keyframes","Stack","TableContainer","Table","TableHead","TableBody","TableCell","TableRow","Paper","Container","CircularProgress","TaskStatus","PlayerStatus","TaskType","gameService","WebSocketService","jsxDEV","_jsxDEV","Game","gameId","initialGameId","_s","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","currentTime","setCurrentTime","showResultPage","setShowResultPage","batchCompletionTimes","setBatchCompletionTimes","batchStartTimes","setBatchStartTimes","batchFlipStates","setBatchFlipStates","flippedCoins","setFlippedCoins","pendingBatchCompletion","setPendingBatchCompletion","flipStates","setFlipStates","elapsedTime","setElapsedTime","batchStats","setBatchStats","service","updatedGame","console","log","connect","disconnect","status","Date","now","timerInterval","setInterval","clearInterval","tasks","players","newStartTimes","newCompletionTimes","forEach","player","current_batch","batch_start_time","Object","entries","batchNum","Number","max_batches","_newStartTimes$player","batchTasks","filter","t","batch_number","assigned_to","id","startedAt","length","every","COMPLETED","handleGameUpdate","handleCreateGame","e","preventDefault","createGame","joinGame","ws","initialGameState","getGameState","err","Error","message","handleJoinGame","exists","checkGameExists","gameState","handleStartGame","startGame","prev","flipAnimation","renderTargetCoin","type","sx","width","xs","sm","height","borderRadius","border","theme","palette","primary","main","display","alignItems","justifyContent","backgroundColor","background","paper","color","text","fontSize","fontWeight","marginBottom","marginRight","children","HEADS","fileName","_jsxFileName","lineNumber","columnNumber","isBatchAllFlipped","includes","handleCoinFlip","taskId","task","find","isFlipping","showOpposite","setTimeout","newState","allFlipped","handleCompleteBatch","pendingTasks","promises","map","completeTask","Promise","resolve","all","then","_game$players$","checkAndStartNextBatch","currentBatchNum","allCompleted","isCurrentBatchCompletedByAll","firstPlayer","nextBatchTasks","PENDING","firstTask","renderCoin","isSmall","onClick","flipState","undefined","isFlipped","displayType","TAILS","perspective","mb","position","cursor","transition","transformStyle","transform","boxShadow","content","top","left","right","bottom","pointerEvents","_game$players$2","currentBatch","prevBatch","getPlayerStatusColor","ACTIVE","WAITING","IDLE","getTaskStatusColor","IN_PROGRESS","renderTaskRow","flexWrap","gap","batchNumber","playerBatchTasks","renderPlayer","_currentBatchTasks$","currentBatchTasks","completedTasks","currentBatchTarget","canCompleteBatch","isWaitingForOthers","variant","name","label","size","bgcolor","p","mt","mr","severity","handleTabChange","_","newValue","handleGameComplete","formatTimeFromMs","ms","totalSeconds","Math","floor","minutes","seconds","toString","padStart","renderCompletionDialog","totalTime","open","onClose","PaperProps","textAlign","flexDirection","py","window","location","reload","handleCompleteGame","handleReturnToMainMenu","renderResultPage","minHeight","maxWidth","renderStatistics","Array","from","i","component","align","_player$batch_start_t","_player$batch_complet","_player$batch_start_t2","isCompleted","hasStarted","completionTime","batch_completion_time","displayTime","reduce","sum","_p$batch_completion_t","intervalId","max","time","newStats","tasksCompleted","totalTasks","renderBatchStatistics","_batchStats$batchNum","stats","renderMainMenu","mx","borderTopLeftRadius","borderTopRightRadius","WebkitBackgroundClip","WebkitTextFillColor","textShadow","borderBottomLeftRadius","borderBottomRightRadius","value","onChange","onSubmit","fullWidth","required","target","autoComplete","inputProps","min","helperText","disabled","renderGame","_game$players$3","container","spacing","item","md","minWidth","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game 2/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes,\n    Stack,\n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableCell,\n    TableRow,\n    Paper,\n    Container,\n    CircularProgress\n} from '@mui/material';\nimport { Game as GameType, Player, Task, TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\n\ninterface GameProps {\n    gameId?: string;\n}\n\ntype TabType = 0 | 1;\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | undefined>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState<TabType>(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n    const [batchCompletionTimes, setBatchCompletionTimes] = useState<{[key: number]: {[key: string]: number}}>({});\n    const [batchStartTimes, setBatchStartTimes] = useState<{[key: number]: {[key: number]: number}}>({});\n    const [batchFlipStates, setBatchFlipStates] = useState<{\n        [batchNum: number]: {\n            [taskId: string]: boolean;  // true means flipped\n        };\n    }>({});\n\n    // 添加状态来跟踪硬币的翻转状态和批次完成状态\n    const [flippedCoins, setFlippedCoins] = useState<string[]>([]);\n    const [pendingBatchCompletion, setPendingBatchCompletion] = useState<{\n        [batchNum: number]: string[];  // batchNum -> taskIds\n    }>({});\n\n    // 添加翻转动画状态\n    interface FlipState {\n        isFlipping: boolean;\n        showOpposite: boolean;\n    }\n    const [flipStates, setFlipStates] = useState<{\n        [key: string]: FlipState;\n    }>({});\n\n    // 修改计时器状态和开始时间状态\n    const [elapsedTime, setElapsedTime] = useState<number>(0);\n\n    // 添加批次统计时间的状态\n    const [batchStats, setBatchStats] = useState<{\n        [batchNum: number]: {\n            [playerId: string]: {\n                completionTime: number;\n                tasksCompleted: number;\n                totalTasks: number;\n            }\n        }\n    }>({});\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, (updatedGame) => {\n                console.log('Game state updated:', updatedGame);\n                setGame(updatedGame);\n            });\n            service.connect();\n            setWsService(service);\n\n            // Cleanup function\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && startTime) {\n            timerInterval = setInterval(() => {\n                setCurrentTime(Date.now() - startTime);\n            }, 1000);\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, startTime, endTime]);\n\n    useEffect(() => {\n        if (game?.tasks && game.players) {\n            const newStartTimes = { ...batchStartTimes };\n            const newCompletionTimes = { ...batchCompletionTimes };\n\n            game.players.forEach(player => {\n                if (!newStartTimes[player.current_batch]) {\n                    newStartTimes[player.current_batch] = {};\n                }\n                if (!newCompletionTimes[player.current_batch]) {\n                    newCompletionTimes[player.current_batch] = {};\n                }\n\n                // 使用后端提供的批次开始时间\n                if (player.batch_start_time) {\n                    Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n                        newStartTimes[player.current_batch][Number(batchNum)] = startTime;\n                    });\n                }\n\n                // Calculate completion times for each batch\n                for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const startedAt = newStartTimes[player.current_batch]?.[batchNum];\n                    if (startedAt && \n                        batchTasks.length > 0 && \n                        batchTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                        !newCompletionTimes[player.current_batch][player.id]) {\n                        newCompletionTimes[player.current_batch][player.id] = Date.now() - startedAt;\n                    }\n                }\n            });\n\n            setBatchStartTimes(newStartTimes);\n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.tasks, game?.players]);\n\n    // 添加错误处理函数\n    const handleGameUpdate = (updatedGame: GameType) => {\n        setGame(updatedGame);\n        if (updatedGame.status === 'completed' && !endTime) {\n            setEndTime(Date.now());\n        }\n    };\n\n    const handleCreateGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            // 创建游戏\n            const gameId = await gameService.createGame(playerCount, 4, 0);\n            if (gameId) {\n                // 加入游戏\n                const playerId = await gameService.joinGame(gameId, playerName);\n                \n                // 更新状态\n                setGameId(gameId);\n                setPlayerId(playerId);\n                \n                // 创建WebSocket连接\n                const ws = new WebSocketService(\n                    gameId,\n                    playerName,\n                    handleGameUpdate\n                );\n                setWsService(ws);\n                \n                // 获取初始游戏状态\n                const initialGameState = await gameService.getGameState(gameId);\n                setGame(initialGameState);\n                \n                // 设置开始时间\n                setStartTime(Date.now());\n                \n                console.log('Game created successfully:', { gameId, playerId });\n            }\n        } catch (err) {\n            console.error('Error creating game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to create game');\n        }\n    };\n\n    const handleJoinGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            if (joinGameId) {\n                // 检查游戏是否存在\n                const exists = await gameService.checkGameExists(joinGameId);\n                if (!exists) {\n                    setError('Game not found');\n                    return;\n                }\n                \n                // 加入游戏\n                const playerId = await gameService.joinGame(joinGameId, playerName);\n                \n                // 更新状态\n                setGameId(joinGameId);\n                setPlayerId(playerId);\n                \n                // 创建WebSocket连接\n                const ws = new WebSocketService(\n                    joinGameId,\n                    playerName,\n                    handleGameUpdate\n                );\n                setWsService(ws);\n                \n                // 获取游戏状态\n                const gameState = await gameService.getGameState(joinGameId);\n                setGame(gameState);\n                \n                // 设置开始时间\n                setStartTime(Date.now());\n                \n                console.log('Joined game successfully:', { gameId: joinGameId, playerId });\n            }\n        } catch (err) {\n            console.error('Error joining game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to join game');\n        }\n    };\n\n    const handleStartGame = async () => {\n        if (!gameId) return;\n        \n        try {\n            await gameService.startGame(gameId);\n            const currentTime = Date.now();\n            setStartTime(currentTime);\n            setBatchStartTimes(prev => ({\n                ...prev,\n                1: { 1: currentTime }\n            }));\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Failed to start game');\n        }\n    };\n\n    const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n    // 添加一个专门用于渲染目标硬币的函数\n    const renderTargetCoin = (type: TaskType) => {\n        return (\n            <Box\n                sx={{\n                    width: { xs: '20px', sm: '32px' },\n                    height: { xs: '20px', sm: '32px' },\n                    borderRadius: '50%',\n                    border: theme => ({\n                        xs: `1px solid ${theme.palette.primary.main}`,\n                        sm: `2px solid ${theme.palette.primary.main}`\n                    }),\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    backgroundColor: theme => theme.palette.background.paper,\n                    color: theme => theme.palette.text.primary,\n                    fontSize: { xs: '0.7rem', sm: '0.9rem' },\n                    fontWeight: 'bold',\n                    marginBottom: { xs: 0, sm: 1 },\n                    marginRight: 1\n                }}\n            >\n                {type === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 检查批次是否所有硬币都已翻转\n    const isBatchAllFlipped = (batchNum: number, playerId: string) => {\n        const batchTasks = game?.tasks.filter(t => \n            t.batch_number === batchNum && \n            t.assigned_to === playerId\n        );\n        return batchTasks?.every(t => flippedCoins.includes(t.id)) || false;\n    };\n\n    // 处理硬币翻转\n    const handleCoinFlip = (taskId: string) => {\n        const task = game?.tasks.find(t => t.id === taskId);\n        if (!task || !game) return;\n\n        // 如果硬币已经翻转，不做任何操作\n        if (flippedCoins.includes(taskId)) return;\n\n        // 开始翻转动画\n        setFlipStates(prev => ({\n            ...prev,\n            [taskId]: { \n                isFlipping: true,\n                showOpposite: false\n            }\n        }));\n\n        // 动画完成后记录翻转状态\n        setTimeout(() => {\n            setFlipStates(prev => ({\n                ...prev,\n                [taskId]: { \n                    isFlipping: false,\n                    showOpposite: true\n                }\n            }));\n            \n            // 记录硬币已翻转\n            setFlippedCoins(prev => [...prev, taskId]);\n\n            // 更新待完成的批次\n            setPendingBatchCompletion(prev => {\n                const newState = { ...prev };\n                if (!newState[task.batch_number]) {\n                    newState[task.batch_number] = [];\n                }\n                if (!newState[task.batch_number].includes(taskId)) {\n                    newState[task.batch_number] = [...newState[task.batch_number], taskId];\n                }\n                return newState;\n            });\n\n            // 检查是否所有硬币都已翻转\n            const batchTasks = game.tasks.filter(t => \n                t.batch_number === task.batch_number && \n                t.assigned_to === playerId\n            );\n            \n            const allFlipped = batchTasks.every(t => \n                flippedCoins.includes(t.id) || t.id === taskId\n            );\n\n            if (allFlipped) {\n                handleCompleteBatch(task.batch_number);\n            }\n        }, 600);\n    };\n\n    // 处理批次完成\n    const handleCompleteBatch = (batchNum: number) => {\n        const pendingTasks = pendingBatchCompletion[batchNum] || [];\n        if (pendingTasks.length === 0) return;\n\n        // 发送所有任务完成的请求\n        const promises = pendingTasks.map(taskId => {\n            if (wsService) {\n                return wsService.completeTask(taskId);\n            }\n            return Promise.resolve();\n        });\n\n        // 等待所有任务完成请求发送完毕\n        Promise.all(promises).then(() => {\n            // 清理这个批次的待完成状态\n            setPendingBatchCompletion(prev => {\n                const newState = { ...prev };\n                delete newState[batchNum];\n                return newState;\n            });\n\n            // 检查是否是第一个玩家，且是否所有玩家都完成了当前批次\n            if (game && playerId === game.players[0]?.id) {\n                checkAndStartNextBatch(batchNum);\n            }\n        });\n    };\n\n    // 添加一个新函数来检查和开始下一批次\n    const checkAndStartNextBatch = (currentBatchNum: number) => {\n        if (!game || !playerId) return;\n\n        // 检查是否所有玩家都完成了当前批次\n        const allCompleted = isCurrentBatchCompletedByAll(currentBatchNum);\n        \n        if (allCompleted && currentBatchNum < game.max_batches) {\n            // 找到第一个玩家的当前任务\n            const firstPlayer = game.players[0];\n            if (firstPlayer.id === playerId) {\n                // 获取下一批次的任务\n                const nextBatchTasks = game.tasks.filter(t => \n                    t.batch_number === currentBatchNum + 1 && \n                    t.status === TaskStatus.PENDING &&\n                    t.assigned_to === null\n                );\n\n                // 如果有下一批次的任务，自动开始翻转\n                if (nextBatchTasks.length > 0) {\n                    // 自动开始翻转第一个任务\n                    const firstTask = nextBatchTasks[0];\n                    handleCoinFlip(firstTask.id);\n                }\n            }\n        }\n    };\n\n    // 修改渲染硬币的函数\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void, taskId?: string) => {\n        const flipState = taskId ? flipStates[taskId] : undefined;\n        const isFlipped = taskId ? flippedCoins.includes(taskId) : false;\n        \n        // 决定显示哪一面\n        const displayType = isFlipped\n            ? (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) \n            : type;\n\n        return (\n            <Box\n                sx={{\n                    width: isSmall ? 20 : 32,\n                    height: isSmall ? 20 : 32,\n                    borderRadius: '50%',\n                    backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                    border: `${isSmall ? 1 : 2}px solid #B8860B`,\n                    color: '#704214',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontWeight: 'bold',\n                    fontSize: isSmall ? '0.6rem' : '0.8rem',\n                    perspective: 1000,\n                    mb: isSmall ? 0 : 1,\n                    position: 'relative',\n                    cursor: onClick ? 'pointer' : 'default',\n                    transition: 'transform 0.6s',\n                    transformStyle: 'preserve-3d',\n                    transform: flipState?.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n                    '&:hover': onClick ? {\n                        transform: 'scale(1.05)',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                    } : {},\n                    '&:active': onClick ? {\n                        transform: 'scale(0.95)'\n                    } : {},\n                    '&::after': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        borderRadius: '50%',\n                        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                        pointerEvents: 'none'\n                    }\n                }}\n                onClick={onClick}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 监听游戏状态变化\n    useEffect(() => {\n        if (game?.status === 'in_progress' && playerId === game.players[0]?.id) {\n            // 检查当前批次是否需要自动开始\n            const currentBatch = game.players[0].current_batch;\n            const prevBatch = currentBatch - 1;\n            \n            if (prevBatch > 0 && isCurrentBatchCompletedByAll(prevBatch)) {\n                checkAndStartNextBatch(prevBatch);\n            }\n        }\n    }, [game?.tasks, game?.status]);\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    // 渲染任务行\n    const renderTaskRow = (tasks: Task[]) => {\n        return (\n            <Box sx={{ \n                display: 'flex', \n                flexWrap: 'wrap',\n                gap: 1,\n                mb: 2 \n            }}>\n                {tasks.map(task => (\n                    <Box\n                        key={task.id}\n                        sx={{\n                            display: 'flex',\n                            alignItems: 'center',\n                        }}>\n                        {renderCoin(\n                            task.type,\n                            false,\n                            false,\n                            task.assigned_to === playerId && !flippedCoins.includes(task.id)\n                                ? () => handleCoinFlip(task.id)\n                                : undefined,\n                            task.id\n                        )}\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    // 添加一个函数来检查当前批次是否所有玩家都完成了\n    const isCurrentBatchCompletedByAll = (batchNumber: number) => {\n        if (!game?.tasks || !game.players) return false;\n        \n        return game.players.every(player => {\n            const playerBatchTasks = game.tasks.filter(t => \n                t.batch_number === batchNumber && \n                t.assigned_to === player.id\n            );\n            return playerBatchTasks.length > 0 && \n                   playerBatchTasks.every(t => t.status === TaskStatus.COMPLETED);\n        });\n    };\n\n    // 修改渲染玩家卡片的函数\n    const renderPlayer = (player: Player) => {\n        const currentBatchTasks = game?.tasks.filter(t => \n            t.batch_number === player.current_batch && \n            t.assigned_to === player.id\n        ) || [];\n\n        const completedTasks = game?.tasks.filter(t =>\n            t.status === TaskStatus.COMPLETED &&\n            t.assigned_to === player.id\n        ) || [];\n\n        // 获取当前批次的目标类型\n        const currentBatchTarget = currentBatchTasks[0]?.type;\n        \n        // 检查是否可以显示Complete This Batch按钮\n        const canCompleteBatch = player.id === playerId && \n                                isBatchAllFlipped(player.current_batch, player.id);\n        \n        // 检查是否应该显示等待其他玩家的消息\n        const isWaitingForOthers = player.status === PlayerStatus.WAITING && \n                                  !isCurrentBatchCompletedByAll(player.current_batch - 1);\n\n        return (\n            <Card key={player.id} sx={{ mb: 2 }}>\n                <CardContent>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                        <Typography variant=\"h6\">\n                            {player.name}\n                        </Typography>\n                        <Chip \n                            label={player.status}\n                            color={player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\"}\n                            size=\"small\"\n                        />\n                    </Box>\n\n                    <Box sx={{ mb: 2, bgcolor: 'background.default', p: 2, borderRadius: 1 }}>\n                        <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n                            Current Batch: {player.current_batch} / {game?.max_batches}\n                            {currentBatchTarget && (\n                                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\n                                    <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                                        Target:\n                                    </Typography>\n                                    {renderCoin(currentBatchTarget, false, true)}\n                                </Box>\n                            )}\n                        </Typography>\n\n                        {/* 显示等待其他玩家的消息 */}\n                        {isWaitingForOthers && (\n                            <Alert severity=\"info\" sx={{ mb: 2 }}>\n                                Waiting for other players to complete their current batch...\n                            </Alert>\n                        )}\n\n                        <Box sx={{ mb: 2 }}>\n                            <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                                Current Tasks\n                            </Typography>\n                            {renderTaskRow(currentBatchTasks)}\n                        </Box>\n\n                        {completedTasks.length > 0 && (\n                            <Box>\n                                <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                                    Completed Tasks\n                                </Typography>\n                                {renderTaskRow(completedTasks)}\n                            </Box>\n                        )}\n\n                        {canCompleteBatch && (\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => handleCompleteBatch(player.current_batch)}\n                                sx={{ mt: 2 }}\n                            >\n                                Complete This Batch\n                            </Button>\n                        )}\n                    </Box>\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue as TabType);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    // 添加一个辅助函数来处理毫秒到时间的转换\n    const formatTimeFromMs = (ms: number) => {\n        const totalSeconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed!\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTimeFromMs(endTime - startTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    // 修改返回主菜单的处理函数\n    const handleReturnToMainMenu = () => {\n        // 清除游戏状态\n        setGameId('');\n        setGame(null);\n        setWsService(null);\n        setStartTime(null);\n        setEndTime(null);\n        // 清除输入记录\n        setPlayerName('');\n        setPlayerCount(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTimeFromMs(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMainMenu}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    const renderStatistics = () => {\n        if (!game) return null;\n\n        return (\n            <Box sx={{ p: 2 }}>\n                <Typography variant=\"h6\" sx={{ mb: 2, color: 'primary.main' }}>\n                    Game Statistics\n                </Typography>\n                {Array.from({ length: game.max_batches }, (_, i) => i + 1).map(batchNum => (\n                    <Box key={batchNum} sx={{ mb: 3 }}>\n                        <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                            Batch {batchNum}\n                        </Typography>\n                        <TableContainer component={Paper} sx={{ mb: 2 }}>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Player</TableCell>\n                                        <TableCell align=\"right\">Time</TableCell>\n                                        <TableCell align=\"right\">Status</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {game.players.map(player => {\n                                        const batchTasks = game.tasks.filter(t => \n                                            t.batch_number === batchNum && \n                                            t.assigned_to === player.id\n                                        );\n                                        const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                                        const hasStarted = player.batch_start_time?.[batchNum] != null;\n                                        const completionTime = player.batch_completion_time?.[batchNum];\n                                        const startTime = player.batch_start_time?.[batchNum];\n                                        \n                                        // 计算当前时间（如果批次已开始但未完成）\n                                        let displayTime = '-';\n                                        if (completionTime) {\n                                            displayTime = formatTimeFromMs(completionTime);\n                                        } else if (hasStarted && startTime) {\n                                            const currentTime = Date.now() - startTime;\n                                            displayTime = formatTimeFromMs(currentTime);\n                                        }\n\n                                        let status = 'Pending';\n                                        if (isCompleted) {\n                                            status = 'Completed';\n                                        } else if (hasStarted) {\n                                            status = 'In Progress';\n                                        }\n\n                                        return (\n                                            <TableRow key={player.id}>\n                                                <TableCell>{player.name}</TableCell>\n                                                <TableCell align=\"right\">{displayTime}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Chip \n                                                        label={status}\n                                                        size=\"small\"\n                                                        color={isCompleted ? 'success' : (hasStarted ? 'primary' : 'default')}\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                    <TableRow sx={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}>\n                                        <TableCell><strong>Total</strong></TableCell>\n                                        <TableCell align=\"right\">\n                                            <strong>\n                                                {formatTimeFromMs(game.players.reduce((sum, p) => \n                                                    sum + (p.batch_completion_time?.[batchNum] || 0), \n                                                    0\n                                                ))}\n                                            </strong>\n                                        </TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    // 添加调试日志\n    useEffect(() => {\n        console.log('Current game state:', {\n            gameId,\n            playerId,\n            game,\n            wsService\n        });\n    }, [gameId, playerId, game, wsService]);\n\n    // 更新计时器\n    useEffect(() => {\n        let intervalId: NodeJS.Timeout;\n        \n        if (startTime && game?.status === 'in_progress') {\n            intervalId = setInterval(() => {\n                setElapsedTime(Date.now() - startTime);\n            }, 1000);\n        }\n        \n        return () => {\n            if (intervalId) {\n                clearInterval(intervalId);\n            }\n        };\n    }, [startTime, game?.status]);\n\n    // 跟踪批次完成时间\n    useEffect(() => {\n        if (game?.tasks && startTime) {\n            const newCompletionTimes = { ...batchCompletionTimes };\n            const newStartTimes = { ...batchStartTimes };\n            const currentBatch = Math.max(...game.tasks.map(t => t.batch_number));\n            \n            game.players.forEach(player => {\n                if (player.batch_start_time) {\n                    Object.entries(player.batch_start_time).forEach(([batchNum, time]) => {\n                        const batchNumber = Number(batchNum);\n                        if (!newStartTimes[batchNumber]) {\n                            newStartTimes[batchNumber] = {};\n                        }\n                        newStartTimes[batchNumber][batchNumber] = time;\n                    });\n                }\n                \n                if (player.batch_completion_time) {\n                    Object.entries(player.batch_completion_time).forEach(([batchNum, time]) => {\n                        const batchNumber = Number(batchNum);\n                        if (!newCompletionTimes[batchNumber]) {\n                            newCompletionTimes[batchNumber] = {};\n                        }\n                        newCompletionTimes[batchNumber][player.id] = time;\n                    });\n                }\n            });\n            \n            setBatchStartTimes(newStartTimes);\n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.tasks, game?.players, startTime]);\n\n    // 更新批次统计信息\n    useEffect(() => {\n        if (game?.tasks && startTime) {\n            const newStats = { ...batchStats };\n            \n            for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n                if (!newStats[batchNum]) {\n                    newStats[batchNum] = {};\n                }\n                \n                game.players.forEach(player => {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const completedTasks = batchTasks.filter(t => \n                        t.status === TaskStatus.COMPLETED\n                    );\n                    \n                    if (batchTasks.length > 0) {\n                        if (completedTasks.length === batchTasks.length && !newStats[batchNum][player.id]) {\n                            newStats[batchNum][player.id] = {\n                                completionTime: elapsedTime,\n                                tasksCompleted: completedTasks.length,\n                                totalTasks: batchTasks.length\n                            };\n                        } else if (!newStats[batchNum][player.id]) {\n                            newStats[batchNum][player.id] = {\n                                completionTime: 0,\n                                tasksCompleted: completedTasks.length,\n                                totalTasks: batchTasks.length\n                            };\n                        }\n                    }\n                });\n            }\n            \n            setBatchStats(newStats);\n        }\n    }, [game?.tasks, game?.players, game?.max_batches, startTime, elapsedTime]);\n\n    // 修改统计页面中的完成时间显示\n    const renderBatchStatistics = (batchNum: number, player: Player) => {\n        const stats = batchStats[batchNum]?.[player.id];\n        \n        return (\n            <TableRow key={player.id}>\n                <TableCell>{player.name}</TableCell>\n                <TableCell align=\"right\">\n                    {stats?.completionTime ? formatTimeFromMs(stats.completionTime) : '-'}\n                </TableCell>\n                <TableCell align=\"right\">\n                    {stats?.tasksCompleted}/{stats?.totalTasks || 0}\n                </TableCell>\n            </TableRow>\n        );\n    };\n\n    // 渲染主菜单\n    const renderMainMenu = () => (\n        <Card sx={{\n            maxWidth: 600,\n            width: '100%',\n            mx: 'auto',\n            mt: 4\n        }}>\n            {/* Top section with title and subtitle */}\n            <Box sx={{\n                background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n                p: 4,\n                borderTopLeftRadius: 8,\n                borderTopRightRadius: 8\n            }}>\n                <Typography variant=\"h3\" sx={{\n                    fontWeight: 'bold',\n                    background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n                    WebkitBackgroundClip: 'text',\n                    WebkitTextFillColor: 'transparent',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n                    textAlign: 'center',\n                    mb: 1\n                }}>\n                    Online Multiplayer Coin Game\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"text.secondary\" align=\"center\">\n                    Flip coins with your friends in this multiplayer game!\n                </Typography>\n            </Box>\n\n            {/* Bottom section with form */}\n            <Box sx={{\n                background: '#ffffff',\n                p: 4,\n                borderBottomLeftRadius: 8,\n                borderBottomRightRadius: 8\n            }}>\n                <Tabs value={activeTab} onChange={(e, newValue) => {\n                    setActiveTab(newValue as TabType);\n                    // 切换标签时也清除输入\n                    setPlayerName('');\n                    setPlayerCount(2);\n                    setJoinGameId('');\n                    setError(null);\n                }} sx={{ mb: 3 }}>\n                    <Tab label=\"CREATE GAME\" />\n                    <Tab label=\"JOIN GAME\" />\n                </Tabs>\n\n                {activeTab === 0 ? (\n                    // Create game form\n                    <Box component=\"form\" onSubmit={handleCreateGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Number of Players\"\n                            type=\"number\"\n                            required\n                            value={playerCount}\n                            onChange={(e) => setPlayerCount(Number(e.target.value))}\n                            inputProps={{ min: 2, max: 5 }}\n                            helperText=\"Minimum 2, maximum 5 players\"\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || playerCount < 2 || playerCount > 5}\n                        >\n                            Create Game\n                        </Button>\n                    </Box>\n                ) : (\n                    // Join game form\n                    <Box component=\"form\" onSubmit={handleJoinGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Game Code\"\n                            required\n                            value={joinGameId}\n                            onChange={(e) => setJoinGameId(e.target.value)}\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || !joinGameId}\n                        >\n                            Join Game\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        </Card>\n    );\n\n    const renderGame = () => {\n        if (!game) return null;\n        \n        return (\n            <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n                {/* 游戏头部信息 */}\n                <Box sx={{ \n                    display: 'flex', \n                    justifyContent: 'space-between', \n                    alignItems: 'center',\n                    mb: 3\n                }}>\n                    <Box>\n                        <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                            Game ID: {game.id}\n                        </Typography>\n                        <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                            Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                        </Typography>\n                    </Box>\n                    {(game.status === 'in_progress' || game.status === 'completed') && startTime && (\n                        <Typography variant=\"h6\" sx={{ color: 'text.secondary' }}>\n                            Time: {formatTimeFromMs(elapsedTime)}\n                        </Typography>\n                    )}\n                </Box>\n\n                {/* 开始游戏按钮 */}\n                {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleStartGame}\n                        sx={{ mb: 3 }}\n                    >\n                        Start Game\n                    </Button>\n                )}\n\n                {/* 游戏内容 */}\n                <Grid container spacing={3}>\n                    {/* Left column: Player cards */}\n                    <Grid item xs={12} md={7}>\n                        <Stack spacing={3}>\n                            {game.players.map(renderPlayer)}\n                        </Stack>\n                    </Grid>\n\n                    {/* Right column: Results and statistics */}\n                    <Grid item xs={12} md={5}>\n                        {renderStatistics()}\n                    </Grid>\n                </Grid>\n\n                {/* 返回主菜单按钮 - 只在游戏完成时显示 */}\n                {game.status === 'completed' && (\n                    <Box sx={{ mt: 4, textAlign: 'center' }}>\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleReturnToMainMenu}\n                            sx={{\n                                minWidth: 200,\n                                borderRadius: 2\n                            }}\n                        >\n                            Return to Main Menu\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        );\n    };\n\n    return (\n        <Container>\n            {!gameId ? (\n                renderMainMenu()\n            ) : game ? (\n                renderGame()\n            ) : (\n                <CircularProgress />\n            )}\n            \n            {error && (\n                <Alert severity=\"error\" sx={{ mt: 2 }}>\n                    {error}\n                </Alert>\n            )}\n        </Container>\n    );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}