{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\nexport const gameService = {\n  createGame: async (playerCount, maxBatches, tasksPerBatch) => {\n    console.log('Creating game with params:', {\n      playerCount,\n      maxBatches,\n      tasksPerBatch\n    });\n    const response = await axios.post(`${API_URL}/games/create`, null, {\n      params: {\n        player_count: playerCount,\n        max_batches: maxBatches,\n        tasks_per_batch: tasksPerBatch\n      }\n    });\n    console.log('Game created:', response.data);\n    return response.data.game_id;\n  },\n  checkGameExists: async gameId => {\n    console.log('Checking if game exists:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n    console.log('Game exists response:', response.data);\n    return response.data.exists;\n  },\n  joinGame: async (gameId, playerName) => {\n    console.log('Joining game:', {\n      gameId,\n      playerName\n    });\n    const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n      params: {\n        player_name: playerName\n      }\n    });\n    console.log('Join game response:', response.data);\n    return response.data.player_id;\n  },\n  startGame: async gameId => {\n    console.log('Starting game:', gameId);\n    await axios.post(`${API_URL}/games/${gameId}/start`);\n    console.log('Game started');\n  },\n  getGameState: async gameId => {\n    console.log('Getting game state:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}`);\n    console.log('Game state:', response.data);\n    return response.data;\n  },\n  flipCoin: async (gameId, taskId) => {\n    console.log('Flipping coin:', {\n      gameId,\n      taskId\n    });\n    await axios.post(`${API_URL}/games/${gameId}/flip/${taskId}`);\n    console.log('Coin flipped');\n  }\n};\nexport class WebSocketService {\n  constructor(gameId, playerId, onGameUpdate) {\n    this.ws = void 0;\n    this.messageHandlers = [];\n    this.gameId = void 0;\n    this.playerId = void 0;\n    this.onGameUpdate = void 0;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.isConnecting = false;\n    this.gameId = gameId;\n    this.playerId = playerId.length > 10 ? playerId.split('-')[0] : playerId;\n    this.onGameUpdate = onGameUpdate;\n    this.connect();\n  }\n  connect() {\n    if (this.isConnecting) {\n      console.log('Already attempting to connect...');\n      return;\n    }\n    this.isConnecting = true;\n    console.log('Attempting to connect WebSocket...', this.gameId, this.playerId);\n    try {\n      if (!this.gameId || !this.playerId) {\n        throw new Error('Invalid gameId or playerId');\n      }\n      const wsUrl = new URL(`${WS_URL}/ws/${this.gameId}/${this.playerId}`);\n      wsUrl.searchParams.append('game_id', this.gameId);\n      wsUrl.searchParams.append('player_id', this.playerId);\n      console.log('WebSocket URL:', wsUrl.toString());\n      if (this.ws) {\n        this.ws.close();\n      }\n      this.ws = new WebSocket(wsUrl.toString());\n      this.ws.onopen = () => {\n        console.log('WebSocket connected successfully');\n        this.isConnecting = false;\n        this.reconnectAttempts = 0;\n        this.sendMessage({\n          type: 'REQUEST_GAME_STATE',\n          data: {\n            gameId: this.gameId\n          }\n        });\n      };\n      this.ws.onmessage = event => {\n        try {\n          const message = JSON.parse(event.data);\n          console.log('WebSocket message received:', message);\n          if (message.type === 'GAME_UPDATE') {\n            this.onGameUpdate(message.data);\n          }\n          this.messageHandlers.forEach(handler => handler(message));\n        } catch (error) {\n          console.error('Error processing WebSocket message:', error);\n        }\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket error:', error);\n        this.isConnecting = false;\n        console.error('WebSocket error details:', {\n          readyState: this.ws.readyState,\n          url: this.ws.url,\n          gameId: this.gameId,\n          playerId: this.playerId\n        });\n      };\n      this.ws.onclose = event => {\n        console.log('WebSocket connection closed:', event);\n        this.isConnecting = false;\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.reconnectAttempts++;\n          const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 10000);\n          console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts}) in ${delay}ms...`);\n          setTimeout(() => this.connect(), delay);\n        } else {\n          console.error('Max reconnection attempts reached');\n        }\n      };\n    } catch (error) {\n      console.error('Error during WebSocket connection setup:', error);\n      this.isConnecting = false;\n    }\n  }\n  disconnect() {\n    this.ws.close();\n  }\n  onMessage(handler) {\n    this.messageHandlers.push(handler);\n  }\n  sendMessage(message) {\n    if (this.ws.readyState === WebSocket.OPEN) {\n      console.log('Sending WebSocket message:', message);\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not open. Current state:', this.ws.readyState);\n      if (this.ws.readyState === WebSocket.CLOSED) {\n        this.connect();\n      }\n    }\n  }\n  completeTask(taskId) {\n    this.sendMessage({\n      type: 'COMPLETE_TASK',\n      data: {\n        taskId\n      }\n    });\n  }\n  flipCoin(taskId) {\n    this.sendMessage({\n      type: 'FLIP_COIN',\n      data: {\n        taskId\n      }\n    });\n  }\n}","map":{"version":3,"names":["axios","API_URL","WS_URL","gameService","createGame","playerCount","maxBatches","tasksPerBatch","console","log","response","post","params","player_count","max_batches","tasks_per_batch","data","game_id","checkGameExists","gameId","get","exists","joinGame","playerName","player_name","player_id","startGame","getGameState","flipCoin","taskId","WebSocketService","constructor","playerId","onGameUpdate","ws","messageHandlers","reconnectAttempts","maxReconnectAttempts","isConnecting","length","split","connect","Error","wsUrl","URL","searchParams","append","toString","close","WebSocket","onopen","sendMessage","type","onmessage","event","message","JSON","parse","forEach","handler","error","onerror","readyState","url","onclose","delay","Math","min","pow","setTimeout","disconnect","onMessage","push","OPEN","send","stringify","warn","CLOSED","completeTask"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\n const API_URL = 'http://172.20.10.4:8000';\n const WS_URL = 'ws://172.20.10.4:8000';\n\nexport const gameService = {\n    createGame: async (playerCount: number, maxBatches: number, tasksPerBatch: number): Promise<string> => {\n        console.log('Creating game with params:', { playerCount, maxBatches, tasksPerBatch });\n        const response = await axios.post(`${API_URL}/games/create`, null, {\n            params: { player_count: playerCount, max_batches: maxBatches, tasks_per_batch: tasksPerBatch }\n        });\n        console.log('Game created:', response.data);\n        return response.data.game_id;\n    },\n\n    checkGameExists: async (gameId: string): Promise<boolean> => {\n        console.log('Checking if game exists:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n        console.log('Game exists response:', response.data);\n        return response.data.exists;\n    },\n\n    joinGame: async (gameId: string, playerName: string): Promise<string> => {\n        console.log('Joining game:', { gameId, playerName });\n        const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n            params: { player_name: playerName }\n        });\n        console.log('Join game response:', response.data);\n        return response.data.player_id;\n    },\n\n    startGame: async (gameId: string): Promise<void> => {\n        console.log('Starting game:', gameId);\n        await axios.post(`${API_URL}/games/${gameId}/start`);\n        console.log('Game started');\n    },\n\n    getGameState: async (gameId: string): Promise<Game> => {\n        console.log('Getting game state:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}`);\n        console.log('Game state:', response.data);\n        return response.data;\n    },\n\n    flipCoin: async (gameId: string, taskId: string): Promise<void> => {\n        console.log('Flipping coin:', { gameId, taskId });\n        await axios.post(`${API_URL}/games/${gameId}/flip/${taskId}`);\n        console.log('Coin flipped');\n    },\n};\n\nexport class WebSocketService {\n    private ws!: WebSocket;\n    private messageHandlers: ((message: any) => void)[] = [];\n    private gameId: string;\n    private playerId: string;\n    private onGameUpdate: (game: any) => void;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = 5;\n    private isConnecting: boolean = false;\n\n    constructor(gameId: string, playerId: string, onGameUpdate: (game: any) => void) {\n        this.gameId = gameId;\n        this.playerId = playerId.length > 10 ? playerId.split('-')[0] : playerId;\n        this.onGameUpdate = onGameUpdate;\n        this.connect();\n    }\n\n    connect() {\n        if (this.isConnecting) {\n            console.log('Already attempting to connect...');\n            return;\n        }\n\n        this.isConnecting = true;\n        console.log('Attempting to connect WebSocket...', this.gameId, this.playerId);\n        \n        try {\n            if (!this.gameId || !this.playerId) {\n                throw new Error('Invalid gameId or playerId');\n            }\n\n            const wsUrl = new URL(`${WS_URL}/ws/${this.gameId}/${this.playerId}`);\n            wsUrl.searchParams.append('game_id', this.gameId);\n            wsUrl.searchParams.append('player_id', this.playerId);\n            \n            console.log('WebSocket URL:', wsUrl.toString());\n            \n            if (this.ws) {\n                this.ws.close();\n            }\n            \n            this.ws = new WebSocket(wsUrl.toString());\n            \n            this.ws.onopen = () => {\n                console.log('WebSocket connected successfully');\n                this.isConnecting = false;\n                this.reconnectAttempts = 0;\n                \n                this.sendMessage({\n                    type: 'REQUEST_GAME_STATE',\n                    data: { gameId: this.gameId }\n                });\n            };\n\n            this.ws.onmessage = (event) => {\n                try {\n                    const message = JSON.parse(event.data);\n                    console.log('WebSocket message received:', message);\n                    \n                    if (message.type === 'GAME_UPDATE') {\n                        this.onGameUpdate(message.data);\n                    }\n                    \n                    this.messageHandlers.forEach(handler => handler(message));\n                } catch (error) {\n                    console.error('Error processing WebSocket message:', error);\n                }\n            };\n\n            this.ws.onerror = (error) => {\n                console.error('WebSocket error:', error);\n                this.isConnecting = false;\n                \n                console.error('WebSocket error details:', {\n                    readyState: this.ws.readyState,\n                    url: this.ws.url,\n                    gameId: this.gameId,\n                    playerId: this.playerId\n                });\n            };\n\n            this.ws.onclose = (event) => {\n                console.log('WebSocket connection closed:', event);\n                this.isConnecting = false;\n                \n                if (this.reconnectAttempts < this.maxReconnectAttempts) {\n                    this.reconnectAttempts++;\n                    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 10000);\n                    console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts}) in ${delay}ms...`);\n                    setTimeout(() => this.connect(), delay);\n                } else {\n                    console.error('Max reconnection attempts reached');\n                }\n            };\n        } catch (error) {\n            console.error('Error during WebSocket connection setup:', error);\n            this.isConnecting = false;\n        }\n    }\n\n    disconnect() {\n        this.ws.close();\n    }\n\n    onMessage(handler: (message: any) => void) {\n        this.messageHandlers.push(handler);\n    }\n\n    sendMessage(message: any) {\n        if (this.ws.readyState === WebSocket.OPEN) {\n            console.log('Sending WebSocket message:', message);\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.warn('WebSocket is not open. Current state:', this.ws.readyState);\n            if (this.ws.readyState === WebSocket.CLOSED) {\n                this.connect();\n            }\n        }\n    }\n\n    completeTask(taskId: string) {\n        this.sendMessage({\n            type: 'COMPLETE_TASK',\n            data: { taskId }\n        });\n    }\n\n    flipCoin(taskId: string) {\n        this.sendMessage({\n            type: 'FLIP_COIN',\n            data: { taskId }\n        });\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}