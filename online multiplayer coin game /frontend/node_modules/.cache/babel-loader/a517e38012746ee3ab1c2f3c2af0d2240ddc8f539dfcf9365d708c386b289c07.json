{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\nexport const gameService = {\n  createGame: async (playerCount, maxBatches, tasksPerBatch) => {\n    console.log('Creating game with params:', {\n      playerCount,\n      maxBatches,\n      tasksPerBatch\n    });\n    const response = await axios.post(`${API_URL}/games/create`, null, {\n      params: {\n        player_count: playerCount,\n        max_batches: maxBatches,\n        tasks_per_batch: tasksPerBatch\n      }\n    });\n    console.log('Game created:', response.data);\n    return response.data.game_id;\n  },\n  checkGameExists: async gameId => {\n    console.log('Checking if game exists:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n    console.log('Game exists response:', response.data);\n    return response.data.exists;\n  },\n  joinGame: async (gameId, playerName) => {\n    console.log('Joining game:', {\n      gameId,\n      playerName\n    });\n    const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n      params: {\n        player_name: playerName\n      }\n    });\n    console.log('Join game response:', response.data);\n    return response.data.player_id;\n  },\n  startGame: async gameId => {\n    console.log('Starting game:', gameId);\n    await axios.post(`${API_URL}/games/${gameId}/start`);\n    console.log('Game started');\n  },\n  getGameState: async gameId => {\n    console.log('Getting game state:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}`);\n    console.log('Game state:', response.data);\n    return response.data;\n  }\n};\nexport class WebSocketService {\n  constructor(gameId, playerId, onGameUpdate) {\n    this.gameId = gameId;\n    this.playerId = playerId;\n    this.onGameUpdate = onGameUpdate;\n    this.socket = null;\n  }\n  connect() {\n    this.socket = new WebSocket(`ws://localhost:8000/ws/${this.gameId}/${this.playerId}`);\n    this.socket.onmessage = event => {\n      const message = JSON.parse(event.data);\n      if (message.type === 'game_update') {\n        this.onGameUpdate(message.data);\n      }\n    };\n    this.socket.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n  }\n  completeTask(taskId) {\n    return new Promise((resolve, reject) => {\n      if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n        reject(new Error('WebSocket is not connected'));\n        return;\n      }\n      this.socket.send(JSON.stringify({\n        type: 'complete_task',\n        task_id: taskId\n      }));\n      resolve();\n    });\n  }\n  completeGame() {\n    return new Promise((resolve, reject) => {\n      if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n        reject(new Error('WebSocket is not connected'));\n        return;\n      }\n      this.socket.send(JSON.stringify({\n        type: 'complete_game'\n      }));\n      resolve();\n    });\n  }\n}","map":{"version":3,"names":["axios","API_URL","WS_URL","gameService","createGame","playerCount","maxBatches","tasksPerBatch","console","log","response","post","params","player_count","max_batches","tasks_per_batch","data","game_id","checkGameExists","gameId","get","exists","joinGame","playerName","player_name","player_id","startGame","getGameState","WebSocketService","constructor","playerId","onGameUpdate","socket","connect","WebSocket","onmessage","event","message","JSON","parse","type","onerror","error","disconnect","close","completeTask","taskId","Promise","resolve","reject","readyState","OPEN","Error","send","stringify","task_id","completeGame"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game 2/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\n\nexport const gameService = {\n    createGame: async (playerCount: number, maxBatches: number, tasksPerBatch: number): Promise<string> => {\n        console.log('Creating game with params:', { playerCount, maxBatches, tasksPerBatch });\n        const response = await axios.post(`${API_URL}/games/create`, null, {\n            params: { player_count: playerCount, max_batches: maxBatches, tasks_per_batch: tasksPerBatch }\n        });\n        console.log('Game created:', response.data);\n        return response.data.game_id;\n    },\n\n    checkGameExists: async (gameId: string): Promise<boolean> => {\n        console.log('Checking if game exists:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n        console.log('Game exists response:', response.data);\n        return response.data.exists;\n    },\n\n    joinGame: async (gameId: string, playerName: string): Promise<string> => {\n        console.log('Joining game:', { gameId, playerName });\n        const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n            params: { player_name: playerName }\n        });\n        console.log('Join game response:', response.data);\n        return response.data.player_id;\n    },\n\n    startGame: async (gameId: string): Promise<void> => {\n        console.log('Starting game:', gameId);\n        await axios.post(`${API_URL}/games/${gameId}/start`);\n        console.log('Game started');\n    },\n\n    getGameState: async (gameId: string): Promise<Game> => {\n        console.log('Getting game state:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}`);\n        console.log('Game state:', response.data);\n        return response.data;\n    }\n};\n\nexport class WebSocketService {\n    private socket: WebSocket | null = null;\n\n    constructor(\n        private gameId: string,\n        private playerId: string,\n        private onGameUpdate: (game: any) => void\n    ) {}\n\n    connect() {\n        this.socket = new WebSocket(`ws://localhost:8000/ws/${this.gameId}/${this.playerId}`);\n        \n        this.socket.onmessage = (event) => {\n            const message = JSON.parse(event.data);\n            if (message.type === 'game_update') {\n                this.onGameUpdate(message.data);\n            }\n        };\n\n        this.socket.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n    }\n\n    disconnect() {\n        if (this.socket) {\n            this.socket.close();\n            this.socket = null;\n        }\n    }\n\n    completeTask(taskId: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n                reject(new Error('WebSocket is not connected'));\n                return;\n            }\n\n            this.socket.send(JSON.stringify({\n                type: 'complete_task',\n                task_id: taskId\n            }));\n            resolve();\n        });\n    }\n\n    completeGame(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n                reject(new Error('WebSocket is not connected'));\n                return;\n            }\n\n            this.socket.send(JSON.stringify({\n                type: 'complete_game'\n            }));\n            resolve();\n        });\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}