{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\nexport const gameService = {\n  createGame: async (playerCount, maxBatches, tasksPerBatch) => {\n    console.log('Creating game with params:', {\n      playerCount,\n      maxBatches,\n      tasksPerBatch\n    });\n    const response = await axios.post(`${API_URL}/games/create`, null, {\n      params: {\n        player_count: playerCount,\n        max_batches: maxBatches,\n        tasks_per_batch: tasksPerBatch\n      }\n    });\n    console.log('Game created:', response.data);\n    return response.data.game_id;\n  },\n  checkGameExists: async gameId => {\n    console.log('Checking if game exists:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n    console.log('Game exists response:', response.data);\n    return response.data.exists;\n  },\n  joinGame: async (gameId, playerName) => {\n    console.log('Joining game:', {\n      gameId,\n      playerName\n    });\n    const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n      params: {\n        player_name: playerName\n      }\n    });\n    console.log('Join game response:', response.data);\n    return response.data.player_id;\n  },\n  startGame: async gameId => {\n    console.log('Starting game:', gameId);\n    await axios.post(`${API_URL}/games/${gameId}/start`);\n    console.log('Game started');\n  },\n  getGameState: async gameId => {\n    console.log('Getting game state:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}`);\n    console.log('Game state:', response.data);\n    return response.data;\n  },\n  flipCoin: async (gameId, taskId) => {\n    console.log('Flipping coin:', {\n      gameId,\n      taskId\n    });\n    await axios.post(`${API_URL}/games/${gameId}/flip/${taskId}`);\n    console.log('Coin flipped');\n  }\n};\nexport class WebSocketService {\n  constructor(gameId, playerId, onGameUpdate) {\n    this.ws = void 0;\n    this.messageHandlers = [];\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws/${gameId}/${playerId}`;\n    this.ws = new WebSocket(wsUrl);\n    this.ws.onmessage = event => {\n      const message = JSON.parse(event.data);\n\n      // 处理游戏状态更新\n      if (message.type === 'GAME_UPDATE') {\n        onGameUpdate(message.data);\n      }\n\n      // 通知所有消息处理器\n      this.messageHandlers.forEach(handler => handler(message));\n    };\n  }\n\n  // 添加发送消息的方法\n  sendMessage(message) {\n    if (this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    }\n  }\n\n  // 添加消息处理器\n  addMessageHandler(handler) {\n    this.messageHandlers.push(handler);\n  }\n\n  // 移除消息处理器\n  removeMessageHandler(handler) {\n    this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n  }\n  connect() {\n    if (this.ws.readyState === WebSocket.CLOSED) {\n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n      };\n    }\n  }\n  disconnect() {\n    if (this.ws.readyState === WebSocket.OPEN) {\n      this.ws.close();\n    }\n  }\n  completeTask(taskId) {\n    this.sendMessage({\n      type: 'COMPLETE_TASK',\n      data: {\n        taskId\n      }\n    });\n  }\n}","map":{"version":3,"names":["axios","API_URL","WS_URL","gameService","createGame","playerCount","maxBatches","tasksPerBatch","console","log","response","post","params","player_count","max_batches","tasks_per_batch","data","game_id","checkGameExists","gameId","get","exists","joinGame","playerName","player_name","player_id","startGame","getGameState","flipCoin","taskId","WebSocketService","constructor","playerId","onGameUpdate","ws","messageHandlers","protocol","window","location","wsUrl","host","WebSocket","onmessage","event","message","JSON","parse","type","forEach","handler","sendMessage","readyState","OPEN","send","stringify","addMessageHandler","push","removeMessageHandler","filter","h","connect","CLOSED","onopen","disconnect","close","completeTask"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\n const API_URL = 'http://172.20.10.4:8000';\n const WS_URL = 'ws://172.20.10.4:8000';\n\nexport const gameService = {\n    createGame: async (playerCount: number, maxBatches: number, tasksPerBatch: number): Promise<string> => {\n        console.log('Creating game with params:', { playerCount, maxBatches, tasksPerBatch });\n        const response = await axios.post(`${API_URL}/games/create`, null, {\n            params: { player_count: playerCount, max_batches: maxBatches, tasks_per_batch: tasksPerBatch }\n        });\n        console.log('Game created:', response.data);\n        return response.data.game_id;\n    },\n\n    checkGameExists: async (gameId: string): Promise<boolean> => {\n        console.log('Checking if game exists:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n        console.log('Game exists response:', response.data);\n        return response.data.exists;\n    },\n\n    joinGame: async (gameId: string, playerName: string): Promise<string> => {\n        console.log('Joining game:', { gameId, playerName });\n        const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n            params: { player_name: playerName }\n        });\n        console.log('Join game response:', response.data);\n        return response.data.player_id;\n    },\n\n    startGame: async (gameId: string): Promise<void> => {\n        console.log('Starting game:', gameId);\n        await axios.post(`${API_URL}/games/${gameId}/start`);\n        console.log('Game started');\n    },\n\n    getGameState: async (gameId: string): Promise<Game> => {\n        console.log('Getting game state:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}`);\n        console.log('Game state:', response.data);\n        return response.data;\n    },\n\n    flipCoin: async (gameId: string, taskId: string): Promise<void> => {\n        console.log('Flipping coin:', { gameId, taskId });\n        await axios.post(`${API_URL}/games/${gameId}/flip/${taskId}`);\n        console.log('Coin flipped');\n    },\n};\n\nexport class WebSocketService {\n    private ws: WebSocket;\n    private messageHandlers: ((message: any) => void)[] = [];\n\n    constructor(gameId: string, playerId: string, onGameUpdate: (game: any) => void) {\n        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n        const wsUrl = `${protocol}//${window.location.host}/ws/${gameId}/${playerId}`;\n        this.ws = new WebSocket(wsUrl);\n\n        this.ws.onmessage = (event) => {\n            const message = JSON.parse(event.data);\n            \n            // 处理游戏状态更新\n            if (message.type === 'GAME_UPDATE') {\n                onGameUpdate(message.data);\n            }\n            \n            // 通知所有消息处理器\n            this.messageHandlers.forEach(handler => handler(message));\n        };\n    }\n\n    // 添加发送消息的方法\n    public sendMessage(message: any) {\n        if (this.ws.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify(message));\n        }\n    }\n\n    // 添加消息处理器\n    public addMessageHandler(handler: (message: any) => void) {\n        this.messageHandlers.push(handler);\n    }\n\n    // 移除消息处理器\n    public removeMessageHandler(handler: (message: any) => void) {\n        this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    }\n\n    public connect() {\n        if (this.ws.readyState === WebSocket.CLOSED) {\n            this.ws.onopen = () => {\n                console.log('WebSocket connected');\n            };\n        }\n    }\n\n    public disconnect() {\n        if (this.ws.readyState === WebSocket.OPEN) {\n            this.ws.close();\n        }\n    }\n\n    public completeTask(taskId: string) {\n        this.sendMessage({\n            type: 'COMPLETE_TASK',\n            data: { taskId }\n        });\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}