{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Tabs, Tab, Alert, Chip, keyframes, Stack } from '@mui/material';\nimport { TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Game = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  var _game$players$;\n  const [gameId, setGameId] = useState(initialGameId);\n  const [game, setGame] = useState(null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerId, setPlayerId] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n  const [playerCount, setPlayerCount] = useState(2);\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showResultPage, setShowResultPage] = useState(false);\n\n  // Add batch completion time tracking\n\n  const [batchTimings, setBatchTimings] = useState({});\n\n  // Track batch start and end times\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && game.status === 'in_progress') {\n      const newTimings = {\n        ...batchTimings\n      };\n      game.players.forEach(player => {\n        if (!newTimings[player.id]) {\n          newTimings[player.id] = {};\n        }\n\n        // Track start time when player gets new batch\n        if (player.current_tasks.length > 0) {\n          var _newTimings$player$id;\n          const batchNumber = player.current_batch;\n          if (!((_newTimings$player$id = newTimings[player.id][batchNumber]) !== null && _newTimings$player$id !== void 0 && _newTimings$player$id.startTime)) {\n            newTimings[player.id][batchNumber] = {\n              startTime: Date.now()\n            };\n          }\n        }\n\n        // Track end time when player completes a batch\n        const completedBatches = new Set(player.completed_tasks.map(t => t.batch_number));\n        completedBatches.forEach(batchNumber => {\n          if (newTimings[player.id][batchNumber] && !newTimings[player.id][batchNumber].endTime) {\n            newTimings[player.id][batchNumber].endTime = Date.now();\n          }\n        });\n      });\n      setBatchTimings(newTimings);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.status]);\n\n  // Function to get batch completion time for a player\n  const getBatchTime = (playerId, batchNumber) => {\n    var _batchTimings$playerI;\n    const timing = (_batchTimings$playerI = batchTimings[playerId]) === null || _batchTimings$playerI === void 0 ? void 0 : _batchTimings$playerI[batchNumber];\n    if (!timing) return '-';\n    const endTime = timing.endTime || Date.now();\n    const duration = endTime - timing.startTime;\n    return formatTime(duration);\n  };\n\n  // Function to get total batch time\n  const getBatchTotalTime = batchNumber => {\n    const batchTimings = (game === null || game === void 0 ? void 0 : game.players.map(player => {\n      var _batchTimings$player$;\n      const timing = (_batchTimings$player$ = batchTimings[player.id]) === null || _batchTimings$player$ === void 0 ? void 0 : _batchTimings$player$[batchNumber];\n      if (!timing) return 0;\n      const endTime = timing.endTime || Date.now();\n      return endTime - timing.startTime;\n    })) || [];\n    const totalTime = batchTimings.reduce((sum, time) => sum + time, 0);\n    return formatTime(totalTime);\n  };\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, updatedGame => {\n        console.log('Game state updated:', updatedGame);\n        setGame(updatedGame);\n      });\n      service.connect();\n      setWsService(service);\n\n      // Cleanup function\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  useEffect(() => {\n    let timerInterval = null;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && startTime) {\n      timerInterval = setInterval(() => {\n        setCurrentTime(Date.now() - startTime);\n      }, 1000);\n    }\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'completed' && startTime && !endTime) {\n      setEndTime(Date.now());\n      setShowResultPage(true);\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime, endTime]);\n  const handleCreateGame = async () => {\n    if (!playerName) {\n      setError('Please enter your name first');\n      return;\n    }\n    try {\n      const newGameId = await gameService.createGame(playerCount, maxBatches, coinsPerBatch);\n      setGameId(newGameId);\n\n      // Automatically join the game as the creator\n      const newPlayerId = await gameService.joinGame(newGameId, playerName);\n      setPlayerId(newPlayerId);\n\n      // Get initial game state\n      const gameState = await gameService.getGameState(newGameId);\n      setGame(gameState);\n\n      // Reset all input fields\n      setPlayerName('');\n      setPlayerCount(2);\n      setMaxBatches(3);\n      setCoinsPerBatch(2);\n      setJoinGameId('');\n      setError(null);\n    } catch (error) {\n      setError('Failed to create game. Please try again.');\n      console.error('Error creating game:', error);\n    }\n  };\n  const handleJoinGame = async () => {\n    if (!playerName) {\n      setError('Please enter player name');\n      return;\n    }\n    const targetGameId = gameId || joinGameId;\n    if (!targetGameId) {\n      setError('Please enter game ID');\n      return;\n    }\n    try {\n      const exists = await gameService.checkGameExists(targetGameId);\n      if (!exists) {\n        setError('Game not found');\n        return;\n      }\n      const newPlayerId = await gameService.joinGame(targetGameId, playerName);\n      setPlayerId(newPlayerId);\n      setGameId(targetGameId);\n      setShowJoinDialog(false);\n      const gameState = await gameService.getGameState(targetGameId);\n      setGame(gameState);\n\n      // Reset all input fields\n      setPlayerName('');\n      setPlayerCount(2);\n      setMaxBatches(3);\n      setCoinsPerBatch(2);\n      setJoinGameId('');\n      setError(null);\n    } catch (error) {\n      setError('Failed to join game. Please try again.');\n      console.error('Error joining game:', error);\n    }\n  };\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      setError(null);\n    } catch (error) {\n      setError('Failed to start game. Please try again.');\n      console.error('Error starting game:', error);\n    }\n  };\n  const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n  const [flippingStates, setFlippingStates] = useState({});\n  const renderCoin = (type, isFlipping, isSmall = false, onClick, taskId) => {\n    const flipState = taskId ? flippingStates[taskId] : undefined;\n    const displayType = flipState !== null && flipState !== void 0 && flipState.showOpposite ? type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS : type;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: isSmall ? 20 : 32,\n        height: isSmall ? 20 : 32,\n        borderRadius: '50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n        border: `${isSmall ? 1 : 2}px solid #B8860B`,\n        color: '#704214',\n        fontWeight: 'bold',\n        fontSize: isSmall ? '0.6rem' : '0.8rem',\n        animation: isFlipping ? `${flipAnimation} 0.6s ease-in-out` : 'none',\n        perspective: 1000,\n        mb: isSmall ? 0 : 1,\n        position: 'relative',\n        cursor: onClick ? 'pointer' : 'default',\n        transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n        '&:hover': onClick ? {\n          transform: 'scale(1.05)',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n        } : {},\n        '&:active': onClick ? {\n          transform: 'scale(0.95)'\n        } : {},\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          borderRadius: '50%',\n          background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n          pointerEvents: 'none'\n        }\n      },\n      onClick: onClick,\n      children: displayType === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteTask = taskId => {\n    if (wsService) {\n      // 开始翻转动画\n      setFlippingStates(prev => ({\n        ...prev,\n        [taskId]: {\n          isFlipping: true,\n          showOpposite: false\n        }\n      }));\n\n      // 在动画中途改变显示的面\n      setTimeout(() => {\n        setFlippingStates(prev => ({\n          ...prev,\n          [taskId]: {\n            isFlipping: true,\n            showOpposite: true\n          }\n        }));\n      }, 300);\n\n      // 动画结束后发送完成信息\n      setTimeout(() => {\n        wsService.completeTask(taskId);\n        setFlippingStates(prev => {\n          const newState = {\n            ...prev\n          };\n          delete newState[taskId];\n          return newState;\n        });\n      }, 600);\n    }\n  };\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n  const renderTaskRow = (tasks, playerName) => {\n    // 将任务分组为每行最多5个\n    const rows = [];\n    for (let i = 0; i < tasks.length; i += 5) {\n      rows.push(tasks.slice(i, i + 5));\n    }\n    return rows.map((rowTasks, rowIndex) => /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        gap: 1,\n        mb: 1,\n        flexWrap: 'nowrap',\n        justifyContent: 'flex-start'\n      },\n      children: rowTasks.map(task => {\n        var _flippingStates$task$, _flippingStates$task$2;\n        return /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            width: 100,\n            minWidth: 100,\n            backgroundColor: 'background.paper',\n            position: 'relative',\n            overflow: 'visible'\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            sx: {\n              p: '8px !important',\n              pb: '8px !important',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center'\n            },\n            children: [renderCoin(task.type, ((_flippingStates$task$ = flippingStates[task.id]) === null || _flippingStates$task$ === void 0 ? void 0 : _flippingStates$task$.isFlipping) || false, false, task.status === TaskStatus.PENDING && task.assigned_to === playerId && !((_flippingStates$task$2 = flippingStates[task.id]) !== null && _flippingStates$task$2 !== void 0 && _flippingStates$task$2.isFlipping) ? () => handleCompleteTask(task.id) : undefined, task.id), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: '100%',\n                mt: 0.5\n              },\n              children: /*#__PURE__*/_jsxDEV(Chip, {\n                label: task.status,\n                size: \"small\",\n                sx: {\n                  backgroundColor: getTaskStatusColor(task.status),\n                  color: 'white',\n                  fontWeight: 500,\n                  width: '100%',\n                  height: '20px',\n                  '& .MuiChip-label': {\n                    fontSize: '0.65rem',\n                    padding: '0 4px'\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 25\n          }, this)\n        }, `${task.id}-${playerName}-${task.batch_number}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 21\n        }, this);\n      })\n    }, `row-${rowIndex}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 13\n    }, this));\n  };\n  const renderPlayer = player => {\n    var _player$completed_tas;\n    const currentBatchTarget = player.current_tasks.length > 0 ? player.current_tasks[0].type : (_player$completed_tas = player.completed_tasks.find(t => t.batch_number === player.current_batch)) === null || _player$completed_tas === void 0 ? void 0 : _player$completed_tas.type;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        height: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        sx: {\n          p: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              color: 'primary.main',\n              fontSize: '1.1rem'\n            },\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: player.status,\n            size: \"small\",\n            color: getPlayerStatusColor(player.status),\n            sx: {\n              fontWeight: 500,\n              height: '24px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: 1,\n                mb: 1,\n                backgroundColor: 'rgba(33, 150, 243, 0.1)',\n                p: 1,\n                borderRadius: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  fontWeight: 500\n                },\n                children: [\"Current Batch: \", player.current_batch, \" / \", game === null || game === void 0 ? void 0 : game.max_batches]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 33\n              }, this), currentBatchTarget && /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: 0.5\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  sx: {\n                    fontWeight: 500\n                  },\n                  children: \"Target:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 481,\n                  columnNumber: 41\n                }, this), renderCoin(currentBatchTarget, false, true)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"textSecondary\",\n              children: \"Current Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                fontSize: '1.1rem'\n              },\n              children: player.current_tasks.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"textSecondary\",\n              children: \"Completed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                fontSize: '1.1rem'\n              },\n              children: player.completed_tasks.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              color: 'primary.main',\n              fontWeight: 500,\n              mb: 1\n            },\n            children: \"Current Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 25\n          }, this), renderTaskRow(player.current_tasks, player.name)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 21\n        }, this), player.completed_tasks.length > 0 && game && player.order === game.players.length - 1 && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              color: 'primary.main',\n              fontWeight: 500,\n              mb: 1\n            },\n            children: \"Completed Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 29\n          }, this), renderTaskRow(player.completed_tasks, player.name)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 13\n    }, this);\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n  const formatTime = milliseconds => {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed! \\uD83C\\uDF89\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTime(totalTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteGame = () => {\n    setShowResultPage(true);\n  };\n  const handleReturnToMain = () => {\n    window.location.reload();\n  };\n  const renderResultPage = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 600,\n          width: '100%',\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            mb: 3,\n            color: 'primary.main'\n          },\n          children: \"Game Complete! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            mb: 4\n          },\n          children: [\"Total Time: \", formatTime(totalTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMain,\n          size: \"large\",\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 13\n    }, this);\n  };\n  if (showResultPage) {\n    return renderResultPage();\n  }\n  if (!gameId || !playerId) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          mb: 4,\n          mt: 4,\n          background: 'linear-gradient(45deg, #2196f3 30%, #21CBF3 90%)',\n          p: 3,\n          borderRadius: 2,\n          boxShadow: '0 3px 5px 2px rgba(33, 150, 243, .3)',\n          color: 'white',\n          width: '100%',\n          maxWidth: 800\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: \"Online Multiplayer Coin Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          children: \"Flip coins with your friends in this multiplayer game!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: '100%',\n          maxWidth: 800,\n          backgroundColor: 'white',\n          borderRadius: 2,\n          boxShadow: '0 3px 10px rgba(0,0,0,0.1)',\n          p: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tabs, {\n          value: activeTab,\n          onChange: handleTabChange,\n          sx: {\n            mb: 3,\n            borderBottom: 1,\n            borderColor: 'divider'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 21\n        }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          sx: {\n            mb: 2\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 25\n        }, this), activeTab === 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Your Name\",\n              value: playerName,\n              onChange: e => setPlayerName(e.target.value),\n              required: true,\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 699,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Number of Players\",\n              type: \"number\",\n              value: playerCount,\n              onChange: e => setPlayerCount(Number(e.target.value)),\n              inputProps: {\n                min: 2,\n                max: 5\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 710,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 709,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Number of Batches\",\n              type: \"number\",\n              value: maxBatches,\n              onChange: e => setMaxBatches(Number(e.target.value)),\n              inputProps: {\n                min: 1,\n                max: 10\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 722,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 721,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Coins per Batch\",\n              type: \"number\",\n              value: coinsPerBatch,\n              onChange: e => setCoinsPerBatch(Number(e.target.value)),\n              inputProps: {\n                min: 1,\n                max: 10\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 734,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleCreateGame,\n              disabled: !playerName,\n              sx: {\n                mt: 2\n              },\n              size: \"large\",\n              children: \"Create Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 746,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 745,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Game ID\",\n              value: joinGameId,\n              onChange: e => setJoinGameId(e.target.value.toUpperCase()),\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 760,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 759,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Player Name\",\n              value: playerName,\n              onChange: e => setPlayerName(e.target.value),\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 770,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 769,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleJoinGame,\n              sx: {\n                mt: 2\n              },\n              size: \"large\",\n              children: \"Join Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 780,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 779,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3,\n      backgroundColor: 'background.default',\n      minHeight: '100vh'\n    },\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 799,\n      columnNumber: 17\n    }, this), game && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 1,\n              color: 'primary.main'\n            },\n            children: [\"Game ID: \", game.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              color: 'text.primary'\n            },\n            children: [\"Game Status: \", game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 816,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 25\n        }, this), (game.status === 'in_progress' || game.status === 'completed') && startTime && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'text.secondary'\n          },\n          children: [\"Time: \", formatTime(game.status === 'completed' && endTime ? endTime - startTime : currentTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 821,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 806,\n        columnNumber: 21\n      }, this), game.status === 'waiting' && playerId === ((_game$players$ = game.players[0]) === null || _game$players$ === void 0 ? void 0 : _game$players$.id) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartGame,\n        sx: {\n          mb: 3\n        },\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 828,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 3,\n            children: game.players.map(renderPlayer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 840,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 839,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              height: '100%',\n              borderRadius: 2,\n              boxShadow: '0 4px 6px rgba(0,0,0,0.1)'\n            },\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                sx: {\n                  mb: 3,\n                  color: 'primary.main',\n                  fontWeight: 'bold',\n                  fontSize: '1.5rem'\n                },\n                children: \"Game Statistics\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 849,\n                columnNumber: 37\n              }, this), Array.from({\n                length: game.max_batches\n              }, (_, i) => i + 1).map(renderBatchStatistics)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 848,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 847,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 837,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 797,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"WuLbqPiEfp09f+IG9xPTJupXAX0=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","keyframes","Stack","TaskStatus","PlayerStatus","TaskType","gameService","WebSocketService","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","gameId","initialGameId","_s","_game$players$","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","currentTime","setCurrentTime","showResultPage","setShowResultPage","batchTimings","setBatchTimings","tasks","status","newTimings","players","forEach","player","id","current_tasks","length","_newTimings$player$id","batchNumber","current_batch","Date","now","completedBatches","Set","completed_tasks","map","t","batch_number","getBatchTime","_batchTimings$playerI","timing","duration","formatTime","getBatchTotalTime","_batchTimings$player$","totalTime","reduce","sum","time","service","updatedGame","console","log","connect","disconnect","timerInterval","setInterval","clearInterval","handleCreateGame","newGameId","createGame","newPlayerId","joinGame","gameState","getGameState","handleJoinGame","targetGameId","exists","checkGameExists","handleStartGame","startGame","flipAnimation","flippingStates","setFlippingStates","renderCoin","type","isFlipping","isSmall","onClick","taskId","flipState","undefined","displayType","showOpposite","HEADS","TAILS","sx","width","height","borderRadius","display","alignItems","justifyContent","backgroundColor","border","color","fontWeight","fontSize","animation","perspective","mb","position","cursor","transition","transform","boxShadow","content","top","left","right","bottom","background","pointerEvents","children","fileName","_jsxFileName","lineNumber","columnNumber","handleCompleteTask","prev","setTimeout","completeTask","newState","getPlayerStatusColor","ACTIVE","WAITING","IDLE","getTaskStatusColor","COMPLETED","IN_PROGRESS","PENDING","renderTaskRow","rows","i","push","slice","rowTasks","rowIndex","gap","flexWrap","task","_flippingStates$task$","_flippingStates$task$2","minWidth","overflow","p","pb","flexDirection","assigned_to","mt","label","size","padding","renderPlayer","_player$completed_tas","currentBatchTarget","find","variant","name","container","spacing","item","xs","max_batches","order","handleTabChange","_","newValue","handleGameComplete","milliseconds","seconds","Math","floor","minutes","remainingSeconds","toString","padStart","renderCompletionDialog","open","onClose","PaperProps","textAlign","py","window","location","reload","handleCompleteGame","handleReturnToMain","renderResultPage","minHeight","maxWidth","value","onChange","borderBottom","borderColor","severity","fullWidth","e","target","required","autoComplete","md","Number","inputProps","min","max","disabled","toUpperCase","Array","from","renderBatchStatistics","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes,\n    Stack,\n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableRow,\n    TableCell,\n    Paper\n} from '@mui/material';\nimport { Game as GameType, Player, Task, TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\n\ninterface GameProps {\n    gameId?: string;\n}\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | undefined>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n\n    // Add batch completion time tracking\n    interface BatchTiming {\n        [playerId: string]: {\n            [batchNumber: number]: {\n                startTime: number;\n                endTime?: number;\n            }\n        }\n    }\n\n    const [batchTimings, setBatchTimings] = useState<BatchTiming>({});\n\n    // Track batch start and end times\n    useEffect(() => {\n        if (game?.tasks && game.status === 'in_progress') {\n            const newTimings = { ...batchTimings };\n\n            game.players.forEach(player => {\n                if (!newTimings[player.id]) {\n                    newTimings[player.id] = {};\n                }\n\n                // Track start time when player gets new batch\n                if (player.current_tasks.length > 0) {\n                    const batchNumber = player.current_batch;\n                    if (!newTimings[player.id][batchNumber]?.startTime) {\n                        newTimings[player.id][batchNumber] = {\n                            startTime: Date.now()\n                        };\n                    }\n                }\n\n                // Track end time when player completes a batch\n                const completedBatches = new Set(player.completed_tasks.map(t => t.batch_number));\n                completedBatches.forEach(batchNumber => {\n                    if (newTimings[player.id][batchNumber] && !newTimings[player.id][batchNumber].endTime) {\n                        newTimings[player.id][batchNumber].endTime = Date.now();\n                    }\n                });\n            });\n\n            setBatchTimings(newTimings);\n        }\n    }, [game?.tasks, game?.status]);\n\n    // Function to get batch completion time for a player\n    const getBatchTime = (playerId: string, batchNumber: number): string => {\n        const timing = batchTimings[playerId]?.[batchNumber];\n        if (!timing) return '-';\n        \n        const endTime = timing.endTime || Date.now();\n        const duration = endTime - timing.startTime;\n        return formatTime(duration);\n    };\n\n    // Function to get total batch time\n    const getBatchTotalTime = (batchNumber: number): string => {\n        const batchTimings = game?.players.map(player => {\n            const timing = batchTimings[player.id]?.[batchNumber];\n            if (!timing) return 0;\n            const endTime = timing.endTime || Date.now();\n            return endTime - timing.startTime;\n        }) || [];\n\n        const totalTime = batchTimings.reduce((sum, time) => sum + time, 0);\n        return formatTime(totalTime);\n    };\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, (updatedGame) => {\n                console.log('Game state updated:', updatedGame);\n                setGame(updatedGame);\n            });\n            service.connect();\n            setWsService(service);\n\n            // Cleanup function\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && startTime) {\n            timerInterval = setInterval(() => {\n                setCurrentTime(Date.now() - startTime);\n            }, 1000);\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, startTime, endTime]);\n\n    const handleCreateGame = async () => {\n        if (!playerName) {\n            setError('Please enter your name first');\n            return;\n        }\n\n        try {\n            const newGameId = await gameService.createGame(playerCount, maxBatches, coinsPerBatch);\n            setGameId(newGameId);\n            \n            // Automatically join the game as the creator\n            const newPlayerId = await gameService.joinGame(newGameId, playerName);\n            setPlayerId(newPlayerId);\n            \n            // Get initial game state\n            const gameState = await gameService.getGameState(newGameId);\n            setGame(gameState);\n            \n            // Reset all input fields\n            setPlayerName('');\n            setPlayerCount(2);\n            setMaxBatches(3);\n            setCoinsPerBatch(2);\n            setJoinGameId('');\n            setError(null);\n        } catch (error) {\n            setError('Failed to create game. Please try again.');\n            console.error('Error creating game:', error);\n        }\n    };\n\n    const handleJoinGame = async () => {\n        if (!playerName) {\n            setError('Please enter player name');\n            return;\n        }\n\n        const targetGameId = gameId || joinGameId;\n        if (!targetGameId) {\n            setError('Please enter game ID');\n            return;\n        }\n\n        try {\n            const exists = await gameService.checkGameExists(targetGameId);\n            if (!exists) {\n                setError('Game not found');\n                return;\n            }\n\n            const newPlayerId = await gameService.joinGame(targetGameId, playerName);\n            setPlayerId(newPlayerId);\n            setGameId(targetGameId);\n            setShowJoinDialog(false);\n            const gameState = await gameService.getGameState(targetGameId);\n            setGame(gameState);\n            \n            // Reset all input fields\n            setPlayerName('');\n            setPlayerCount(2);\n            setMaxBatches(3);\n            setCoinsPerBatch(2);\n            setJoinGameId('');\n            setError(null);\n        } catch (error) {\n            setError('Failed to join game. Please try again.');\n            console.error('Error joining game:', error);\n        }\n    };\n\n    const handleStartGame = async () => {\n        if (!gameId) return;\n\n        try {\n            await gameService.startGame(gameId);\n            setError(null);\n        } catch (error) {\n            setError('Failed to start game. Please try again.');\n            console.error('Error starting game:', error);\n        }\n    };\n\n    const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n    const [flippingStates, setFlippingStates] = useState<{[key: string]: { isFlipping: boolean; showOpposite: boolean }}>({});\n\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void, taskId?: string) => {\n        const flipState = taskId ? flippingStates[taskId] : undefined;\n        const displayType = (flipState?.showOpposite ? (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) : type);\n        \n        return (\n            <Box\n                sx={{\n                    width: isSmall ? 20 : 32,\n                    height: isSmall ? 20 : 32,\n                    borderRadius: '50%',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                    border: `${isSmall ? 1 : 2}px solid #B8860B`,\n                    color: '#704214',\n                    fontWeight: 'bold',\n                    fontSize: isSmall ? '0.6rem' : '0.8rem',\n                    animation: isFlipping ? `${flipAnimation} 0.6s ease-in-out` : 'none',\n                    perspective: 1000,\n                    mb: isSmall ? 0 : 1,\n                    position: 'relative',\n                    cursor: onClick ? 'pointer' : 'default',\n                    transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n                    '&:hover': onClick ? {\n                        transform: 'scale(1.05)',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                    } : {},\n                    '&:active': onClick ? {\n                        transform: 'scale(0.95)'\n                    } : {},\n                    '&::after': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        borderRadius: '50%',\n                        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                        pointerEvents: 'none'\n                    }\n                }}\n                onClick={onClick}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    const handleCompleteTask = (taskId: string) => {\n        if (wsService) {\n            // 开始翻转动画\n            setFlippingStates(prev => ({\n                ...prev,\n                [taskId]: { isFlipping: true, showOpposite: false }\n            }));\n\n            // 在动画中途改变显示的面\n            setTimeout(() => {\n                setFlippingStates(prev => ({\n                    ...prev,\n                    [taskId]: { isFlipping: true, showOpposite: true }\n                }));\n            }, 300);\n\n            // 动画结束后发送完成信息\n            setTimeout(() => {\n                wsService.completeTask(taskId);\n                setFlippingStates(prev => {\n                    const newState = { ...prev };\n                    delete newState[taskId];\n                    return newState;\n                });\n            }, 600);\n        }\n    };\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    const renderTaskRow = (tasks: Task[], playerName: string) => {\n        // 将任务分组为每行最多5个\n        const rows: Task[][] = [];\n        for (let i = 0; i < tasks.length; i += 5) {\n            rows.push(tasks.slice(i, i + 5));\n        }\n\n        return rows.map((rowTasks, rowIndex) => (\n            <Box \n                key={`row-${rowIndex}`} \n                sx={{ \n                    display: 'flex', \n                    gap: 1,\n                    mb: 1,\n                    flexWrap: 'nowrap',\n                    justifyContent: 'flex-start'\n                }}\n            >\n                {rowTasks.map(task => (\n                    <Card \n                        key={`${task.id}-${playerName}-${task.batch_number}`} \n                        sx={{ \n                            width: 100,\n                            minWidth: 100,\n                            backgroundColor: 'background.paper',\n                            position: 'relative',\n                            overflow: 'visible'\n                        }}\n                    >\n                        <CardContent sx={{ \n                            p: '8px !important',\n                            pb: '8px !important',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                        }}>\n                            {renderCoin(\n                                task.type, \n                                flippingStates[task.id]?.isFlipping || false,\n                                false,\n                                task.status === TaskStatus.PENDING && task.assigned_to === playerId && !flippingStates[task.id]?.isFlipping\n                                    ? () => handleCompleteTask(task.id)\n                                    : undefined,\n                                task.id\n                            )}\n                            <Box sx={{ width: '100%', mt: 0.5 }}>\n                                <Chip\n                                    label={task.status}\n                                    size=\"small\"\n                                    sx={{\n                                        backgroundColor: getTaskStatusColor(task.status),\n                                        color: 'white',\n                                        fontWeight: 500,\n                                        width: '100%',\n                                        height: '20px',\n                                        '& .MuiChip-label': {\n                                            fontSize: '0.65rem',\n                                            padding: '0 4px'\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        </CardContent>\n                    </Card>\n                ))}\n            </Box>\n        ));\n    };\n\n    const renderPlayer = (player: Player) => {\n        const currentBatchTarget = player.current_tasks.length > 0 \n            ? player.current_tasks[0].type \n            : player.completed_tasks.find(t => t.batch_number === player.current_batch)?.type;\n\n        return (\n            <Card sx={{ height: '100%' }}>\n                <CardContent sx={{ p: 2 }}>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n                        <Typography variant=\"h6\" sx={{ \n                            color: 'primary.main',\n                            fontSize: '1.1rem'\n                        }}>{player.name}</Typography>\n                        <Chip\n                            label={player.status}\n                            size=\"small\"\n                            color={getPlayerStatusColor(player.status)}\n                            sx={{ \n                                fontWeight: 500,\n                                height: '24px'\n                            }}\n                        />\n                    </Box>\n                    <Grid container spacing={1} sx={{ mb: 2 }}>\n                        <Grid item xs={12}>\n                            <Box sx={{ \n                                display: 'flex', \n                                alignItems: 'center', \n                                gap: 1,\n                                mb: 1,\n                                backgroundColor: 'rgba(33, 150, 243, 0.1)',\n                                p: 1,\n                                borderRadius: 1\n                            }}>\n                                <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\n                                    Current Batch: {player.current_batch} / {game?.max_batches}\n                                </Typography>\n                                {currentBatchTarget && (\n                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                                        <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\n                                            Target:\n                                        </Typography>\n                                        {renderCoin(currentBatchTarget, false, true)}\n                                    </Box>\n                                )}\n                            </Box>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Typography variant=\"body2\" color=\"textSecondary\">Current Tasks</Typography>\n                            <Typography variant=\"h6\" sx={{ fontSize: '1.1rem' }}>{player.current_tasks.length}</Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Typography variant=\"body2\" color=\"textSecondary\">Completed</Typography>\n                            <Typography variant=\"h6\" sx={{ fontSize: '1.1rem' }}>{player.completed_tasks.length}</Typography>\n                        </Grid>\n                    </Grid>\n                    <Box sx={{ mt: 2 }}>\n                        <Typography variant=\"subtitle2\" sx={{ color: 'primary.main', fontWeight: 500, mb: 1 }}>\n                            Current Tasks\n                        </Typography>\n                        {renderTaskRow(player.current_tasks, player.name)}\n                    </Box>\n                    {player.completed_tasks.length > 0 && game && player.order === game.players.length - 1 && (\n                        <Box sx={{ mt: 2 }}>\n                            <Typography variant=\"subtitle2\" sx={{ color: 'primary.main', fontWeight: 500, mb: 1 }}>\n                                Completed Tasks\n                            </Typography>\n                            {renderTaskRow(player.completed_tasks, player.name)}\n                        </Box>\n                    )}\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    const formatTime = (milliseconds: number) => {\n        const seconds = Math.floor(milliseconds / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed! 🎉\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTime(totalTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    const handleReturnToMain = () => {\n        window.location.reload();\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTime(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMain}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    if (showResultPage) {\n        return renderResultPage();\n    }\n\n    if (!gameId || !playerId) {\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n            }}>\n                <Box sx={{ \n                    textAlign: 'center', \n                    mb: 4,\n                    mt: 4,\n                    background: 'linear-gradient(45deg, #2196f3 30%, #21CBF3 90%)',\n                    p: 3,\n                    borderRadius: 2,\n                    boxShadow: '0 3px 5px 2px rgba(33, 150, 243, .3)',\n                    color: 'white',\n                    width: '100%',\n                    maxWidth: 800\n                }}>\n                    <Typography variant=\"h3\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                        Online Multiplayer Coin Game\n                    </Typography>\n                    <Typography variant=\"subtitle1\">\n                        Flip coins with your friends in this multiplayer game!\n                    </Typography>\n                </Box>\n\n                <Box sx={{ \n                    width: '100%', \n                    maxWidth: 800,\n                    backgroundColor: 'white',\n                    borderRadius: 2,\n                    boxShadow: '0 3px 10px rgba(0,0,0,0.1)',\n                    p: 3\n                }}>\n                    <Tabs \n                        value={activeTab} \n                        onChange={handleTabChange} \n                        sx={{ \n                            mb: 3,\n                            borderBottom: 1,\n                            borderColor: 'divider'\n                        }}\n                    >\n                        <Tab label=\"Create Game\" />\n                        <Tab label=\"Join Game\" />\n                    </Tabs>\n\n                    {error && (\n                        <Alert severity=\"error\" sx={{ mb: 2 }}>\n                            {error}\n                        </Alert>\n                    )}\n\n                    {activeTab === 0 ? (\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Your Name\"\n                                    value={playerName}\n                                    onChange={(e) => setPlayerName(e.target.value)}\n                                    required\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Number of Players\"\n                                    type=\"number\"\n                                    value={playerCount}\n                                    onChange={(e) => setPlayerCount(Number(e.target.value))}\n                                    inputProps={{ min: 2, max: 5 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Number of Batches\"\n                                    type=\"number\"\n                                    value={maxBatches}\n                                    onChange={(e) => setMaxBatches(Number(e.target.value))}\n                                    inputProps={{ min: 1, max: 10 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Coins per Batch\"\n                                    type=\"number\"\n                                    value={coinsPerBatch}\n                                    onChange={(e) => setCoinsPerBatch(Number(e.target.value))}\n                                    inputProps={{ min: 1, max: 10 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button \n                                    variant=\"contained\" \n                                    onClick={handleCreateGame}\n                                    disabled={!playerName}\n                                    sx={{ mt: 2 }}\n                                    size=\"large\"\n                                >\n                                    Create Game\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    ) : (\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Game ID\"\n                                    value={joinGameId}\n                                    onChange={(e) => setJoinGameId(e.target.value.toUpperCase())}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Player Name\"\n                                    value={playerName}\n                                    onChange={(e) => setPlayerName(e.target.value)}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button \n                                    variant=\"contained\" \n                                    onClick={handleJoinGame}\n                                    sx={{ mt: 2 }}\n                                    size=\"large\"\n                                >\n                                    Join Game\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Box>\n            </Box>\n        );\n    }\n\n    return (\n        <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n            {error && (\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\n                    {error}\n                </Alert>\n            )}\n\n            {game && (\n                <>\n                    <Box sx={{ \n                        display: 'flex', \n                        justifyContent: 'space-between', \n                        alignItems: 'center',\n                        mb: 3\n                    }}>\n                        <Box>\n                            <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                                Game ID: {game.id}\n                            </Typography>\n                            <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                                Game Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                            </Typography>\n                        </Box>\n                        {(game.status === 'in_progress' || game.status === 'completed') && startTime && (\n                            <Typography variant=\"h6\" sx={{ color: 'text.secondary' }}>\n                                Time: {formatTime(game.status === 'completed' && endTime ? endTime - startTime : currentTime)}\n                            </Typography>\n                        )}\n                    </Box>\n\n                    {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleStartGame}\n                            sx={{ mb: 3 }}\n                        >\n                            Start Game\n                        </Button>\n                    )}\n\n                    <Grid container spacing={3}>\n                        {/* Left column: Player cards */}\n                        <Grid item xs={12} md={7}>\n                            <Stack spacing={3}>\n                                {game.players.map(renderPlayer)}\n                            </Stack>\n                        </Grid>\n\n                        {/* Right column: Statistics */}\n                        <Grid item xs={12} md={5}>\n                            <Card sx={{ height: '100%', borderRadius: 2, boxShadow: '0 4px 6px rgba(0,0,0,0.1)' }}>\n                                <CardContent>\n                                    <Typography variant=\"h6\" sx={{ \n                                        mb: 3, \n                                        color: 'primary.main',\n                                        fontWeight: 'bold',\n                                        fontSize: '1.5rem'\n                                    }}>\n                                        Game Statistics\n                                    </Typography>\n                                    \n                                    {Array.from({ length: game.max_batches }, (_, i) => i + 1).map(renderBatchStatistics)}\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    </Grid>\n                </>\n            )}\n        </Box>\n    );\n}; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACIC,GAAG,EACHC,MAAM,EACNC,IAAI,EACJC,WAAW,EACXC,UAAU,EACVC,IAAI,EACJC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,IAAI,EACJC,GAAG,EACHC,KAAK,EACLC,IAAI,EACJC,SAAS,EACTC,KAAK,QAQF,eAAe;AACtB,SAAyCC,UAAU,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,UAAU;AAC7F,SAASC,WAAW,EAAEC,gBAAgB,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAMxE,OAAO,MAAMC,IAAyB,GAAGA,CAAC;EAAEC,MAAM,EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,cAAA;EACpE,MAAM,CAACH,MAAM,EAAEI,SAAS,CAAC,GAAGjC,QAAQ,CAAqB8B,aAAa,CAAC;EACvE,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGnC,QAAQ,CAAkB,IAAI,CAAC;EACvD,MAAM,CAACoC,UAAU,EAAEC,aAAa,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACsC,QAAQ,EAAEC,WAAW,CAAC,GAAGvC,QAAQ,CAAgB,IAAI,CAAC;EAC7D,MAAM,CAACwC,SAAS,EAAEC,YAAY,CAAC,GAAGzC,QAAQ,CAA0B,IAAI,CAAC;EACzE,MAAM,CAAC0C,cAAc,EAAEC,iBAAiB,CAAC,GAAG3C,QAAQ,CAAC,CAAC8B,aAAa,CAAC;EACpE,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAG7C,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAAC8C,UAAU,EAAEC,aAAa,CAAC,GAAG/C,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACgD,aAAa,EAAEC,gBAAgB,CAAC,GAAGjD,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACkD,UAAU,EAAEC,aAAa,CAAC,GAAGnD,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACoD,KAAK,EAAEC,QAAQ,CAAC,GAAGrD,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACsD,SAAS,EAAEC,YAAY,CAAC,GAAGvD,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACwD,SAAS,EAAEC,YAAY,CAAC,GAAGzD,QAAQ,CAAgB,IAAI,CAAC;EAC/D,MAAM,CAAC0D,OAAO,EAAEC,UAAU,CAAC,GAAG3D,QAAQ,CAAgB,IAAI,CAAC;EAC3D,MAAM,CAAC4D,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG7D,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAAC8D,WAAW,EAAEC,cAAc,CAAC,GAAG/D,QAAQ,CAAS,CAAC,CAAC;EACzD,MAAM,CAACgE,cAAc,EAAEC,iBAAiB,CAAC,GAAGjE,QAAQ,CAAC,KAAK,CAAC;;EAE3D;;EAUA,MAAM,CAACkE,YAAY,EAAEC,eAAe,CAAC,GAAGnE,QAAQ,CAAc,CAAC,CAAC,CAAC;;EAEjE;EACAC,SAAS,CAAC,MAAM;IACZ,IAAIiC,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEkC,KAAK,IAAIlC,IAAI,CAACmC,MAAM,KAAK,aAAa,EAAE;MAC9C,MAAMC,UAAU,GAAG;QAAE,GAAGJ;MAAa,CAAC;MAEtChC,IAAI,CAACqC,OAAO,CAACC,OAAO,CAACC,MAAM,IAAI;QAC3B,IAAI,CAACH,UAAU,CAACG,MAAM,CAACC,EAAE,CAAC,EAAE;UACxBJ,UAAU,CAACG,MAAM,CAACC,EAAE,CAAC,GAAG,CAAC,CAAC;QAC9B;;QAEA;QACA,IAAID,MAAM,CAACE,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;UAAA,IAAAC,qBAAA;UACjC,MAAMC,WAAW,GAAGL,MAAM,CAACM,aAAa;UACxC,IAAI,GAAAF,qBAAA,GAACP,UAAU,CAACG,MAAM,CAACC,EAAE,CAAC,CAACI,WAAW,CAAC,cAAAD,qBAAA,eAAlCA,qBAAA,CAAoCrB,SAAS,GAAE;YAChDc,UAAU,CAACG,MAAM,CAACC,EAAE,CAAC,CAACI,WAAW,CAAC,GAAG;cACjCtB,SAAS,EAAEwB,IAAI,CAACC,GAAG,CAAC;YACxB,CAAC;UACL;QACJ;;QAEA;QACA,MAAMC,gBAAgB,GAAG,IAAIC,GAAG,CAACV,MAAM,CAACW,eAAe,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,YAAY,CAAC,CAAC;QACjFL,gBAAgB,CAACV,OAAO,CAACM,WAAW,IAAI;UACpC,IAAIR,UAAU,CAACG,MAAM,CAACC,EAAE,CAAC,CAACI,WAAW,CAAC,IAAI,CAACR,UAAU,CAACG,MAAM,CAACC,EAAE,CAAC,CAACI,WAAW,CAAC,CAACpB,OAAO,EAAE;YACnFY,UAAU,CAACG,MAAM,CAACC,EAAE,CAAC,CAACI,WAAW,CAAC,CAACpB,OAAO,GAAGsB,IAAI,CAACC,GAAG,CAAC,CAAC;UAC3D;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;MAEFd,eAAe,CAACG,UAAU,CAAC;IAC/B;EACJ,CAAC,EAAE,CAACpC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEkC,KAAK,EAAElC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmC,MAAM,CAAC,CAAC;;EAE/B;EACA,MAAMmB,YAAY,GAAGA,CAAClD,QAAgB,EAAEwC,WAAmB,KAAa;IAAA,IAAAW,qBAAA;IACpE,MAAMC,MAAM,IAAAD,qBAAA,GAAGvB,YAAY,CAAC5B,QAAQ,CAAC,cAAAmD,qBAAA,uBAAtBA,qBAAA,CAAyBX,WAAW,CAAC;IACpD,IAAI,CAACY,MAAM,EAAE,OAAO,GAAG;IAEvB,MAAMhC,OAAO,GAAGgC,MAAM,CAAChC,OAAO,IAAIsB,IAAI,CAACC,GAAG,CAAC,CAAC;IAC5C,MAAMU,QAAQ,GAAGjC,OAAO,GAAGgC,MAAM,CAAClC,SAAS;IAC3C,OAAOoC,UAAU,CAACD,QAAQ,CAAC;EAC/B,CAAC;;EAED;EACA,MAAME,iBAAiB,GAAIf,WAAmB,IAAa;IACvD,MAAMZ,YAAY,GAAG,CAAAhC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEqC,OAAO,CAACc,GAAG,CAACZ,MAAM,IAAI;MAAA,IAAAqB,qBAAA;MAC7C,MAAMJ,MAAM,IAAAI,qBAAA,GAAG5B,YAAY,CAACO,MAAM,CAACC,EAAE,CAAC,cAAAoB,qBAAA,uBAAvBA,qBAAA,CAA0BhB,WAAW,CAAC;MACrD,IAAI,CAACY,MAAM,EAAE,OAAO,CAAC;MACrB,MAAMhC,OAAO,GAAGgC,MAAM,CAAChC,OAAO,IAAIsB,IAAI,CAACC,GAAG,CAAC,CAAC;MAC5C,OAAOvB,OAAO,GAAGgC,MAAM,CAAClC,SAAS;IACrC,CAAC,CAAC,KAAI,EAAE;IAER,MAAMuC,SAAS,GAAG7B,YAAY,CAAC8B,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,EAAE,CAAC,CAAC;IACnE,OAAON,UAAU,CAACG,SAAS,CAAC;EAChC,CAAC;EAED9F,SAAS,CAAC,MAAM;IACZ,IAAI4B,MAAM,IAAIS,QAAQ,EAAE;MACpB,MAAM6D,OAAO,GAAG,IAAI5E,gBAAgB,CAACM,MAAM,EAAES,QAAQ,EAAG8D,WAAW,IAAK;QACpEC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,WAAW,CAAC;QAC/CjE,OAAO,CAACiE,WAAW,CAAC;MACxB,CAAC,CAAC;MACFD,OAAO,CAACI,OAAO,CAAC,CAAC;MACjB9D,YAAY,CAAC0D,OAAO,CAAC;;MAErB;MACA,OAAO,MAAM;QACTA,OAAO,CAACK,UAAU,CAAC,CAAC;MACxB,CAAC;IACL;EACJ,CAAC,EAAE,CAAC3E,MAAM,EAAES,QAAQ,CAAC,CAAC;EAEtBrC,SAAS,CAAC,MAAM;IACZ,IAAI,CAAAiC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmC,MAAM,MAAK,aAAa,IAAI,CAACb,SAAS,EAAE;MAC9CC,YAAY,CAACuB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;IAC5B;EACJ,CAAC,EAAE,CAAC/C,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmC,MAAM,EAAEb,SAAS,CAAC,CAAC;EAE7BvD,SAAS,CAAC,MAAM;IACZ,IAAIwG,aAAoC,GAAG,IAAI;IAE/C,IAAI,CAAAvE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmC,MAAM,MAAK,aAAa,IAAIb,SAAS,EAAE;MAC7CiD,aAAa,GAAGC,WAAW,CAAC,MAAM;QAC9B3C,cAAc,CAACiB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGzB,SAAS,CAAC;MAC1C,CAAC,EAAE,IAAI,CAAC;IACZ;IAEA,IAAI,CAAAtB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmC,MAAM,MAAK,WAAW,IAAIb,SAAS,IAAI,CAACE,OAAO,EAAE;MACvDC,UAAU,CAACqB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;MACtBhB,iBAAiB,CAAC,IAAI,CAAC;MACvB,IAAIwC,aAAa,EAAE;QACfE,aAAa,CAACF,aAAa,CAAC;MAChC;IACJ;IAEA,OAAO,MAAM;MACT,IAAIA,aAAa,EAAE;QACfE,aAAa,CAACF,aAAa,CAAC;MAChC;IACJ,CAAC;EACL,CAAC,EAAE,CAACvE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmC,MAAM,EAAEb,SAAS,EAAEE,OAAO,CAAC,CAAC;EAEtC,MAAMkD,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACxE,UAAU,EAAE;MACbiB,QAAQ,CAAC,8BAA8B,CAAC;MACxC;IACJ;IAEA,IAAI;MACA,MAAMwD,SAAS,GAAG,MAAMvF,WAAW,CAACwF,UAAU,CAAClE,WAAW,EAAEE,UAAU,EAAEE,aAAa,CAAC;MACtFf,SAAS,CAAC4E,SAAS,CAAC;;MAEpB;MACA,MAAME,WAAW,GAAG,MAAMzF,WAAW,CAAC0F,QAAQ,CAACH,SAAS,EAAEzE,UAAU,CAAC;MACrEG,WAAW,CAACwE,WAAW,CAAC;;MAExB;MACA,MAAME,SAAS,GAAG,MAAM3F,WAAW,CAAC4F,YAAY,CAACL,SAAS,CAAC;MAC3D1E,OAAO,CAAC8E,SAAS,CAAC;;MAElB;MACA5E,aAAa,CAAC,EAAE,CAAC;MACjBQ,cAAc,CAAC,CAAC,CAAC;MACjBE,aAAa,CAAC,CAAC,CAAC;MAChBE,gBAAgB,CAAC,CAAC,CAAC;MACnBE,aAAa,CAAC,EAAE,CAAC;MACjBE,QAAQ,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZC,QAAQ,CAAC,0CAA0C,CAAC;MACpDgD,OAAO,CAACjD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,MAAM+D,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAAC/E,UAAU,EAAE;MACbiB,QAAQ,CAAC,0BAA0B,CAAC;MACpC;IACJ;IAEA,MAAM+D,YAAY,GAAGvF,MAAM,IAAIqB,UAAU;IACzC,IAAI,CAACkE,YAAY,EAAE;MACf/D,QAAQ,CAAC,sBAAsB,CAAC;MAChC;IACJ;IAEA,IAAI;MACA,MAAMgE,MAAM,GAAG,MAAM/F,WAAW,CAACgG,eAAe,CAACF,YAAY,CAAC;MAC9D,IAAI,CAACC,MAAM,EAAE;QACThE,QAAQ,CAAC,gBAAgB,CAAC;QAC1B;MACJ;MAEA,MAAM0D,WAAW,GAAG,MAAMzF,WAAW,CAAC0F,QAAQ,CAACI,YAAY,EAAEhF,UAAU,CAAC;MACxEG,WAAW,CAACwE,WAAW,CAAC;MACxB9E,SAAS,CAACmF,YAAY,CAAC;MACvBzE,iBAAiB,CAAC,KAAK,CAAC;MACxB,MAAMsE,SAAS,GAAG,MAAM3F,WAAW,CAAC4F,YAAY,CAACE,YAAY,CAAC;MAC9DjF,OAAO,CAAC8E,SAAS,CAAC;;MAElB;MACA5E,aAAa,CAAC,EAAE,CAAC;MACjBQ,cAAc,CAAC,CAAC,CAAC;MACjBE,aAAa,CAAC,CAAC,CAAC;MAChBE,gBAAgB,CAAC,CAAC,CAAC;MACnBE,aAAa,CAAC,EAAE,CAAC;MACjBE,QAAQ,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZC,QAAQ,CAAC,wCAAwC,CAAC;MAClDgD,OAAO,CAACjD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC/C;EACJ,CAAC;EAED,MAAMmE,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAAC1F,MAAM,EAAE;IAEb,IAAI;MACA,MAAMP,WAAW,CAACkG,SAAS,CAAC3F,MAAM,CAAC;MACnCwB,QAAQ,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZC,QAAQ,CAAC,yCAAyC,CAAC;MACnDgD,OAAO,CAACjD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,MAAMqE,aAAa,GAAGxG,SAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EAED,MAAM,CAACyG,cAAc,EAAEC,iBAAiB,CAAC,GAAG3H,QAAQ,CAAkE,CAAC,CAAC,CAAC;EAEzH,MAAM4H,UAAU,GAAGA,CAACC,IAAc,EAAEC,UAAmB,EAAEC,OAAgB,GAAG,KAAK,EAAEC,OAAoB,EAAEC,MAAe,KAAK;IACzH,MAAMC,SAAS,GAAGD,MAAM,GAAGP,cAAc,CAACO,MAAM,CAAC,GAAGE,SAAS;IAC7D,MAAMC,WAAW,GAAIF,SAAS,aAATA,SAAS,eAATA,SAAS,CAAEG,YAAY,GAAIR,IAAI,KAAKxG,QAAQ,CAACiH,KAAK,GAAGjH,QAAQ,CAACkH,KAAK,GAAGlH,QAAQ,CAACiH,KAAK,GAAIT,IAAK;IAElH,oBACIpG,OAAA,CAACvB,GAAG;MACAsI,EAAE,EAAE;QACAC,KAAK,EAAEV,OAAO,GAAG,EAAE,GAAG,EAAE;QACxBW,MAAM,EAAEX,OAAO,GAAG,EAAE,GAAG,EAAE;QACzBY,YAAY,EAAE,KAAK;QACnBC,OAAO,EAAE,MAAM;QACfC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBC,eAAe,EAAEX,WAAW,KAAK/G,QAAQ,CAACiH,KAAK,GAAG,SAAS,GAAG,SAAS;QACvEU,MAAM,EAAE,GAAGjB,OAAO,GAAG,CAAC,GAAG,CAAC,kBAAkB;QAC5CkB,KAAK,EAAE,SAAS;QAChBC,UAAU,EAAE,MAAM;QAClBC,QAAQ,EAAEpB,OAAO,GAAG,QAAQ,GAAG,QAAQ;QACvCqB,SAAS,EAAEtB,UAAU,GAAG,GAAGL,aAAa,mBAAmB,GAAG,MAAM;QACpE4B,WAAW,EAAE,IAAI;QACjBC,EAAE,EAAEvB,OAAO,GAAG,CAAC,GAAG,CAAC;QACnBwB,QAAQ,EAAE,UAAU;QACpBC,MAAM,EAAExB,OAAO,GAAG,SAAS,GAAG,SAAS;QACvCyB,UAAU,EAAE,yDAAyD;QACrE,SAAS,EAAEzB,OAAO,GAAG;UACjB0B,SAAS,EAAE,aAAa;UACxBC,SAAS,EAAE;QACf,CAAC,GAAG,CAAC,CAAC;QACN,UAAU,EAAE3B,OAAO,GAAG;UAClB0B,SAAS,EAAE;QACf,CAAC,GAAG,CAAC,CAAC;QACN,UAAU,EAAE;UACRE,OAAO,EAAE,IAAI;UACbL,QAAQ,EAAE,UAAU;UACpBM,GAAG,EAAE,CAAC;UACNC,IAAI,EAAE,CAAC;UACPC,KAAK,EAAE,CAAC;UACRC,MAAM,EAAE,CAAC;UACTrB,YAAY,EAAE,KAAK;UACnBsB,UAAU,EAAE,kGAAkG;UAC9GC,aAAa,EAAE;QACnB;MACJ,CAAE;MACFlC,OAAO,EAAEA,OAAQ;MAAAmC,QAAA,EAEhB/B,WAAW,KAAK/G,QAAQ,CAACiH,KAAK,GAAG,GAAG,GAAG;IAAG;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAEd,CAAC;EAED,MAAMC,kBAAkB,GAAIvC,MAAc,IAAK;IAC3C,IAAIzF,SAAS,EAAE;MACX;MACAmF,iBAAiB,CAAC8C,IAAI,KAAK;QACvB,GAAGA,IAAI;QACP,CAACxC,MAAM,GAAG;UAAEH,UAAU,EAAE,IAAI;UAAEO,YAAY,EAAE;QAAM;MACtD,CAAC,CAAC,CAAC;;MAEH;MACAqC,UAAU,CAAC,MAAM;QACb/C,iBAAiB,CAAC8C,IAAI,KAAK;UACvB,GAAGA,IAAI;UACP,CAACxC,MAAM,GAAG;YAAEH,UAAU,EAAE,IAAI;YAAEO,YAAY,EAAE;UAAK;QACrD,CAAC,CAAC,CAAC;MACP,CAAC,EAAE,GAAG,CAAC;;MAEP;MACAqC,UAAU,CAAC,MAAM;QACblI,SAAS,CAACmI,YAAY,CAAC1C,MAAM,CAAC;QAC9BN,iBAAiB,CAAC8C,IAAI,IAAI;UACtB,MAAMG,QAAQ,GAAG;YAAE,GAAGH;UAAK,CAAC;UAC5B,OAAOG,QAAQ,CAAC3C,MAAM,CAAC;UACvB,OAAO2C,QAAQ;QACnB,CAAC,CAAC;MACN,CAAC,EAAE,GAAG,CAAC;IACX;EACJ,CAAC;EAED,MAAMC,oBAAoB,GAAIxG,MAAoB,IAAK;IACnD,QAAQA,MAAM;MACV,KAAKjD,YAAY,CAAC0J,MAAM;QACpB,OAAO,SAAS;MACpB,KAAK1J,YAAY,CAAC2J,OAAO;QACrB,OAAO,SAAS;MACpB,KAAK3J,YAAY,CAAC4J,IAAI;QAClB,OAAO,SAAS;MACpB;QACI,OAAO,SAAS;IACxB;EACJ,CAAC;EAED,MAAMC,kBAAkB,GAAI5G,MAAkB,IAAK;IAC/C,QAAQA,MAAM;MACV,KAAKlD,UAAU,CAAC+J,SAAS;QACrB,OAAO,SAAS;MACpB,KAAK/J,UAAU,CAACgK,WAAW;QACvB,OAAO,SAAS;MACpB,KAAKhK,UAAU,CAACiK,OAAO;QACnB,OAAO,SAAS;MACpB;QACI,OAAO,SAAS;IACxB;EACJ,CAAC;EAED,MAAMC,aAAa,GAAGA,CAACjH,KAAa,EAAEhC,UAAkB,KAAK;IACzD;IACA,MAAMkJ,IAAc,GAAG,EAAE;IACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnH,KAAK,CAACQ,MAAM,EAAE2G,CAAC,IAAI,CAAC,EAAE;MACtCD,IAAI,CAACE,IAAI,CAACpH,KAAK,CAACqH,KAAK,CAACF,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,CAAC;IACpC;IAEA,OAAOD,IAAI,CAACjG,GAAG,CAAC,CAACqG,QAAQ,EAAEC,QAAQ,kBAC/BlK,OAAA,CAACvB,GAAG;MAEAsI,EAAE,EAAE;QACAI,OAAO,EAAE,MAAM;QACfgD,GAAG,EAAE,CAAC;QACNtC,EAAE,EAAE,CAAC;QACLuC,QAAQ,EAAE,QAAQ;QAClB/C,cAAc,EAAE;MACpB,CAAE;MAAAqB,QAAA,EAEDuB,QAAQ,CAACrG,GAAG,CAACyG,IAAI;QAAA,IAAAC,qBAAA,EAAAC,sBAAA;QAAA,oBACdvK,OAAA,CAACrB,IAAI;UAEDoI,EAAE,EAAE;YACAC,KAAK,EAAE,GAAG;YACVwD,QAAQ,EAAE,GAAG;YACblD,eAAe,EAAE,kBAAkB;YACnCQ,QAAQ,EAAE,UAAU;YACpB2C,QAAQ,EAAE;UACd,CAAE;UAAA/B,QAAA,eAEF1I,OAAA,CAACpB,WAAW;YAACmI,EAAE,EAAE;cACb2D,CAAC,EAAE,gBAAgB;cACnBC,EAAE,EAAE,gBAAgB;cACpBxD,OAAO,EAAE,MAAM;cACfyD,aAAa,EAAE,QAAQ;cACvBxD,UAAU,EAAE;YAChB,CAAE;YAAAsB,QAAA,GACGvC,UAAU,CACPkE,IAAI,CAACjE,IAAI,EACT,EAAAkE,qBAAA,GAAArE,cAAc,CAACoE,IAAI,CAACpH,EAAE,CAAC,cAAAqH,qBAAA,uBAAvBA,qBAAA,CAAyBjE,UAAU,KAAI,KAAK,EAC5C,KAAK,EACLgE,IAAI,CAACzH,MAAM,KAAKlD,UAAU,CAACiK,OAAO,IAAIU,IAAI,CAACQ,WAAW,KAAKhK,QAAQ,IAAI,GAAA0J,sBAAA,GAACtE,cAAc,CAACoE,IAAI,CAACpH,EAAE,CAAC,cAAAsH,sBAAA,eAAvBA,sBAAA,CAAyBlE,UAAU,IACrG,MAAM0C,kBAAkB,CAACsB,IAAI,CAACpH,EAAE,CAAC,GACjCyD,SAAS,EACf2D,IAAI,CAACpH,EACT,CAAC,eACDjD,OAAA,CAACvB,GAAG;cAACsI,EAAE,EAAE;gBAAEC,KAAK,EAAE,MAAM;gBAAE8D,EAAE,EAAE;cAAI,CAAE;cAAApC,QAAA,eAChC1I,OAAA,CAACT,IAAI;gBACDwL,KAAK,EAAEV,IAAI,CAACzH,MAAO;gBACnBoI,IAAI,EAAC,OAAO;gBACZjE,EAAE,EAAE;kBACAO,eAAe,EAAEkC,kBAAkB,CAACa,IAAI,CAACzH,MAAM,CAAC;kBAChD4E,KAAK,EAAE,OAAO;kBACdC,UAAU,EAAE,GAAG;kBACfT,KAAK,EAAE,MAAM;kBACbC,MAAM,EAAE,MAAM;kBACd,kBAAkB,EAAE;oBAChBS,QAAQ,EAAE,SAAS;oBACnBuD,OAAO,EAAE;kBACb;gBACJ;cAAE;gBAAAtC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG;QAAC,GA1CT,GAAGuB,IAAI,CAACpH,EAAE,IAAItC,UAAU,IAAI0J,IAAI,CAACvG,YAAY,EAAE;UAAA6E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA2ClD,CAAC;MAAA,CACV;IAAC,GAvDG,OAAOoB,QAAQ,EAAE;MAAAvB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAwDrB,CACR,CAAC;EACN,CAAC;EAED,MAAMoC,YAAY,GAAIlI,MAAc,IAAK;IAAA,IAAAmI,qBAAA;IACrC,MAAMC,kBAAkB,GAAGpI,MAAM,CAACE,aAAa,CAACC,MAAM,GAAG,CAAC,GACpDH,MAAM,CAACE,aAAa,CAAC,CAAC,CAAC,CAACkD,IAAI,IAAA+E,qBAAA,GAC5BnI,MAAM,CAACW,eAAe,CAAC0H,IAAI,CAACxH,CAAC,IAAIA,CAAC,CAACC,YAAY,KAAKd,MAAM,CAACM,aAAa,CAAC,cAAA6H,qBAAA,uBAAzEA,qBAAA,CAA2E/E,IAAI;IAErF,oBACIpG,OAAA,CAACrB,IAAI;MAACoI,EAAE,EAAE;QAAEE,MAAM,EAAE;MAAO,CAAE;MAAAyB,QAAA,eACzB1I,OAAA,CAACpB,WAAW;QAACmI,EAAE,EAAE;UAAE2D,CAAC,EAAE;QAAE,CAAE;QAAAhC,QAAA,gBACtB1I,OAAA,CAACvB,GAAG;UAACsI,EAAE,EAAE;YAAEI,OAAO,EAAE,MAAM;YAAEE,cAAc,EAAE,eAAe;YAAED,UAAU,EAAE,QAAQ;YAAES,EAAE,EAAE;UAAE,CAAE;UAAAa,QAAA,gBACvF1I,OAAA,CAACnB,UAAU;YAACyM,OAAO,EAAC,IAAI;YAACvE,EAAE,EAAE;cACzBS,KAAK,EAAE,cAAc;cACrBE,QAAQ,EAAE;YACd,CAAE;YAAAgB,QAAA,EAAE1F,MAAM,CAACuI;UAAI;YAAA5C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eAC7B9I,OAAA,CAACT,IAAI;YACDwL,KAAK,EAAE/H,MAAM,CAACJ,MAAO;YACrBoI,IAAI,EAAC,OAAO;YACZxD,KAAK,EAAE4B,oBAAoB,CAACpG,MAAM,CAACJ,MAAM,CAAE;YAC3CmE,EAAE,EAAE;cACAU,UAAU,EAAE,GAAG;cACfR,MAAM,EAAE;YACZ;UAAE;YAAA0B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eACN9I,OAAA,CAAClB,IAAI;UAAC0M,SAAS;UAACC,OAAO,EAAE,CAAE;UAAC1E,EAAE,EAAE;YAAEc,EAAE,EAAE;UAAE,CAAE;UAAAa,QAAA,gBACtC1I,OAAA,CAAClB,IAAI;YAAC4M,IAAI;YAACC,EAAE,EAAE,EAAG;YAAAjD,QAAA,eACd1I,OAAA,CAACvB,GAAG;cAACsI,EAAE,EAAE;gBACLI,OAAO,EAAE,MAAM;gBACfC,UAAU,EAAE,QAAQ;gBACpB+C,GAAG,EAAE,CAAC;gBACNtC,EAAE,EAAE,CAAC;gBACLP,eAAe,EAAE,yBAAyB;gBAC1CoD,CAAC,EAAE,CAAC;gBACJxD,YAAY,EAAE;cAClB,CAAE;cAAAwB,QAAA,gBACE1I,OAAA,CAACnB,UAAU;gBAACyM,OAAO,EAAC,OAAO;gBAACvE,EAAE,EAAE;kBAAEU,UAAU,EAAE;gBAAI,CAAE;gBAAAiB,QAAA,GAAC,iBAClC,EAAC1F,MAAM,CAACM,aAAa,EAAC,KAAG,EAAC7C,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmL,WAAW;cAAA;gBAAAjD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClD,CAAC,EACZsC,kBAAkB,iBACfpL,OAAA,CAACvB,GAAG;gBAACsI,EAAE,EAAE;kBAAEI,OAAO,EAAE,MAAM;kBAAEC,UAAU,EAAE,QAAQ;kBAAE+C,GAAG,EAAE;gBAAI,CAAE;gBAAAzB,QAAA,gBACzD1I,OAAA,CAACnB,UAAU;kBAACyM,OAAO,EAAC,OAAO;kBAACvE,EAAE,EAAE;oBAAEU,UAAU,EAAE;kBAAI,CAAE;kBAAAiB,QAAA,EAAC;gBAErD;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAY,CAAC,EACZ3C,UAAU,CAACiF,kBAAkB,EAAE,KAAK,EAAE,IAAI,CAAC;cAAA;gBAAAzC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC3C,CACR;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eACP9I,OAAA,CAAClB,IAAI;YAAC4M,IAAI;YAACC,EAAE,EAAE,CAAE;YAAAjD,QAAA,gBACb1I,OAAA,CAACnB,UAAU;cAACyM,OAAO,EAAC,OAAO;cAAC9D,KAAK,EAAC,eAAe;cAAAkB,QAAA,EAAC;YAAa;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eAC5E9I,OAAA,CAACnB,UAAU;cAACyM,OAAO,EAAC,IAAI;cAACvE,EAAE,EAAE;gBAAEW,QAAQ,EAAE;cAAS,CAAE;cAAAgB,QAAA,EAAE1F,MAAM,CAACE,aAAa,CAACC;YAAM;cAAAwF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAa,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7F,CAAC,eACP9I,OAAA,CAAClB,IAAI;YAAC4M,IAAI;YAACC,EAAE,EAAE,CAAE;YAAAjD,QAAA,gBACb1I,OAAA,CAACnB,UAAU;cAACyM,OAAO,EAAC,OAAO;cAAC9D,KAAK,EAAC,eAAe;cAAAkB,QAAA,EAAC;YAAS;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eACxE9I,OAAA,CAACnB,UAAU;cAACyM,OAAO,EAAC,IAAI;cAACvE,EAAE,EAAE;gBAAEW,QAAQ,EAAE;cAAS,CAAE;cAAAgB,QAAA,EAAE1F,MAAM,CAACW,eAAe,CAACR;YAAM;cAAAwF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAa,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/F,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eACP9I,OAAA,CAACvB,GAAG;UAACsI,EAAE,EAAE;YAAE+D,EAAE,EAAE;UAAE,CAAE;UAAApC,QAAA,gBACf1I,OAAA,CAACnB,UAAU;YAACyM,OAAO,EAAC,WAAW;YAACvE,EAAE,EAAE;cAAES,KAAK,EAAE,cAAc;cAAEC,UAAU,EAAE,GAAG;cAAEI,EAAE,EAAE;YAAE,CAAE;YAAAa,QAAA,EAAC;UAEvF;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,EACZc,aAAa,CAAC5G,MAAM,CAACE,aAAa,EAAEF,MAAM,CAACuI,IAAI,CAAC;QAAA;UAAA5C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD,CAAC,EACL9F,MAAM,CAACW,eAAe,CAACR,MAAM,GAAG,CAAC,IAAI1C,IAAI,IAAIuC,MAAM,CAAC6I,KAAK,KAAKpL,IAAI,CAACqC,OAAO,CAACK,MAAM,GAAG,CAAC,iBAClFnD,OAAA,CAACvB,GAAG;UAACsI,EAAE,EAAE;YAAE+D,EAAE,EAAE;UAAE,CAAE;UAAApC,QAAA,gBACf1I,OAAA,CAACnB,UAAU;YAACyM,OAAO,EAAC,WAAW;YAACvE,EAAE,EAAE;cAAES,KAAK,EAAE,cAAc;cAAEC,UAAU,EAAE,GAAG;cAAEI,EAAE,EAAE;YAAE,CAAE;YAAAa,QAAA,EAAC;UAEvF;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,EACZc,aAAa,CAAC5G,MAAM,CAACW,eAAe,EAAEX,MAAM,CAACuI,IAAI,CAAC;QAAA;UAAA5C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClD,CACR;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAEf,CAAC;EAED,MAAMgD,eAAe,GAAGA,CAACC,CAAuB,EAAEC,QAAgB,KAAK;IACnE;IACAlK,YAAY,CAACkK,QAAQ,CAAC;IACtBpL,aAAa,CAAC,EAAE,CAAC;IACjBQ,cAAc,CAAC,CAAC,CAAC;IACjBE,aAAa,CAAC,CAAC,CAAC;IAChBE,gBAAgB,CAAC,CAAC,CAAC;IACnBE,aAAa,CAAC,EAAE,CAAC;IACjBE,QAAQ,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,MAAMqK,kBAAkB,GAAGA,CAAA,KAAM;IAC7B/J,UAAU,CAACqB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;IACtBpB,uBAAuB,CAAC,IAAI,CAAC;EACjC,CAAC;EAED,MAAM+B,UAAU,GAAI+H,YAAoB,IAAK;IACzC,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,GAAG,IAAI,CAAC;IAC/C,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,EAAE,CAAC;IACxC,MAAMI,gBAAgB,GAAGJ,OAAO,GAAG,EAAE;IACrC,OAAO,GAAGG,OAAO,IAAIC,gBAAgB,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EACvE,CAAC;EAED,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;IACjC,IAAI,CAAC3K,SAAS,IAAI,CAACE,OAAO,EAAE,OAAO,IAAI;IACvC,MAAMqC,SAAS,GAAGrC,OAAO,GAAGF,SAAS;IAErC,oBACI/B,OAAA,CAAChB,MAAM;MACH2N,IAAI,EAAExK,oBAAqB;MAC3ByK,OAAO,EAAEA,CAAA,KAAMxK,uBAAuB,CAAC,KAAK,CAAE;MAC9CyK,UAAU,EAAE;QACR9F,EAAE,EAAE;UACAG,YAAY,EAAE,CAAC;UACfwD,CAAC,EAAE;QACP;MACJ,CAAE;MAAAhC,QAAA,gBAEF1I,OAAA,CAACf,WAAW;QAAC8H,EAAE,EAAE;UAAE+F,SAAS,EAAE,QAAQ;UAAEtF,KAAK,EAAE;QAAe,CAAE;QAAAkB,QAAA,EAAC;MAEjE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,eACd9I,OAAA,CAACd,aAAa;QAAAwJ,QAAA,eACV1I,OAAA,CAACvB,GAAG;UAACsI,EAAE,EAAE;YACLI,OAAO,EAAE,MAAM;YACfyD,aAAa,EAAE,QAAQ;YACvBxD,UAAU,EAAE,QAAQ;YACpB+C,GAAG,EAAE,CAAC;YACN4C,EAAE,EAAE;UACR,CAAE;UAAArE,QAAA,gBACE1I,OAAA,CAACnB,UAAU;YAACyM,OAAO,EAAC,IAAI;YAAA5C,QAAA,GAAC,cACT,EAACvE,UAAU,CAACG,SAAS,CAAC;UAAA;YAAAqE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,eACb9I,OAAA,CAACnB,UAAU;YAACyM,OAAO,EAAC,OAAO;YAAC9D,KAAK,EAAC,gBAAgB;YAAAkB,QAAA,EAAC;UAEnD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACK,CAAC,eAChB9I,OAAA,CAACb,aAAa;QAAC4H,EAAE,EAAE;UAAEM,cAAc,EAAE;QAAS,CAAE;QAAAqB,QAAA,eAC5C1I,OAAA,CAACtB,MAAM;UACH4M,OAAO,EAAC,WAAW;UACnB/E,OAAO,EAAEA,CAAA,KAAM;YACXnE,uBAAuB,CAAC,KAAK,CAAC;YAC9B4K,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;UAC9B,CAAE;UAAAxE,QAAA,EACL;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAEjB,CAAC;EAED,MAAMqE,kBAAkB,GAAGA,CAAA,KAAM;IAC7B3K,iBAAiB,CAAC,IAAI,CAAC;EAC3B,CAAC;EAED,MAAM4K,kBAAkB,GAAGA,CAAA,KAAM;IAC7BJ,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;EAC5B,CAAC;EAED,MAAMG,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAACtL,SAAS,IAAI,CAACE,OAAO,EAAE,OAAO,IAAI;IACvC,MAAMqC,SAAS,GAAGrC,OAAO,GAAGF,SAAS;IAErC,oBACI/B,OAAA,CAACvB,GAAG;MAACsI,EAAE,EAAE;QACL2D,CAAC,EAAE,CAAC;QACJpD,eAAe,EAAE,oBAAoB;QACrCgG,SAAS,EAAE,OAAO;QAClBnG,OAAO,EAAE,MAAM;QACfyD,aAAa,EAAE,QAAQ;QACvBxD,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE;MACpB,CAAE;MAAAqB,QAAA,eACE1I,OAAA,CAACrB,IAAI;QAACoI,EAAE,EAAE;UACNwG,QAAQ,EAAE,GAAG;UACbvG,KAAK,EAAE,MAAM;UACb0D,CAAC,EAAE,CAAC;UACJoC,SAAS,EAAE;QACf,CAAE;QAAApE,QAAA,gBACE1I,OAAA,CAACnB,UAAU;UAACyM,OAAO,EAAC,IAAI;UAACvE,EAAE,EAAE;YAAEc,EAAE,EAAE,CAAC;YAAEL,KAAK,EAAE;UAAe,CAAE;UAAAkB,QAAA,EAAC;QAE/D;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACb9I,OAAA,CAACnB,UAAU;UAACyM,OAAO,EAAC,IAAI;UAACvE,EAAE,EAAE;YAAEc,EAAE,EAAE;UAAE,CAAE;UAAAa,QAAA,GAAC,cACxB,EAACvE,UAAU,CAACG,SAAS,CAAC;QAAA;UAAAqE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC,eACb9I,OAAA,CAACtB,MAAM;UACH4M,OAAO,EAAC,WAAW;UACnB/E,OAAO,EAAE6G,kBAAmB;UAC5BpC,IAAI,EAAC,OAAO;UAAAtC,QAAA,EACf;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAEd,CAAC;EAED,IAAIvG,cAAc,EAAE;IAChB,OAAO8K,gBAAgB,CAAC,CAAC;EAC7B;EAEA,IAAI,CAACjN,MAAM,IAAI,CAACS,QAAQ,EAAE;IACtB,oBACIb,OAAA,CAACvB,GAAG;MAACsI,EAAE,EAAE;QACL2D,CAAC,EAAE,CAAC;QACJpD,eAAe,EAAE,oBAAoB;QACrCgG,SAAS,EAAE,OAAO;QAClBnG,OAAO,EAAE,MAAM;QACfyD,aAAa,EAAE,QAAQ;QACvBxD,UAAU,EAAE;MAChB,CAAE;MAAAsB,QAAA,gBACE1I,OAAA,CAACvB,GAAG;QAACsI,EAAE,EAAE;UACL+F,SAAS,EAAE,QAAQ;UACnBjF,EAAE,EAAE,CAAC;UACLiD,EAAE,EAAE,CAAC;UACLtC,UAAU,EAAE,kDAAkD;UAC9DkC,CAAC,EAAE,CAAC;UACJxD,YAAY,EAAE,CAAC;UACfgB,SAAS,EAAE,sCAAsC;UACjDV,KAAK,EAAE,OAAO;UACdR,KAAK,EAAE,MAAM;UACbuG,QAAQ,EAAE;QACd,CAAE;QAAA7E,QAAA,gBACE1I,OAAA,CAACnB,UAAU;UAACyM,OAAO,EAAC,IAAI;UAACvE,EAAE,EAAE;YAAEU,UAAU,EAAE,MAAM;YAAEI,EAAE,EAAE;UAAE,CAAE;UAAAa,QAAA,EAAC;QAE5D;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACb9I,OAAA,CAACnB,UAAU;UAACyM,OAAO,EAAC,WAAW;UAAA5C,QAAA,EAAC;QAEhC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC,eAEN9I,OAAA,CAACvB,GAAG;QAACsI,EAAE,EAAE;UACLC,KAAK,EAAE,MAAM;UACbuG,QAAQ,EAAE,GAAG;UACbjG,eAAe,EAAE,OAAO;UACxBJ,YAAY,EAAE,CAAC;UACfgB,SAAS,EAAE,4BAA4B;UACvCwC,CAAC,EAAE;QACP,CAAE;QAAAhC,QAAA,gBACE1I,OAAA,CAACZ,IAAI;UACDoO,KAAK,EAAE3L,SAAU;UACjB4L,QAAQ,EAAE3B,eAAgB;UAC1B/E,EAAE,EAAE;YACAc,EAAE,EAAE,CAAC;YACL6F,YAAY,EAAE,CAAC;YACfC,WAAW,EAAE;UACjB,CAAE;UAAAjF,QAAA,gBAEF1I,OAAA,CAACX,GAAG;YAAC0L,KAAK,EAAC;UAAa;YAAApC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC3B9I,OAAA,CAACX,GAAG;YAAC0L,KAAK,EAAC;UAAW;YAAApC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC,EAENnH,KAAK,iBACF3B,OAAA,CAACV,KAAK;UAACsO,QAAQ,EAAC,OAAO;UAAC7G,EAAE,EAAE;YAAEc,EAAE,EAAE;UAAE,CAAE;UAAAa,QAAA,EACjC/G;QAAK;UAAAgH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACV,EAEAjH,SAAS,KAAK,CAAC,gBACZ7B,OAAA,CAAClB,IAAI;UAAC0M,SAAS;UAACC,OAAO,EAAE,CAAE;UAAA/C,QAAA,gBACvB1I,OAAA,CAAClB,IAAI;YAAC4M,IAAI;YAACC,EAAE,EAAE,EAAG;YAAAjD,QAAA,eACd1I,OAAA,CAACjB,SAAS;cACN8O,SAAS;cACT9C,KAAK,EAAC,WAAW;cACjByC,KAAK,EAAE7M,UAAW;cAClB8M,QAAQ,EAAGK,CAAC,IAAKlN,aAAa,CAACkN,CAAC,CAACC,MAAM,CAACP,KAAK,CAAE;cAC/CQ,QAAQ;cACRC,YAAY,EAAC,KAAK;cAClBlH,EAAE,EAAE;gBAAEO,eAAe,EAAE;cAAQ;YAAE;cAAAqB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACP9I,OAAA,CAAClB,IAAI;YAAC4M,IAAI;YAACC,EAAE,EAAE,EAAG;YAACuC,EAAE,EAAE,CAAE;YAAAxF,QAAA,eACrB1I,OAAA,CAACjB,SAAS;cACN8O,SAAS;cACT9C,KAAK,EAAC,mBAAmB;cACzB3E,IAAI,EAAC,QAAQ;cACboH,KAAK,EAAErM,WAAY;cACnBsM,QAAQ,EAAGK,CAAC,IAAK1M,cAAc,CAAC+M,MAAM,CAACL,CAAC,CAACC,MAAM,CAACP,KAAK,CAAC,CAAE;cACxDY,UAAU,EAAE;gBAAEC,GAAG,EAAE,CAAC;gBAAEC,GAAG,EAAE;cAAE,CAAE;cAC/BL,YAAY,EAAC,KAAK;cAClBlH,EAAE,EAAE;gBAAEO,eAAe,EAAE;cAAQ;YAAE;cAAAqB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACP9I,OAAA,CAAClB,IAAI;YAAC4M,IAAI;YAACC,EAAE,EAAE,EAAG;YAACuC,EAAE,EAAE,CAAE;YAAAxF,QAAA,eACrB1I,OAAA,CAACjB,SAAS;cACN8O,SAAS;cACT9C,KAAK,EAAC,mBAAmB;cACzB3E,IAAI,EAAC,QAAQ;cACboH,KAAK,EAAEnM,UAAW;cAClBoM,QAAQ,EAAGK,CAAC,IAAKxM,aAAa,CAAC6M,MAAM,CAACL,CAAC,CAACC,MAAM,CAACP,KAAK,CAAC,CAAE;cACvDY,UAAU,EAAE;gBAAEC,GAAG,EAAE,CAAC;gBAAEC,GAAG,EAAE;cAAG,CAAE;cAChCL,YAAY,EAAC,KAAK;cAClBlH,EAAE,EAAE;gBAAEO,eAAe,EAAE;cAAQ;YAAE;cAAAqB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACP9I,OAAA,CAAClB,IAAI;YAAC4M,IAAI;YAACC,EAAE,EAAE,EAAG;YAACuC,EAAE,EAAE,CAAE;YAAAxF,QAAA,eACrB1I,OAAA,CAACjB,SAAS;cACN8O,SAAS;cACT9C,KAAK,EAAC,iBAAiB;cACvB3E,IAAI,EAAC,QAAQ;cACboH,KAAK,EAAEjM,aAAc;cACrBkM,QAAQ,EAAGK,CAAC,IAAKtM,gBAAgB,CAAC2M,MAAM,CAACL,CAAC,CAACC,MAAM,CAACP,KAAK,CAAC,CAAE;cAC1DY,UAAU,EAAE;gBAAEC,GAAG,EAAE,CAAC;gBAAEC,GAAG,EAAE;cAAG,CAAE;cAChCL,YAAY,EAAC,KAAK;cAClBlH,EAAE,EAAE;gBAAEO,eAAe,EAAE;cAAQ;YAAE;cAAAqB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACP9I,OAAA,CAAClB,IAAI;YAAC4M,IAAI;YAACC,EAAE,EAAE,EAAG;YAAAjD,QAAA,eACd1I,OAAA,CAACtB,MAAM;cACH4M,OAAO,EAAC,WAAW;cACnB/E,OAAO,EAAEpB,gBAAiB;cAC1BoJ,QAAQ,EAAE,CAAC5N,UAAW;cACtBoG,EAAE,EAAE;gBAAE+D,EAAE,EAAE;cAAE,CAAE;cACdE,IAAI,EAAC,OAAO;cAAAtC,QAAA,EACf;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,gBAEP9I,OAAA,CAAClB,IAAI;UAAC0M,SAAS;UAACC,OAAO,EAAE,CAAE;UAAA/C,QAAA,gBACvB1I,OAAA,CAAClB,IAAI;YAAC4M,IAAI;YAACC,EAAE,EAAE,EAAG;YAACuC,EAAE,EAAE,CAAE;YAAAxF,QAAA,eACrB1I,OAAA,CAACjB,SAAS;cACN8O,SAAS;cACT9C,KAAK,EAAC,SAAS;cACfyC,KAAK,EAAE/L,UAAW;cAClBgM,QAAQ,EAAGK,CAAC,IAAKpM,aAAa,CAACoM,CAAC,CAACC,MAAM,CAACP,KAAK,CAACgB,WAAW,CAAC,CAAC,CAAE;cAC7DP,YAAY,EAAC,KAAK;cAClBlH,EAAE,EAAE;gBAAEO,eAAe,EAAE;cAAQ;YAAE;cAAAqB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACP9I,OAAA,CAAClB,IAAI;YAAC4M,IAAI;YAACC,EAAE,EAAE,EAAG;YAACuC,EAAE,EAAE,CAAE;YAAAxF,QAAA,eACrB1I,OAAA,CAACjB,SAAS;cACN8O,SAAS;cACT9C,KAAK,EAAC,aAAa;cACnByC,KAAK,EAAE7M,UAAW;cAClB8M,QAAQ,EAAGK,CAAC,IAAKlN,aAAa,CAACkN,CAAC,CAACC,MAAM,CAACP,KAAK,CAAE;cAC/CS,YAAY,EAAC,KAAK;cAClBlH,EAAE,EAAE;gBAAEO,eAAe,EAAE;cAAQ;YAAE;cAAAqB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACP9I,OAAA,CAAClB,IAAI;YAAC4M,IAAI;YAACC,EAAE,EAAE,EAAG;YAAAjD,QAAA,eACd1I,OAAA,CAACtB,MAAM;cACH4M,OAAO,EAAC,WAAW;cACnB/E,OAAO,EAAEb,cAAe;cACxBqB,EAAE,EAAE;gBAAE+D,EAAE,EAAE;cAAE,CAAE;cACdE,IAAI,EAAC,OAAO;cAAAtC,QAAA,EACf;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CACT;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAEd;EAEA,oBACI9I,OAAA,CAACvB,GAAG;IAACsI,EAAE,EAAE;MAAE2D,CAAC,EAAE,CAAC;MAAEpD,eAAe,EAAE,oBAAoB;MAAEgG,SAAS,EAAE;IAAQ,CAAE;IAAA5E,QAAA,GACxE/G,KAAK,iBACF3B,OAAA,CAACV,KAAK;MAACsO,QAAQ,EAAC,OAAO;MAAC7G,EAAE,EAAE;QAAEc,EAAE,EAAE;MAAE,CAAE;MAAAa,QAAA,EACjC/G;IAAK;MAAAgH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACV,EAEArI,IAAI,iBACDT,OAAA,CAAAE,SAAA;MAAAwI,QAAA,gBACI1I,OAAA,CAACvB,GAAG;QAACsI,EAAE,EAAE;UACLI,OAAO,EAAE,MAAM;UACfE,cAAc,EAAE,eAAe;UAC/BD,UAAU,EAAE,QAAQ;UACpBS,EAAE,EAAE;QACR,CAAE;QAAAa,QAAA,gBACE1I,OAAA,CAACvB,GAAG;UAAAiK,QAAA,gBACA1I,OAAA,CAACnB,UAAU;YAACyM,OAAO,EAAC,IAAI;YAACvE,EAAE,EAAE;cAAEc,EAAE,EAAE,CAAC;cAAEL,KAAK,EAAE;YAAe,CAAE;YAAAkB,QAAA,GAAC,WAClD,EAACjI,IAAI,CAACwC,EAAE;UAAA;YAAA0F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC,eACb9I,OAAA,CAACnB,UAAU;YAACyM,OAAO,EAAC,IAAI;YAACvE,EAAE,EAAE;cAAES,KAAK,EAAE;YAAe,CAAE;YAAAkB,QAAA,GAAC,eACvC,EAACjI,IAAI,CAACmC,MAAM,KAAK,SAAS,GAAG,SAAS,GAAGnC,IAAI,CAACmC,MAAM,KAAK,aAAa,GAAG,aAAa,GAAG,WAAW;UAAA;YAAA+F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ,CAAC,EACL,CAACrI,IAAI,CAACmC,MAAM,KAAK,aAAa,IAAInC,IAAI,CAACmC,MAAM,KAAK,WAAW,KAAKb,SAAS,iBACxE/B,OAAA,CAACnB,UAAU;UAACyM,OAAO,EAAC,IAAI;UAACvE,EAAE,EAAE;YAAES,KAAK,EAAE;UAAiB,CAAE;UAAAkB,QAAA,GAAC,QAChD,EAACvE,UAAU,CAAC1D,IAAI,CAACmC,MAAM,KAAK,WAAW,IAAIX,OAAO,GAAGA,OAAO,GAAGF,SAAS,GAAGM,WAAW,CAAC;QAAA;UAAAsG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrF,CACf;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,EAELrI,IAAI,CAACmC,MAAM,KAAK,SAAS,IAAI/B,QAAQ,OAAAN,cAAA,GAAKE,IAAI,CAACqC,OAAO,CAAC,CAAC,CAAC,cAAAvC,cAAA,uBAAfA,cAAA,CAAiB0C,EAAE,kBAC1DjD,OAAA,CAACtB,MAAM;QACH4M,OAAO,EAAC,WAAW;QACnB/E,OAAO,EAAET,eAAgB;QACzBiB,EAAE,EAAE;UAAEc,EAAE,EAAE;QAAE,CAAE;QAAAa,QAAA,EACjB;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACX,eAED9I,OAAA,CAAClB,IAAI;QAAC0M,SAAS;QAACC,OAAO,EAAE,CAAE;QAAA/C,QAAA,gBAEvB1I,OAAA,CAAClB,IAAI;UAAC4M,IAAI;UAACC,EAAE,EAAE,EAAG;UAACuC,EAAE,EAAE,CAAE;UAAAxF,QAAA,eACrB1I,OAAA,CAACP,KAAK;YAACgM,OAAO,EAAE,CAAE;YAAA/C,QAAA,EACbjI,IAAI,CAACqC,OAAO,CAACc,GAAG,CAACsH,YAAY;UAAC;YAAAvC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAGP9I,OAAA,CAAClB,IAAI;UAAC4M,IAAI;UAACC,EAAE,EAAE,EAAG;UAACuC,EAAE,EAAE,CAAE;UAAAxF,QAAA,eACrB1I,OAAA,CAACrB,IAAI;YAACoI,EAAE,EAAE;cAAEE,MAAM,EAAE,MAAM;cAAEC,YAAY,EAAE,CAAC;cAAEgB,SAAS,EAAE;YAA4B,CAAE;YAAAQ,QAAA,eAClF1I,OAAA,CAACpB,WAAW;cAAA8J,QAAA,gBACR1I,OAAA,CAACnB,UAAU;gBAACyM,OAAO,EAAC,IAAI;gBAACvE,EAAE,EAAE;kBACzBc,EAAE,EAAE,CAAC;kBACLL,KAAK,EAAE,cAAc;kBACrBC,UAAU,EAAE,MAAM;kBAClBC,QAAQ,EAAE;gBACd,CAAE;gBAAAgB,QAAA,EAAC;cAEH;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAY,CAAC,EAEZ2F,KAAK,CAACC,IAAI,CAAC;gBAAEvL,MAAM,EAAE1C,IAAI,CAACmL;cAAY,CAAC,EAAE,CAACG,CAAC,EAAEjC,CAAC,KAAKA,CAAC,GAAG,CAAC,CAAC,CAAClG,GAAG,CAAC+K,qBAAqB,CAAC;YAAA;cAAAhG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5E;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACZ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA,eACT,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACxI,EAAA,CAh0BWH,IAAyB;AAAAyO,EAAA,GAAzBzO,IAAyB;AAAA,IAAAyO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}