{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\nexport const gameService = {\n  createGame: async (playerCount, maxBatches, tasksPerBatch) => {\n    console.log('Creating game with params:', {\n      playerCount,\n      maxBatches,\n      tasksPerBatch\n    });\n    const response = await axios.post(`${API_URL}/games/create`, null, {\n      params: {\n        player_count: playerCount,\n        max_batches: maxBatches,\n        tasks_per_batch: tasksPerBatch\n      }\n    });\n    console.log('Game created:', response.data);\n    return response.data.game_id;\n  },\n  checkGameExists: async gameId => {\n    console.log('Checking if game exists:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n    console.log('Game exists response:', response.data);\n    return response.data.exists;\n  },\n  joinGame: async (gameId, playerName) => {\n    console.log('Joining game:', {\n      gameId,\n      playerName\n    });\n    const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n      params: {\n        player_name: playerName\n      }\n    });\n    console.log('Join game response:', response.data);\n    return response.data.player_id;\n  },\n  startGame: async gameId => {\n    console.log('Starting game:', gameId);\n    await axios.post(`${API_URL}/games/${gameId}/start`);\n    console.log('Game started');\n  },\n  getGameState: async gameId => {\n    console.log('Getting game state:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}`);\n    console.log('Game state:', response.data);\n    return response.data;\n  },\n  flipCoin: async (gameId, taskId) => {\n    console.log('Flipping coin:', {\n      gameId,\n      taskId\n    });\n    await axios.post(`${API_URL}/games/${gameId}/flip/${taskId}`);\n    console.log('Coin flipped');\n  }\n};\nexport class WebSocketService {\n  constructor(gameId, playerId, onGameUpdate) {\n    this.ws = void 0;\n    this.messageHandlers = [];\n    this.gameId = void 0;\n    this.playerId = void 0;\n    this.onGameUpdate = void 0;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.gameId = gameId;\n    this.playerId = playerId;\n    this.onGameUpdate = onGameUpdate;\n    this.connect();\n  }\n  connect() {\n    console.log('Attempting to connect WebSocket...', this.gameId, this.playerId);\n    const wsUrl = `${WS_URL}/ws/${this.gameId}/${this.playerId}`;\n    console.log('WebSocket URL:', wsUrl);\n    this.ws = new WebSocket(wsUrl);\n    this.ws.onopen = () => {\n      console.log('WebSocket connected successfully');\n      this.reconnectAttempts = 0;\n\n      // 连接成功后立即请求一次游戏状态\n      this.sendMessage({\n        type: 'REQUEST_GAME_STATE',\n        data: {\n          gameId: this.gameId\n        }\n      });\n    };\n    this.ws.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        console.log('WebSocket message received:', message);\n        if (message.type === 'GAME_UPDATE') {\n          this.onGameUpdate(message.data);\n        }\n        this.messageHandlers.forEach(handler => handler(message));\n      } catch (error) {\n        console.error('Error processing WebSocket message:', error);\n      }\n    };\n    this.ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    this.ws.onclose = event => {\n      console.log('WebSocket connection closed:', event);\n\n      // 尝试重连\n      if (this.reconnectAttempts < this.maxReconnectAttempts) {\n        this.reconnectAttempts++;\n        console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n        setTimeout(() => this.connect(), 3000);\n      }\n    };\n  }\n  disconnect() {\n    this.ws.close();\n  }\n\n  // 添加消息处理函数\n  onMessage(handler) {\n    this.messageHandlers.push(handler);\n  }\n\n  // 发送消息的通用方法\n  sendMessage(message) {\n    if (this.ws.readyState === WebSocket.OPEN) {\n      console.log('Sending WebSocket message:', message);\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not open. Current state:', this.ws.readyState);\n      // 如果连接未打开，尝试重新连接\n      if (this.ws.readyState === WebSocket.CLOSED) {\n        this.connect();\n      }\n    }\n  }\n  completeTask(taskId) {\n    this.sendMessage({\n      type: 'COMPLETE_TASK',\n      data: {\n        taskId\n      }\n    });\n  }\n  flipCoin(taskId) {\n    this.sendMessage({\n      type: 'FLIP_COIN',\n      data: {\n        taskId\n      }\n    });\n  }\n}","map":{"version":3,"names":["axios","API_URL","WS_URL","gameService","createGame","playerCount","maxBatches","tasksPerBatch","console","log","response","post","params","player_count","max_batches","tasks_per_batch","data","game_id","checkGameExists","gameId","get","exists","joinGame","playerName","player_name","player_id","startGame","getGameState","flipCoin","taskId","WebSocketService","constructor","playerId","onGameUpdate","ws","messageHandlers","reconnectAttempts","maxReconnectAttempts","connect","wsUrl","WebSocket","onopen","sendMessage","type","onmessage","event","message","JSON","parse","forEach","handler","error","onerror","onclose","setTimeout","disconnect","close","onMessage","push","readyState","OPEN","send","stringify","warn","CLOSED","completeTask"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\n const API_URL = 'http://172.20.10.4:8000';\n const WS_URL = 'ws://172.20.10.4:8000';\n\nexport const gameService = {\n    createGame: async (playerCount: number, maxBatches: number, tasksPerBatch: number): Promise<string> => {\n        console.log('Creating game with params:', { playerCount, maxBatches, tasksPerBatch });\n        const response = await axios.post(`${API_URL}/games/create`, null, {\n            params: { player_count: playerCount, max_batches: maxBatches, tasks_per_batch: tasksPerBatch }\n        });\n        console.log('Game created:', response.data);\n        return response.data.game_id;\n    },\n\n    checkGameExists: async (gameId: string): Promise<boolean> => {\n        console.log('Checking if game exists:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n        console.log('Game exists response:', response.data);\n        return response.data.exists;\n    },\n\n    joinGame: async (gameId: string, playerName: string): Promise<string> => {\n        console.log('Joining game:', { gameId, playerName });\n        const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n            params: { player_name: playerName }\n        });\n        console.log('Join game response:', response.data);\n        return response.data.player_id;\n    },\n\n    startGame: async (gameId: string): Promise<void> => {\n        console.log('Starting game:', gameId);\n        await axios.post(`${API_URL}/games/${gameId}/start`);\n        console.log('Game started');\n    },\n\n    getGameState: async (gameId: string): Promise<Game> => {\n        console.log('Getting game state:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}`);\n        console.log('Game state:', response.data);\n        return response.data;\n    },\n\n    flipCoin: async (gameId: string, taskId: string): Promise<void> => {\n        console.log('Flipping coin:', { gameId, taskId });\n        await axios.post(`${API_URL}/games/${gameId}/flip/${taskId}`);\n        console.log('Coin flipped');\n    },\n};\n\nexport class WebSocketService {\n    private ws: WebSocket;\n    private messageHandlers: ((message: any) => void)[] = [];\n    private gameId: string;\n    private playerId: string;\n    private onGameUpdate: (game: any) => void;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = 5;\n\n    constructor(gameId: string, playerId: string, onGameUpdate: (game: any) => void) {\n        this.gameId = gameId;\n        this.playerId = playerId;\n        this.onGameUpdate = onGameUpdate;\n        this.connect();\n    }\n\n    connect() {\n        console.log('Attempting to connect WebSocket...', this.gameId, this.playerId);\n        const wsUrl = `${WS_URL}/ws/${this.gameId}/${this.playerId}`;\n        console.log('WebSocket URL:', wsUrl);\n        \n        this.ws = new WebSocket(wsUrl);\n        \n        this.ws.onopen = () => {\n            console.log('WebSocket connected successfully');\n            this.reconnectAttempts = 0;\n            \n            // 连接成功后立即请求一次游戏状态\n            this.sendMessage({\n                type: 'REQUEST_GAME_STATE',\n                data: { gameId: this.gameId }\n            });\n        };\n\n        this.ws.onmessage = (event) => {\n            try {\n                const message = JSON.parse(event.data);\n                console.log('WebSocket message received:', message);\n                \n                if (message.type === 'GAME_UPDATE') {\n                    this.onGameUpdate(message.data);\n                }\n                \n                this.messageHandlers.forEach(handler => handler(message));\n            } catch (error) {\n                console.error('Error processing WebSocket message:', error);\n            }\n        };\n\n        this.ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n\n        this.ws.onclose = (event) => {\n            console.log('WebSocket connection closed:', event);\n            \n            // 尝试重连\n            if (this.reconnectAttempts < this.maxReconnectAttempts) {\n                this.reconnectAttempts++;\n                console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n                setTimeout(() => this.connect(), 3000);\n            }\n        };\n    }\n\n    disconnect() {\n        this.ws.close();\n    }\n\n    // 添加消息处理函数\n    onMessage(handler: (message: any) => void) {\n        this.messageHandlers.push(handler);\n    }\n\n    // 发送消息的通用方法\n    sendMessage(message: any) {\n        if (this.ws.readyState === WebSocket.OPEN) {\n            console.log('Sending WebSocket message:', message);\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.warn('WebSocket is not open. Current state:', this.ws.readyState);\n            // 如果连接未打开，尝试重新连接\n            if (this.ws.readyState === WebSocket.CLOSED) {\n                this.connect();\n            }\n        }\n    }\n\n    completeTask(taskId: string) {\n        this.sendMessage({\n            type: 'COMPLETE_TASK',\n            data: { taskId }\n        });\n    }\n\n    flipCoin(taskId: string) {\n        this.sendMessage({\n            type: 'FLIP_COIN',\n            data: { taskId }\n        });\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}