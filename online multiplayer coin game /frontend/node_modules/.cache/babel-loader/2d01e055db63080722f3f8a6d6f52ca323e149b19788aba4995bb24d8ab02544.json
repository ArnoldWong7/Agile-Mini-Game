{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer coin game 2/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Tabs, Tab, Alert, Chip, keyframes, Stack, TableContainer, Table, TableHead, TableBody, TableCell, TableRow, Paper, Container, CircularProgress } from '@mui/material';\nimport { TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Game = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  const [gameId, setGameId] = useState(initialGameId);\n  const [game, setGame] = useState(null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerId, setPlayerId] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n  const [playerCount, setPlayerCount] = useState(2);\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(20);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showResultPage, setShowResultPage] = useState(false);\n  const [batchCompletionTimes, setBatchCompletionTimes] = useState({});\n  const [batchStartTimes, setBatchStartTimes] = useState({});\n  const [batchFlipStates, setBatchFlipStates] = useState({});\n\n  // 添加状态来跟踪硬币的翻转状态和批次完成状态\n  const [flippedCoins, setFlippedCoins] = useState([]);\n  const [pendingBatchCompletion, setPendingBatchCompletion] = useState({});\n\n  // 添加翻转动画状态\n\n  const [flipStates, setFlipStates] = useState({});\n\n  // 添加翻转动画状态\n  const [flippingCoins, setFlippingCoins] = useState({});\n\n  // 修改计时器状态和开始时间状态\n  const [elapsedTime, setElapsedTime] = useState(0);\n\n  // 添加批次统计时间的状态\n  const [batchStats, setBatchStats] = useState({});\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, updatedGame => {\n        console.log('Game state updated:', updatedGame);\n        setGame(updatedGame);\n      });\n      service.connect();\n      setWsService(service);\n\n      // Cleanup function\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  useEffect(() => {\n    let timerInterval = null;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && startTime) {\n      timerInterval = setInterval(() => {\n        setCurrentTime(prev => Date.now() - startTime);\n      }, 1000);\n    }\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'completed' && startTime && !endTime) {\n      setEndTime(Date.now());\n      setShowResultPage(true);\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime, endTime]);\n  useEffect(() => {\n    let intervalId;\n    if (startTime && (game === null || game === void 0 ? void 0 : game.status) === 'in_progress') {\n      intervalId = setInterval(() => {\n        setElapsedTime(prev => Date.now() - startTime);\n      }, 1000);\n    }\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [startTime, game === null || game === void 0 ? void 0 : game.status]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && game.players) {\n      const newStartTimes = {\n        ...batchStartTimes\n      };\n      const newCompletionTimes = {\n        ...batchCompletionTimes\n      };\n      let hasChanges = false;\n      game.players.forEach(player => {\n        if (!newStartTimes[player.current_batch]) {\n          newStartTimes[player.current_batch] = {};\n          hasChanges = true;\n        }\n        if (!newCompletionTimes[player.current_batch]) {\n          newCompletionTimes[player.current_batch] = {};\n          hasChanges = true;\n        }\n\n        // 使用后端提供的批次开始时间\n        if (player.batch_start_time) {\n          Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n            if (newStartTimes[player.current_batch][Number(batchNum)] !== startTime) {\n              newStartTimes[player.current_batch][Number(batchNum)] = startTime;\n              hasChanges = true;\n            }\n          });\n        }\n\n        // Calculate completion times for each batch\n        for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n          var _newStartTimes$player;\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const startedAt = (_newStartTimes$player = newStartTimes[player.current_batch]) === null || _newStartTimes$player === void 0 ? void 0 : _newStartTimes$player[batchNum];\n          if (startedAt && batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[player.current_batch][player.id]) {\n            newCompletionTimes[player.current_batch][player.id] = Date.now() - startedAt;\n            hasChanges = true;\n          }\n        }\n      });\n\n      // 只在有变化时更新状态\n      if (hasChanges) {\n        setBatchStartTimes(newStartTimes);\n        setBatchCompletionTimes(newCompletionTimes);\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players, game === null || game === void 0 ? void 0 : game.max_batches]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks) {\n      let shouldUpdate = false;\n      const currentFlippedCoins = [...flippedCoins];\n\n      // 检查是否有新的批次开始\n      game.players.forEach(player => {\n        const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n        const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n\n        // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n        if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n          // 清理上一个批次的翻转状态\n          const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n          const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n          const newFlippedCoins = currentFlippedCoins.filter(id => !prevBatchTaskIds.includes(id));\n          if (newFlippedCoins.length !== currentFlippedCoins.length) {\n            currentFlippedCoins.length = 0;\n            currentFlippedCoins.push(...newFlippedCoins);\n            shouldUpdate = true;\n          }\n        }\n      });\n\n      // 只在有变化时更新状态\n      if (shouldUpdate) {\n        setFlippedCoins(currentFlippedCoins);\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks]);\n\n  // 添加错误处理函数\n  const handleGameUpdate = updatedGame => {\n    setGame(updatedGame);\n    if (updatedGame.status === 'completed' && !endTime) {\n      setEndTime(Date.now());\n    }\n  };\n  const handleCreateGame = async e => {\n    e.preventDefault();\n    try {\n      setError(null);\n      // 创建游戏\n      const gameId = await gameService.createGame(playerCount, 4, 0);\n      if (gameId) {\n        // 加入游戏\n        const playerId = await gameService.joinGame(gameId, playerName);\n\n        // 更新状态\n        setGameId(gameId);\n        setPlayerId(playerId);\n\n        // 创建WebSocket连接\n        const ws = new WebSocketService(gameId, playerName, handleGameUpdate);\n        setWsService(ws);\n\n        // 获取初始游戏状态\n        const initialGameState = await gameService.getGameState(gameId);\n        setGame(initialGameState);\n\n        // 设置开始时间\n        setStartTime(Date.now());\n        console.log('Game created successfully:', {\n          gameId,\n          playerId\n        });\n      }\n    } catch (err) {\n      console.error('Error creating game:', err);\n      setError(err instanceof Error ? err.message : 'Failed to create game');\n    }\n  };\n  const handleJoinGame = async e => {\n    e.preventDefault();\n    try {\n      setError(null);\n      if (joinGameId) {\n        // 检查游戏是否存在\n        const exists = await gameService.checkGameExists(joinGameId);\n        if (!exists) {\n          setError('Game not found');\n          return;\n        }\n\n        // 加入游戏\n        const playerId = await gameService.joinGame(joinGameId, playerName);\n\n        // 更新状态\n        setGameId(joinGameId);\n        setPlayerId(playerId);\n\n        // 创建WebSocket连接\n        const ws = new WebSocketService(joinGameId, playerName, handleGameUpdate);\n        setWsService(ws);\n\n        // 获取游戏状态\n        const gameState = await gameService.getGameState(joinGameId);\n        setGame(gameState);\n\n        // 设置开始时间\n        setStartTime(Date.now());\n        console.log('Joined game successfully:', {\n          gameId: joinGameId,\n          playerId\n        });\n      }\n    } catch (err) {\n      console.error('Error joining game:', err);\n      setError(err instanceof Error ? err.message : 'Failed to join game');\n    }\n  };\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      const currentTime = Date.now();\n      setStartTime(currentTime);\n      setBatchStartTimes(prev => ({\n        ...prev,\n        1: {\n          1: currentTime\n        }\n      }));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to start game');\n    }\n  };\n  const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n  // 添加一个专门用于渲染目标硬币的函数\n  const renderTargetCoin = type => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: {\n          xs: '20px',\n          sm: '32px'\n        },\n        height: {\n          xs: '20px',\n          sm: '32px'\n        },\n        borderRadius: '50%',\n        border: theme => ({\n          xs: `1px solid ${theme.palette.primary.main}`,\n          sm: `2px solid ${theme.palette.primary.main}`\n        }),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: theme => theme.palette.background.paper,\n        color: theme => theme.palette.text.primary,\n        fontSize: {\n          xs: '0.7rem',\n          sm: '0.9rem'\n        },\n        fontWeight: 'bold',\n        marginBottom: {\n          xs: 0,\n          sm: 1\n        },\n        marginRight: 1\n      },\n      children: type === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 检查批次是否所有硬币都已翻转\n  const isBatchAllFlipped = (batchNum, playerId) => {\n    const batchTasks = game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === playerId);\n    return (batchTasks === null || batchTasks === void 0 ? void 0 : batchTasks.every(t => flippedCoins.includes(t.id))) || false;\n  };\n\n  // 处理硬币翻转\n  const handleCoinFlip = async coinId => {\n    if (!game || !playerId) return;\n\n    // 检查是否是当前玩家的回合\n    const currentPlayer = game.players.find(p => p.id === playerId);\n    if ((currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.status) !== PlayerStatus.ACTIVE) return;\n\n    // 获取当前批次需要翻转的硬币数量\n    const currentBatch = currentPlayer.current_batch;\n    const requiredCoins = getRequiredCoinsForBatch(currentBatch);\n\n    // 如果已经翻转了足够的硬币，不允许继续翻转\n    const currentBatchFlips = flippedCoins.filter(id => game.tasks.find(t => t.id === id && t.batch_number === currentBatch && t.assigned_to === playerId)).length;\n    if (currentBatchFlips >= requiredCoins) return;\n    try {\n      // 更新本地状态\n      setFlippedCoins(prev => [...prev, coinId]);\n\n      // 更新翻转动画状态\n      setFlippingCoins(prev => ({\n        ...prev,\n        [coinId]: {\n          isFlipping: true\n        }\n      }));\n\n      // 发送翻转请求到服务器\n      await gameService.flipCoin(game.id, coinId);\n    } catch (error) {\n      console.error('Error flipping coin:', error);\n      // 如果失败，回滚本地状态\n      setFlippedCoins(prev => prev.filter(id => id !== coinId));\n      setFlippingCoins(prev => {\n        const newState = {\n          ...prev\n        };\n        delete newState[coinId];\n        return newState;\n      });\n    }\n  };\n\n  // 处理批次完成\n  const handleCompleteBatch = batchNum => {\n    const pendingTasks = pendingBatchCompletion[batchNum] || [];\n    if (pendingTasks.length === 0) return;\n\n    // 发送所有任务完成的请求\n    pendingTasks.forEach(taskId => {\n      if (wsService) {\n        wsService.completeTask(taskId);\n      }\n    });\n\n    // 清理这个批次的待完成状态\n    setPendingBatchCompletion(prev => {\n      const newState = {\n        ...prev\n      };\n      delete newState[batchNum];\n      return newState;\n    });\n  };\n\n  // 处理完成子批次\n  const handleCompleteSubBatch = async (batchNum, subBatchIndex) => {\n    if (!game || !playerId) return;\n    try {\n      // 检查是否可以执行这个批次\n      if (!canExecuteBatch(batchNum, subBatchIndex)) {\n        setError('Please complete previous batches first');\n        return;\n      }\n\n      // 将当前子批次的任务传递给下一个玩家\n      const currentPlayerIndex = game.players.findIndex(p => p.id === playerId);\n      const nextPlayerIndex = (currentPlayerIndex + 1) % game.players.length;\n      const nextPlayer = game.players[nextPlayerIndex];\n\n      // 更新任务分配和玩家状态\n      const updatedTasks = game.tasks.map(task => {\n        // 只更新当前子批次的任务\n        if (task.batch_number === batchNum && task.sub_batch_number === subBatchIndex && task.assigned_to === playerId) {\n          // 将任务转移给下一个玩家并标记为进行中\n          return {\n            ...task,\n            assigned_to: nextPlayer.id,\n            status: TaskStatus.IN_PROGRESS // 设置为进行中，这样下一个玩家可以继续\n          };\n        }\n        return task;\n      });\n\n      // 检查当前玩家是否还有其他未完成的任务\n      const hasRemainingTasks = updatedTasks.some(task => task.assigned_to === playerId && task.status !== TaskStatus.COMPLETED);\n\n      // 检查下一个玩家是否有进行中的任务\n      const nextPlayerHasInProgressTasks = updatedTasks.some(task => task.assigned_to === nextPlayer.id && task.status === TaskStatus.IN_PROGRESS);\n\n      // 更新玩家状态\n      const updatedPlayers = game.players.map(player => {\n        if (player.id === playerId) {\n          // 如果还有其他任务，保持ACTIVE状态继续执行\n          return {\n            ...player,\n            status: hasRemainingTasks ? PlayerStatus.ACTIVE : PlayerStatus.WAITING\n          };\n        }\n        if (player.id === nextPlayer.id) {\n          // 将下一个玩家设置为活动状态，这样他可以开始执行接收到的批次\n          return {\n            ...player,\n            status: nextPlayerHasInProgressTasks ? PlayerStatus.ACTIVE : PlayerStatus.WAITING\n          };\n        }\n        return player;\n      });\n\n      // 更新游戏状态\n      const updatedGame = {\n        ...game,\n        tasks: updatedTasks,\n        players: updatedPlayers,\n        status: 'IN_PROGRESS' // 保持游戏状态为进行中\n      };\n\n      // 发送更新到服务器\n      await gameService.updateGame(game.id, updatedGame);\n\n      // 更新本地状态\n      setGame(updatedGame);\n    } catch (error) {\n      console.error('Error completing sub-batch:', error);\n      setError('Failed to complete sub-batch');\n    }\n  };\n\n  // 检查当前批次是否可以执行\n  const canExecuteBatch = (batchNum, subBatchIndex) => {\n    if (!game || !playerId) return false;\n\n    // 获取当前玩家的所有任务\n    const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n\n    // 获取所有之前的子批次\n    const previousSubBatches = playerTasks.filter(t => t.batch_number < batchNum || t.batch_number === batchNum && t.sub_batch_number < subBatchIndex);\n\n    // 如果还有之前的子批次未完成，则不能执行当前批次\n    return !previousSubBatches.some(t => t.status !== TaskStatus.COMPLETED);\n  };\n\n  // 更新玩家在游戏中的状态\n  const updatePlayerGameStatus = (playerId, status) => {\n    if (!game) return;\n    const playerIndex = game.players.findIndex(p => p.id === playerId);\n    if (playerIndex === -1) return;\n\n    // 更新玩家状态\n    const updatedPlayers = game.players.map(player => {\n      if (player.id === playerId) {\n        return {\n          ...player,\n          status: status === TaskStatus.IN_PROGRESS ? PlayerStatus.ACTIVE : PlayerStatus.WAITING\n        };\n      }\n      return player;\n    });\n    setGame(prev => prev ? {\n      ...prev,\n      players: updatedPlayers\n    } : prev);\n  };\n\n  // 监听游戏状态变化\n  useEffect(() => {\n    if (!game || !playerId) return;\n\n    // 检查当前玩家是否有进行中的任务\n    const hasInProgressTasks = game.tasks.some(task => task.assigned_to === playerId && task.status === TaskStatus.IN_PROGRESS);\n\n    // 如果有进行中的任务，更新玩家状态为ACTIVE\n    if (hasInProgressTasks) {\n      updatePlayerGameStatus(playerId, TaskStatus.IN_PROGRESS);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, playerId]);\n\n  // 修改渲染硬币的函数\n  const renderCoin = (type, isFlipping, isSmall = false, onClick, taskId) => {\n    const flipState = taskId ? flippingCoins[taskId] : undefined;\n    const isFlipped = taskId ? flippedCoins.includes(taskId) : false;\n\n    // 决定显示哪一面\n    const displayType = isFlipped ? type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS : type;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: isSmall ? 20 : 32,\n        height: isSmall ? 20 : 32,\n        borderRadius: '50%',\n        backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n        border: `${isSmall ? 1 : 2}px solid #B8860B`,\n        color: '#704214',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 'bold',\n        fontSize: isSmall ? '0.6rem' : '0.8rem',\n        perspective: 1000,\n        mb: isSmall ? 0 : 1,\n        position: 'relative',\n        cursor: onClick ? 'pointer' : 'default',\n        transition: 'transform 0.6s',\n        transformStyle: 'preserve-3d',\n        transform: flipState !== null && flipState !== void 0 && flipState.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n        '&:hover': onClick ? {\n          transform: 'scale(1.05)',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n        } : {},\n        '&:active': onClick ? {\n          transform: 'scale(0.95)'\n        } : {},\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          borderRadius: '50%',\n          background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n          pointerEvents: 'none'\n        }\n      },\n      onClick: onClick,\n      children: displayType === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染任务行\n  const renderTaskRow = (tasks, batchNum, playerStatus) => {\n    if (playerStatus === PlayerStatus.WAITING) {\n      return /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: \"Waiting for your turn...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 17\n      }, this);\n    }\n    const structure = getBatchStructure(batchNum);\n    const currentPlayer = game === null || game === void 0 ? void 0 : game.players.find(p => p.id === playerId);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: structure.map(({\n        subBatchIndex,\n        coinsCount\n      }) => {\n        var _subBatchTasks$;\n        const subBatchTasks = tasks.filter(t => t.sub_batch_number === subBatchIndex);\n        if (subBatchTasks.length === 0) return null;\n        const currentBatchTarget = ((_subBatchTasks$ = subBatchTasks[0]) === null || _subBatchTasks$ === void 0 ? void 0 : _subBatchTasks$.type) || TaskType.HEADS;\n        const flippedCount = subBatchTasks.filter(t => flippedCoins.includes(t.id)).length;\n        const isComplete = isSubBatchComplete(batchNum, subBatchIndex, (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.id) || '');\n        const canExecute = canExecuteBatch(batchNum, subBatchIndex);\n        return /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center',\n              mb: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              sx: {\n                mr: 2\n              },\n              children: [\"Sub-batch \", subBatchIndex + 1, \" (\", flippedCount, \"/\", coinsCount, \" flips)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 33\n            }, this), isComplete && (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.status) === PlayerStatus.ACTIVE && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              size: \"small\",\n              onClick: () => handleCompleteSubBatch(batchNum, subBatchIndex),\n              disabled: !canExecute,\n              children: \"Complete this batch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 1,\n              opacity: canExecute ? 1 : 0.5,\n              pointerEvents: canExecute ? 'auto' : 'none'\n            },\n            children: subBatchTasks.map(task => {\n              var _flippingCoins$task$i;\n              return /*#__PURE__*/_jsxDEV(Box, {\n                children: renderCoin(task.type, ((_flippingCoins$task$i = flippingCoins[task.id]) === null || _flippingCoins$task$i === void 0 ? void 0 : _flippingCoins$task$i.isFlipping) || false, false, () => handleCoinFlip(task.id), task.id)\n              }, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 715,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 29\n          }, this)]\n        }, `${batchNum}-${subBatchIndex}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染玩家卡片\n  const renderPlayer = player => {\n    var _currentBatchTasks$;\n    const currentBatchTasks = (game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === player.current_batch && t.assigned_to === player.id)) || [];\n    const currentBatchTarget = (_currentBatchTasks$ = currentBatchTasks[0]) === null || _currentBatchTasks$ === void 0 ? void 0 : _currentBatchTasks$.type;\n    const requiredCoins = getRequiredCoinsForBatch(player.current_batch);\n    const currentFlippedCount = currentBatchTasks.filter(t => flippedCoins.includes(t.id)).length;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: player.status,\n            color: player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\",\n            size: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 751,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2,\n            bgcolor: 'background.default',\n            p: 2,\n            borderRadius: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              mb: 1\n            },\n            children: [\"Current Round: \", player.current_batch, \" / \", game === null || game === void 0 ? void 0 : game.max_batches, currentBatchTarget && player.status === PlayerStatus.ACTIVE && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                mt: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  mr: 1\n                },\n                children: \"Required flips:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 763,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  ml: 2\n                },\n                children: requiredCoins\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 766,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 762,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 759,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: renderTaskRow(currentBatchTasks, player.current_batch, player.status)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 17\n      }, this)\n    }, player.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 745,\n      columnNumber: 13\n    }, this);\n  };\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(20);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n\n  // 添加一个辅助函数来处理毫秒到时间的转换\n  const formatTimeFromMs = ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 847,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTimeFromMs(endTime - startTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 858,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 861,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 851,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 850,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 837,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteGame = () => {\n    setShowResultPage(true);\n  };\n\n  // 修改返回主菜单的处理函数\n  const handleReturnToMainMenu = () => {\n    // 清除游戏状态\n    setGameId('');\n    setGame(null);\n    setWsService(null);\n    setStartTime(null);\n    setEndTime(null);\n    // 清除输入记录\n    setPlayerName('');\n    setPlayerCount(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const renderResultPage = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 600,\n          width: '100%',\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            mb: 3,\n            color: 'primary.main'\n          },\n          children: \"Game Complete! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            mb: 4\n          },\n          children: [\"Total Time: \", formatTimeFromMs(totalTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 923,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMainMenu,\n          size: \"large\",\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 926,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 914,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 905,\n      columnNumber: 13\n    }, this);\n  };\n  const renderStatistics = () => {\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mb: 2,\n          color: 'primary.main'\n        },\n        children: \"Game Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 943,\n        columnNumber: 17\n      }, this), Array.from({\n        length: game.max_batches\n      }, (_, i) => i + 1).map(batchNum => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: [\"Round \", batchNum]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 948,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          sx: {\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Player\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 955,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 956,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 957,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 954,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 953,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [game.players.map(player => {\n                var _player$batch_start_t, _player$batch_complet, _player$batch_start_t2;\n                const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n                const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                const hasStarted = ((_player$batch_start_t = player.batch_start_time) === null || _player$batch_start_t === void 0 ? void 0 : _player$batch_start_t[batchNum]) != null;\n                const completionTime = (_player$batch_complet = player.batch_completion_time) === null || _player$batch_complet === void 0 ? void 0 : _player$batch_complet[batchNum];\n                const startTime = (_player$batch_start_t2 = player.batch_start_time) === null || _player$batch_start_t2 === void 0 ? void 0 : _player$batch_start_t2[batchNum];\n\n                // 计算当前时间（如果批次已开始但未完成）\n                let displayTime = '-';\n                if (completionTime) {\n                  displayTime = formatTimeFromMs(completionTime);\n                } else if (hasStarted && startTime) {\n                  const currentTime = Date.now() - startTime;\n                  displayTime = formatTimeFromMs(currentTime);\n                }\n                let status = 'Pending';\n                if (isCompleted) {\n                  status = 'Completed';\n                } else if (hasStarted) {\n                  status = 'In Progress';\n                }\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: player.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 989,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: displayTime\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 990,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: /*#__PURE__*/_jsxDEV(Chip, {\n                      label: status,\n                      size: \"small\",\n                      color: isCompleted ? 'success' : hasStarted ? 'primary' : 'default'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 992,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 991,\n                    columnNumber: 49\n                  }, this)]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 988,\n                  columnNumber: 45\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(TableRow, {\n                sx: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                },\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1002,\n                    columnNumber: 52\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1002,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: formatTimeFromMs(game.players.reduce((sum, p) => {\n                      var _p$batch_completion_t;\n                      return sum + (((_p$batch_completion_t = p.batch_completion_time) === null || _p$batch_completion_t === void 0 ? void 0 : _p$batch_completion_t[batchNum]) || 0);\n                    }, 0))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1004,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1003,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1011,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1001,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 960,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 952,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 951,\n          columnNumber: 25\n        }, this)]\n      }, batchNum, true, {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 942,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 使用useMemo来记忆计算结果\n  const getTasksForBatch = React.useMemo(() => {\n    if (!(game !== null && game !== void 0 && game.tasks)) return {};\n    const tasksByBatch = {};\n    game.tasks.forEach(task => {\n      if (!tasksByBatch[task.batch_number]) {\n        tasksByBatch[task.batch_number] = [];\n      }\n      tasksByBatch[task.batch_number].push(task);\n    });\n    return tasksByBatch;\n  }, [game === null || game === void 0 ? void 0 : game.tasks]);\n\n  // 使用useMemo来记忆玩家任务\n  const getPlayerTasks = React.useMemo(() => {\n    if (!(game !== null && game !== void 0 && game.tasks) || !(game !== null && game !== void 0 && game.players)) return {};\n    const playerTasks = {};\n    game.players.forEach(player => {\n      playerTasks[player.id] = game.tasks.filter(t => t.assigned_to === player.id);\n    });\n    return playerTasks;\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players]);\n  useEffect(() => {\n    if (!(game !== null && game !== void 0 && game.tasks) || !startTime) return;\n    const newStats = {\n      ...batchStats\n    };\n\n    // 遍历每个批次\n    for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n      if (!newStats[batchNum]) {\n        newStats[batchNum] = {};\n      }\n\n      // 遍历每个玩家\n      game.players.forEach(player => {\n        const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n        const completedTasks = batchTasks.filter(t => t.status === TaskStatus.COMPLETED);\n\n        // 如果这个批次的所有任务都完成了，记录完成时间\n        if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n          // 只在第一次完成时记录时间\n          if (!newStats[batchNum][player.id]) {\n            newStats[batchNum][player.id] = {\n              completionTime: elapsedTime,\n              tasksCompleted: completedTasks.length,\n              totalTasks: batchTasks.length\n            };\n          }\n        } else if (batchTasks.length > 0) {\n          // 更新进行中的任务状态\n          newStats[batchNum][player.id] = {\n            completionTime: 0,\n            tasksCompleted: completedTasks.length,\n            totalTasks: batchTasks.length\n          };\n        }\n      });\n    }\n    setBatchStats(newStats);\n  }, [game === null || game === void 0 ? void 0 : game.tasks, startTime, elapsedTime]);\n  useEffect(() => {\n    if (!(game !== null && game !== void 0 && game.tasks) || !startTime) return;\n    const newCompletionTimes = {\n      ...batchCompletionTimes\n    };\n    const newStartTimes = {\n      ...batchStartTimes\n    };\n    let hasChanges = false;\n    Object.entries(getTasksForBatch).forEach(([batchNum, tasks]) => {\n      const batchNumber = parseInt(batchNum);\n      if (!newStartTimes[batchNumber]) {\n        newStartTimes[batchNumber] = {};\n        hasChanges = true;\n      }\n      if (!newCompletionTimes[batchNumber]) {\n        newCompletionTimes[batchNumber] = {};\n        hasChanges = true;\n      }\n      game.players.forEach(player => {\n        const playerTasks = tasks.filter(t => t.assigned_to === player.id);\n        if (playerTasks.length > 0 && playerTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[batchNumber][player.id]) {\n          var _newStartTimes$batchN;\n          const batchStartTime = ((_newStartTimes$batchN = newStartTimes[batchNumber]) === null || _newStartTimes$batchN === void 0 ? void 0 : _newStartTimes$batchN[batchNumber]) || startTime;\n          newCompletionTimes[batchNumber][player.id] = Date.now() - batchStartTime;\n          hasChanges = true;\n        }\n      });\n    });\n\n    // 只在有变化时更新状态\n    if (hasChanges) {\n      setBatchStartTimes(newStartTimes);\n      setBatchCompletionTimes(newCompletionTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.players, getTasksForBatch, startTime]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && startTime) {\n      const newStats = {\n        ...batchStats\n      };\n\n      // 遍历每个批次\n      for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n        if (!newStats[batchNum]) {\n          newStats[batchNum] = {};\n        }\n\n        // 遍历每个玩家\n        game.players.forEach(player => {\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const completedTasks = batchTasks.filter(t => t.status === TaskStatus.COMPLETED);\n\n          // 如果这个批次的所有任务都完成了，记录完成时间\n          if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n            // 只在第一次完成时记录时间\n            if (!newStats[batchNum][player.id]) {\n              newStats[batchNum][player.id] = {\n                completionTime: elapsedTime,\n                tasksCompleted: completedTasks.length,\n                totalTasks: batchTasks.length\n              };\n            }\n          } else if (batchTasks.length > 0) {\n            // 更新进行中的任务状态\n            newStats[batchNum][player.id] = {\n              completionTime: 0,\n              tasksCompleted: completedTasks.length,\n              totalTasks: batchTasks.length\n            };\n          }\n        });\n      }\n      setBatchStats(newStats);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, startTime, elapsedTime]);\n\n  // 修改统计页面中的完成时间显示\n  const renderBatchStatistics = (batchNum, player) => {\n    var _batchStats$batchNum;\n    const stats = (_batchStats$batchNum = batchStats[batchNum]) === null || _batchStats$batchNum === void 0 ? void 0 : _batchStats$batchNum[player.id];\n    return /*#__PURE__*/_jsxDEV(TableRow, {\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        children: player.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        children: stats !== null && stats !== void 0 && stats.completionTime ? formatTimeFromMs(stats.completionTime) : '-'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        children: [stats === null || stats === void 0 ? void 0 : stats.tasksCompleted, \"/\", (stats === null || stats === void 0 ? void 0 : stats.totalTasks) || 0]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1184,\n        columnNumber: 17\n      }, this)]\n    }, player.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1179,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染主菜单\n  const renderMainMenu = () => /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 600,\n      width: '100%',\n      mx: 'auto',\n      mt: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n        p: 4,\n        borderTopLeftRadius: 8,\n        borderTopRightRadius: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        sx: {\n          fontWeight: 'bold',\n          background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent',\n          textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n          textAlign: 'center',\n          mb: 1\n        },\n        children: \"Online Multiplayer Coin Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"text.secondary\",\n        align: \"center\",\n        children: \"Flip coins with your friends in this multiplayer game!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1217,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1200,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        background: '#ffffff',\n        p: 4,\n        borderBottomLeftRadius: 8,\n        borderBottomRightRadius: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Tabs, {\n        value: activeTab,\n        onChange: (e, newValue) => {\n          setActiveTab(newValue);\n          // 切换标签时也清除输入\n          setPlayerName('');\n          setPlayerCount(2);\n          setJoinGameId('');\n          setError(null);\n        },\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"CREATE GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1237,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"JOIN GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1238,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1229,\n        columnNumber: 17\n      }, this), activeTab === 0 ?\n      /*#__PURE__*/\n      // Create game form\n      _jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleCreateGame,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Name\",\n          required: true,\n          value: playerName,\n          onChange: e => setPlayerName(e.target.value),\n          sx: {\n            mb: 2\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1244,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Number of Players\",\n          type: \"number\",\n          required: true,\n          value: playerCount,\n          onChange: e => setPlayerCount(Number(e.target.value)),\n          inputProps: {\n            min: 2,\n            max: 5\n          },\n          helperText: \"Minimum 2, maximum 5 players\",\n          sx: {\n            mb: 3\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1253,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: !playerName || playerCount < 2 || playerCount > 5,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1265,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1243,\n        columnNumber: 21\n      }, this) :\n      /*#__PURE__*/\n      // Join game form\n      _jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleJoinGame,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Name\",\n          required: true,\n          value: playerName,\n          onChange: e => setPlayerName(e.target.value),\n          sx: {\n            mb: 2\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1277,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Game Code\",\n          required: true,\n          value: joinGameId,\n          onChange: e => setJoinGameId(e.target.value),\n          sx: {\n            mb: 3\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1286,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: !playerName || !joinGameId,\n          children: \"Join Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1295,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1276,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1223,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1193,\n    columnNumber: 9\n  }, this);\n  const renderGame = () => {\n    var _game$players$;\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 1,\n              color: 'primary.main'\n            },\n            children: [\"Game ID: \", game.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1322,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              color: 'text.primary'\n            },\n            children: [\"Status: \", game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1325,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1321,\n          columnNumber: 21\n        }, this), (game.status === 'in_progress' || game.status === 'completed') && startTime && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'text.secondary'\n          },\n          children: [\"Time: \", formatTimeFromMs(elapsedTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1330,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1315,\n        columnNumber: 17\n      }, this), game.status === 'waiting' && playerId === ((_game$players$ = game.players[0]) === null || _game$players$ === void 0 ? void 0 : _game$players$.id) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartGame,\n        sx: {\n          mb: 3\n        },\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1338,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 3,\n            children: game.players.map(renderPlayer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1351,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1350,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: renderStatistics()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1357,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1348,\n        columnNumber: 17\n      }, this), game.status === 'completed' && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4,\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMainMenu,\n          sx: {\n            minWidth: 200,\n            borderRadius: 2\n          },\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1365,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1364,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1313,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 获取每轮需要翻转的硬币数量\n  const getRequiredCoinsForBatch = batchNum => {\n    return 20; // 所有批次都需要20个硬币\n  };\n\n  // 获取每轮的子批次结构\n  const getBatchStructure = batchNum => {\n    const structure = {\n      1: [{\n        subBatchIndex: 0,\n        coinsCount: 20\n      }],\n      // 第1轮：1个子批次×20枚\n      2: [\n      // 第2轮：2个子批次×10枚\n      {\n        subBatchIndex: 0,\n        coinsCount: 10\n      }, {\n        subBatchIndex: 1,\n        coinsCount: 10\n      }],\n      3: [\n      // 第3轮：4个子批次×5枚\n      {\n        subBatchIndex: 0,\n        coinsCount: 5\n      }, {\n        subBatchIndex: 1,\n        coinsCount: 5\n      }, {\n        subBatchIndex: 2,\n        coinsCount: 5\n      }, {\n        subBatchIndex: 3,\n        coinsCount: 5\n      }],\n      4: Array.from({\n        length: 10\n      }, (_, i) => ({\n        // 第4轮：10个子批次×2枚\n        subBatchIndex: i,\n        coinsCount: 2\n      }))\n    };\n    return structure[batchNum] || [];\n  };\n\n  // 获取当前子批次的硬币数量\n  const getSubBatchSize = (batchNum, subBatchIndex) => {\n    const structure = getBatchStructure(batchNum);\n    const subBatch = structure.find(sb => sb.subBatchIndex === subBatchIndex);\n    return (subBatch === null || subBatch === void 0 ? void 0 : subBatch.coinsCount) || 0;\n  };\n\n  // 检查子批次是否完成\n  const isSubBatchComplete = (batchNum, subBatchIndex, playerId) => {\n    if (!game) return false;\n    const subBatchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.sub_batch_number === subBatchIndex && t.assigned_to === playerId);\n    const flippedCount = subBatchTasks.filter(t => flippedCoins.includes(t.id)).length;\n    return flippedCount >= getSubBatchSize(batchNum, subBatchIndex);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [!gameId ? renderMainMenu() : game ? renderGame() : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1434,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mt: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1438,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1428,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"b4Y1QVQiNaor9rTHG/K6M+8K/dc=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","keyframes","Stack","TableContainer","Table","TableHead","TableBody","TableCell","TableRow","Paper","Container","CircularProgress","TaskStatus","PlayerStatus","TaskType","gameService","WebSocketService","jsxDEV","_jsxDEV","Game","gameId","initialGameId","_s","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","currentTime","setCurrentTime","showResultPage","setShowResultPage","batchCompletionTimes","setBatchCompletionTimes","batchStartTimes","setBatchStartTimes","batchFlipStates","setBatchFlipStates","flippedCoins","setFlippedCoins","pendingBatchCompletion","setPendingBatchCompletion","flipStates","setFlipStates","flippingCoins","setFlippingCoins","elapsedTime","setElapsedTime","batchStats","setBatchStats","service","updatedGame","console","log","connect","disconnect","status","Date","now","timerInterval","setInterval","prev","clearInterval","intervalId","tasks","players","newStartTimes","newCompletionTimes","hasChanges","forEach","player","current_batch","batch_start_time","Object","entries","batchNum","Number","max_batches","_newStartTimes$player","batchTasks","filter","t","batch_number","assigned_to","id","startedAt","length","every","COMPLETED","shouldUpdate","currentFlippedCoins","playerTasks","currentBatchTasks","PENDING","prevBatchTasks","prevBatchTaskIds","map","newFlippedCoins","includes","push","handleGameUpdate","handleCreateGame","e","preventDefault","createGame","joinGame","ws","initialGameState","getGameState","err","Error","message","handleJoinGame","exists","checkGameExists","gameState","handleStartGame","startGame","flipAnimation","renderTargetCoin","type","sx","width","xs","sm","height","borderRadius","border","theme","palette","primary","main","display","alignItems","justifyContent","backgroundColor","background","paper","color","text","fontSize","fontWeight","marginBottom","marginRight","children","HEADS","fileName","_jsxFileName","lineNumber","columnNumber","isBatchAllFlipped","handleCoinFlip","coinId","currentPlayer","find","p","ACTIVE","currentBatch","requiredCoins","getRequiredCoinsForBatch","currentBatchFlips","isFlipping","flipCoin","newState","handleCompleteBatch","pendingTasks","taskId","completeTask","handleCompleteSubBatch","subBatchIndex","canExecuteBatch","currentPlayerIndex","findIndex","nextPlayerIndex","nextPlayer","updatedTasks","task","sub_batch_number","IN_PROGRESS","hasRemainingTasks","some","nextPlayerHasInProgressTasks","updatedPlayers","WAITING","updateGame","previousSubBatches","updatePlayerGameStatus","playerIndex","hasInProgressTasks","renderCoin","isSmall","onClick","flipState","undefined","isFlipped","displayType","TAILS","perspective","mb","position","cursor","transition","transformStyle","transform","boxShadow","content","top","left","right","bottom","pointerEvents","renderTaskRow","playerStatus","variant","structure","getBatchStructure","coinsCount","_subBatchTasks$","subBatchTasks","currentBatchTarget","flippedCount","isComplete","isSubBatchComplete","canExecute","mr","size","disabled","flexWrap","gap","opacity","_flippingCoins$task$i","renderPlayer","_currentBatchTasks$","currentFlippedCount","name","label","bgcolor","mt","ml","getPlayerStatusColor","IDLE","getTaskStatusColor","handleTabChange","_","newValue","handleGameComplete","formatTimeFromMs","ms","totalSeconds","Math","floor","minutes","seconds","toString","padStart","renderCompletionDialog","totalTime","open","onClose","PaperProps","textAlign","flexDirection","py","window","location","reload","handleCompleteGame","handleReturnToMainMenu","renderResultPage","minHeight","maxWidth","renderStatistics","Array","from","i","component","align","_player$batch_start_t","_player$batch_complet","_player$batch_start_t2","isCompleted","hasStarted","completionTime","batch_completion_time","displayTime","reduce","sum","_p$batch_completion_t","getTasksForBatch","useMemo","tasksByBatch","getPlayerTasks","newStats","completedTasks","tasksCompleted","totalTasks","batchNumber","parseInt","_newStartTimes$batchN","batchStartTime","renderBatchStatistics","_batchStats$batchNum","stats","renderMainMenu","mx","borderTopLeftRadius","borderTopRightRadius","WebkitBackgroundClip","WebkitTextFillColor","textShadow","borderBottomLeftRadius","borderBottomRightRadius","value","onChange","onSubmit","fullWidth","required","target","autoComplete","inputProps","min","max","helperText","renderGame","_game$players$","container","spacing","item","md","minWidth","getSubBatchSize","subBatch","sb","severity","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game 2/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes,\n    Stack,\n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableCell,\n    TableRow,\n    Paper,\n    Container,\n    CircularProgress\n} from '@mui/material';\nimport { Game as GameType, Player, Task, TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\n\ninterface GameProps {\n    gameId?: string;\n}\n\ntype TabType = 0 | 1;\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | undefined>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(20);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState<TabType>(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n    const [batchCompletionTimes, setBatchCompletionTimes] = useState<{[key: number]: {[key: string]: number}}>({});\n    const [batchStartTimes, setBatchStartTimes] = useState<{[key: number]: {[key: number]: number}}>({});\n    const [batchFlipStates, setBatchFlipStates] = useState<{\n        [batchNum: number]: {\n            [taskId: string]: boolean;  // true means flipped\n        };\n    }>({});\n\n    // 添加状态来跟踪硬币的翻转状态和批次完成状态\n    const [flippedCoins, setFlippedCoins] = useState<string[]>([]);\n    const [pendingBatchCompletion, setPendingBatchCompletion] = useState<{\n        [batchNum: number]: string[];  // batchNum -> taskIds\n    }>({});\n\n    // 添加翻转动画状态\n    interface FlipState {\n        isFlipping: boolean;\n        showOpposite: boolean;\n    }\n    const [flipStates, setFlipStates] = useState<{\n        [key: string]: FlipState;\n    }>({});\n\n    // 添加翻转动画状态\n    const [flippingCoins, setFlippingCoins] = useState<{[key: string]: { isFlipping: boolean }}>({});\n\n    // 修改计时器状态和开始时间状态\n    const [elapsedTime, setElapsedTime] = useState<number>(0);\n\n    // 添加批次统计时间的状态\n    const [batchStats, setBatchStats] = useState<{\n        [batchNum: number]: {\n            [playerId: string]: {\n                completionTime: number;\n                tasksCompleted: number;\n                totalTasks: number;\n            }\n        }\n    }>({});\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, (updatedGame) => {\n                console.log('Game state updated:', updatedGame);\n                setGame(updatedGame);\n            });\n            service.connect();\n            setWsService(service);\n\n            // Cleanup function\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && startTime) {\n            timerInterval = setInterval(() => {\n                setCurrentTime(prev => Date.now() - startTime);\n            }, 1000);\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, startTime, endTime]);\n\n    useEffect(() => {\n        let intervalId: NodeJS.Timeout;\n        \n        if (startTime && game?.status === 'in_progress') {\n            intervalId = setInterval(() => {\n                setElapsedTime(prev => Date.now() - startTime);\n            }, 1000);\n        }\n        \n        return () => {\n            if (intervalId) {\n                clearInterval(intervalId);\n            }\n        };\n    }, [startTime, game?.status]);\n\n    useEffect(() => {\n        if (game?.tasks && game.players) {\n            const newStartTimes = { ...batchStartTimes };\n            const newCompletionTimes = { ...batchCompletionTimes };\n            let hasChanges = false;\n\n            game.players.forEach(player => {\n                if (!newStartTimes[player.current_batch]) {\n                    newStartTimes[player.current_batch] = {};\n                    hasChanges = true;\n                }\n                if (!newCompletionTimes[player.current_batch]) {\n                    newCompletionTimes[player.current_batch] = {};\n                    hasChanges = true;\n                }\n\n                // 使用后端提供的批次开始时间\n                if (player.batch_start_time) {\n                    Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n                        if (newStartTimes[player.current_batch][Number(batchNum)] !== startTime) {\n                            newStartTimes[player.current_batch][Number(batchNum)] = startTime;\n                            hasChanges = true;\n                        }\n                    });\n                }\n\n                // Calculate completion times for each batch\n                for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const startedAt = newStartTimes[player.current_batch]?.[batchNum];\n                    if (startedAt && \n                        batchTasks.length > 0 && \n                        batchTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                        !newCompletionTimes[player.current_batch][player.id]) {\n                        newCompletionTimes[player.current_batch][player.id] = Date.now() - startedAt;\n                        hasChanges = true;\n                    }\n                }\n            });\n\n            // 只在有变化时更新状态\n            if (hasChanges) {\n                setBatchStartTimes(newStartTimes);\n                setBatchCompletionTimes(newCompletionTimes);\n            }\n        }\n    }, [game?.tasks, game?.players, game?.max_batches]);\n\n    useEffect(() => {\n        if (game?.tasks) {\n            let shouldUpdate = false;\n            const currentFlippedCoins = [...flippedCoins];\n\n            // 检查是否有新的批次开始\n            game.players.forEach(player => {\n                const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n                const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n                \n                // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                    // 清理上一个批次的翻转状态\n                    const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n                    const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n                    const newFlippedCoins = currentFlippedCoins.filter(id => !prevBatchTaskIds.includes(id));\n                    if (newFlippedCoins.length !== currentFlippedCoins.length) {\n                        currentFlippedCoins.length = 0;\n                        currentFlippedCoins.push(...newFlippedCoins);\n                        shouldUpdate = true;\n                    }\n                }\n            });\n\n            // 只在有变化时更新状态\n            if (shouldUpdate) {\n                setFlippedCoins(currentFlippedCoins);\n            }\n        }\n    }, [game?.tasks]);\n\n    // 添加错误处理函数\n    const handleGameUpdate = (updatedGame: GameType) => {\n        setGame(updatedGame);\n        if (updatedGame.status === 'completed' && !endTime) {\n            setEndTime(Date.now());\n        }\n    };\n\n    const handleCreateGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            // 创建游戏\n            const gameId = await gameService.createGame(playerCount, 4, 0);\n            if (gameId) {\n                // 加入游戏\n                const playerId = await gameService.joinGame(gameId, playerName);\n                \n                // 更新状态\n                setGameId(gameId);\n                setPlayerId(playerId);\n                \n                // 创建WebSocket连接\n                const ws = new WebSocketService(\n                    gameId,\n                    playerName,\n                    handleGameUpdate\n                );\n                setWsService(ws);\n                \n                // 获取初始游戏状态\n                const initialGameState = await gameService.getGameState(gameId);\n                setGame(initialGameState);\n                \n                // 设置开始时间\n                setStartTime(Date.now());\n                \n                console.log('Game created successfully:', { gameId, playerId });\n            }\n        } catch (err) {\n            console.error('Error creating game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to create game');\n        }\n    };\n\n    const handleJoinGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            if (joinGameId) {\n                // 检查游戏是否存在\n                const exists = await gameService.checkGameExists(joinGameId);\n                if (!exists) {\n                    setError('Game not found');\n                    return;\n                }\n                \n                // 加入游戏\n                const playerId = await gameService.joinGame(joinGameId, playerName);\n                \n                // 更新状态\n                setGameId(joinGameId);\n                setPlayerId(playerId);\n                \n                // 创建WebSocket连接\n                const ws = new WebSocketService(\n                    joinGameId,\n                    playerName,\n                    handleGameUpdate\n                );\n                setWsService(ws);\n                \n                // 获取游戏状态\n                const gameState = await gameService.getGameState(joinGameId);\n                setGame(gameState);\n                \n                // 设置开始时间\n                setStartTime(Date.now());\n                \n                console.log('Joined game successfully:', { gameId: joinGameId, playerId });\n            }\n        } catch (err) {\n            console.error('Error joining game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to join game');\n        }\n    };\n\n    const handleStartGame = async () => {\n        if (!gameId) return;\n        \n        try {\n            await gameService.startGame(gameId);\n            const currentTime = Date.now();\n            setStartTime(currentTime);\n            setBatchStartTimes(prev => ({\n                ...prev,\n                1: { 1: currentTime }\n            }));\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Failed to start game');\n        }\n    };\n\n    const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n    // 添加一个专门用于渲染目标硬币的函数\n    const renderTargetCoin = (type: TaskType) => {\n        return (\n            <Box\n                sx={{\n                    width: { xs: '20px', sm: '32px' },\n                    height: { xs: '20px', sm: '32px' },\n                    borderRadius: '50%',\n                    border: theme => ({\n                        xs: `1px solid ${theme.palette.primary.main}`,\n                        sm: `2px solid ${theme.palette.primary.main}`\n                    }),\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    backgroundColor: theme => theme.palette.background.paper,\n                    color: theme => theme.palette.text.primary,\n                    fontSize: { xs: '0.7rem', sm: '0.9rem' },\n                    fontWeight: 'bold',\n                    marginBottom: { xs: 0, sm: 1 },\n                    marginRight: 1\n                }}\n            >\n                {type === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 检查批次是否所有硬币都已翻转\n    const isBatchAllFlipped = (batchNum: number, playerId: string) => {\n        const batchTasks = game?.tasks.filter(t => \n            t.batch_number === batchNum && \n            t.assigned_to === playerId\n        );\n        return batchTasks?.every(t => flippedCoins.includes(t.id)) || false;\n    };\n\n    // 处理硬币翻转\n    const handleCoinFlip = async (coinId: string) => {\n        if (!game || !playerId) return;\n        \n        // 检查是否是当前玩家的回合\n        const currentPlayer = game.players.find(p => p.id === playerId);\n        if (currentPlayer?.status !== PlayerStatus.ACTIVE) return;\n        \n        // 获取当前批次需要翻转的硬币数量\n        const currentBatch = currentPlayer.current_batch;\n        const requiredCoins = getRequiredCoinsForBatch(currentBatch);\n        \n        // 如果已经翻转了足够的硬币，不允许继续翻转\n        const currentBatchFlips = flippedCoins.filter(id => \n            game.tasks.find(t => \n                t.id === id && \n                t.batch_number === currentBatch && \n                t.assigned_to === playerId\n            )\n        ).length;\n        \n        if (currentBatchFlips >= requiredCoins) return;\n        \n        try {\n            // 更新本地状态\n            setFlippedCoins(prev => [...prev, coinId]);\n            \n            // 更新翻转动画状态\n            setFlippingCoins(prev => ({\n                ...prev,\n                [coinId]: {\n                    isFlipping: true,\n                }\n            }));\n\n            // 发送翻转请求到服务器\n            await gameService.flipCoin(game.id, coinId);\n        } catch (error) {\n            console.error('Error flipping coin:', error);\n            // 如果失败，回滚本地状态\n            setFlippedCoins(prev => prev.filter(id => id !== coinId));\n            setFlippingCoins(prev => {\n                const newState = { ...prev };\n                delete newState[coinId];\n                return newState;\n            });\n        }\n    };\n\n    // 处理批次完成\n    const handleCompleteBatch = (batchNum: number) => {\n        const pendingTasks = pendingBatchCompletion[batchNum] || [];\n        if (pendingTasks.length === 0) return;\n\n        // 发送所有任务完成的请求\n        pendingTasks.forEach(taskId => {\n            if (wsService) {\n                wsService.completeTask(taskId);\n            }\n        });\n\n        // 清理这个批次的待完成状态\n        setPendingBatchCompletion(prev => {\n            const newState = { ...prev };\n            delete newState[batchNum];\n            return newState;\n        });\n    };\n\n    // 处理完成子批次\n    const handleCompleteSubBatch = async (batchNum: number, subBatchIndex: number) => {\n        if (!game || !playerId) return;\n        \n        try {\n            // 检查是否可以执行这个批次\n            if (!canExecuteBatch(batchNum, subBatchIndex)) {\n                setError('Please complete previous batches first');\n                return;\n            }\n\n            // 将当前子批次的任务传递给下一个玩家\n            const currentPlayerIndex = game.players.findIndex(p => p.id === playerId);\n            const nextPlayerIndex = (currentPlayerIndex + 1) % game.players.length;\n            const nextPlayer = game.players[nextPlayerIndex];\n\n            // 更新任务分配和玩家状态\n            const updatedTasks = game.tasks.map(task => {\n                // 只更新当前子批次的任务\n                if (task.batch_number === batchNum && \n                    task.sub_batch_number === subBatchIndex && \n                    task.assigned_to === playerId) {\n                    // 将任务转移给下一个玩家并标记为进行中\n                    return {\n                        ...task,\n                        assigned_to: nextPlayer.id,\n                        status: TaskStatus.IN_PROGRESS  // 设置为进行中，这样下一个玩家可以继续\n                    };\n                }\n                return task;\n            });\n\n            // 检查当前玩家是否还有其他未完成的任务\n            const hasRemainingTasks = updatedTasks.some(task => \n                task.assigned_to === playerId && \n                task.status !== TaskStatus.COMPLETED\n            );\n\n            // 检查下一个玩家是否有进行中的任务\n            const nextPlayerHasInProgressTasks = updatedTasks.some(task =>\n                task.assigned_to === nextPlayer.id &&\n                task.status === TaskStatus.IN_PROGRESS\n            );\n\n            // 更新玩家状态\n            const updatedPlayers = game.players.map(player => {\n                if (player.id === playerId) {\n                    // 如果还有其他任务，保持ACTIVE状态继续执行\n                    return {\n                        ...player,\n                        status: hasRemainingTasks ? PlayerStatus.ACTIVE : PlayerStatus.WAITING\n                    };\n                }\n                if (player.id === nextPlayer.id) {\n                    // 将下一个玩家设置为活动状态，这样他可以开始执行接收到的批次\n                    return {\n                        ...player,\n                        status: nextPlayerHasInProgressTasks ? PlayerStatus.ACTIVE : PlayerStatus.WAITING\n                    };\n                }\n                return player;\n            });\n\n            // 更新游戏状态\n            const updatedGame = {\n                ...game,\n                tasks: updatedTasks,\n                players: updatedPlayers,\n                status: 'IN_PROGRESS'  // 保持游戏状态为进行中\n            };\n\n            // 发送更新到服务器\n            await gameService.updateGame(game.id, updatedGame);\n            \n            // 更新本地状态\n            setGame(updatedGame);\n        } catch (error) {\n            console.error('Error completing sub-batch:', error);\n            setError('Failed to complete sub-batch');\n        }\n    };\n\n    // 检查当前批次是否可以执行\n    const canExecuteBatch = (batchNum: number, subBatchIndex: number): boolean => {\n        if (!game || !playerId) return false;\n\n        // 获取当前玩家的所有任务\n        const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n        \n        // 获取所有之前的子批次\n        const previousSubBatches = playerTasks.filter(t => \n            (t.batch_number < batchNum) || \n            (t.batch_number === batchNum && t.sub_batch_number < subBatchIndex)\n        );\n\n        // 如果还有之前的子批次未完成，则不能执行当前批次\n        return !previousSubBatches.some(t => t.status !== TaskStatus.COMPLETED);\n    };\n\n    // 更新玩家在游戏中的状态\n    const updatePlayerGameStatus = (playerId: string, status: TaskStatus) => {\n        if (!game) return;\n        \n        const playerIndex = game.players.findIndex(p => p.id === playerId);\n        if (playerIndex === -1) return;\n        \n        // 更新玩家状态\n        const updatedPlayers = game.players.map(player => {\n            if (player.id === playerId) {\n                return {\n                    ...player,\n                    status: status === TaskStatus.IN_PROGRESS ? PlayerStatus.ACTIVE : PlayerStatus.WAITING\n                };\n            }\n            return player;\n        });\n\n        setGame(prev => prev ? {\n            ...prev,\n            players: updatedPlayers\n        } : prev);\n    };\n\n    // 监听游戏状态变化\n    useEffect(() => {\n        if (!game || !playerId) return;\n\n        // 检查当前玩家是否有进行中的任务\n        const hasInProgressTasks = game.tasks.some(task =>\n            task.assigned_to === playerId &&\n            task.status === TaskStatus.IN_PROGRESS\n        );\n\n        // 如果有进行中的任务，更新玩家状态为ACTIVE\n        if (hasInProgressTasks) {\n            updatePlayerGameStatus(playerId, TaskStatus.IN_PROGRESS);\n        }\n    }, [game?.tasks, playerId]);\n\n    // 修改渲染硬币的函数\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void, taskId?: string) => {\n        const flipState = taskId ? flippingCoins[taskId] : undefined;\n        const isFlipped = taskId ? flippedCoins.includes(taskId) : false;\n        \n        // 决定显示哪一面\n        const displayType = isFlipped\n            ? (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) \n            : type;\n\n        return (\n            <Box\n                sx={{\n                    width: isSmall ? 20 : 32,\n                    height: isSmall ? 20 : 32,\n                    borderRadius: '50%',\n                    backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                    border: `${isSmall ? 1 : 2}px solid #B8860B`,\n                    color: '#704214',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontWeight: 'bold',\n                    fontSize: isSmall ? '0.6rem' : '0.8rem',\n                    perspective: 1000,\n                    mb: isSmall ? 0 : 1,\n                    position: 'relative',\n                    cursor: onClick ? 'pointer' : 'default',\n                    transition: 'transform 0.6s',\n                    transformStyle: 'preserve-3d',\n                    transform: flipState?.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n                    '&:hover': onClick ? {\n                        transform: 'scale(1.05)',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                    } : {},\n                    '&:active': onClick ? {\n                        transform: 'scale(0.95)'\n                    } : {},\n                    '&::after': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        borderRadius: '50%',\n                        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                        pointerEvents: 'none'\n                    }\n                }}\n                onClick={onClick}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 渲染任务行\n    const renderTaskRow = (tasks: Task[], batchNum: number, playerStatus: PlayerStatus) => {\n        if (playerStatus === PlayerStatus.WAITING) {\n            return (\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                    Waiting for your turn...\n                </Typography>\n            );\n        }\n\n        const structure = getBatchStructure(batchNum);\n        const currentPlayer = game?.players.find(p => p.id === playerId);\n        \n        return (\n            <Box>\n                {structure.map(({ subBatchIndex, coinsCount }) => {\n                    const subBatchTasks = tasks.filter(t => t.sub_batch_number === subBatchIndex);\n                    if (subBatchTasks.length === 0) return null;\n\n                    const currentBatchTarget = subBatchTasks[0]?.type || TaskType.HEADS;\n                    const flippedCount = subBatchTasks.filter(t => flippedCoins.includes(t.id)).length;\n                    const isComplete = isSubBatchComplete(batchNum, subBatchIndex, currentPlayer?.id || '');\n                    const canExecute = canExecuteBatch(batchNum, subBatchIndex);\n                    \n                    return (\n                        <Box key={`${batchNum}-${subBatchIndex}`} sx={{ mb: 2 }}>\n                            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                                <Typography variant=\"subtitle1\" sx={{ mr: 2 }}>\n                                    Sub-batch {subBatchIndex + 1} ({flippedCount}/{coinsCount} flips)\n                                </Typography>\n                                {isComplete && currentPlayer?.status === PlayerStatus.ACTIVE && (\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        size=\"small\"\n                                        onClick={() => handleCompleteSubBatch(batchNum, subBatchIndex)}\n                                        disabled={!canExecute}\n                                    >\n                                        Complete this batch\n                                    </Button>\n                                )}\n                            </Box>\n                            <Box sx={{ \n                                display: 'flex', \n                                flexWrap: 'wrap', \n                                gap: 1,\n                                opacity: canExecute ? 1 : 0.5,\n                                pointerEvents: canExecute ? 'auto' : 'none'\n                            }}>\n                                {subBatchTasks.map((task) => (\n                                    <Box key={task.id}>\n                                        {renderCoin(\n                                            task.type,\n                                            flippingCoins[task.id]?.isFlipping || false,\n                                            false,\n                                            () => handleCoinFlip(task.id),\n                                            task.id\n                                        )}\n                                    </Box>\n                                ))}\n                            </Box>\n                        </Box>\n                    );\n                })}\n            </Box>\n        );\n    };\n\n    // 渲染玩家卡片\n    const renderPlayer = (player: Player) => {\n        const currentBatchTasks = game?.tasks.filter(t => \n            t.batch_number === player.current_batch && \n            t.assigned_to === player.id\n        ) || [];\n\n        const currentBatchTarget = currentBatchTasks[0]?.type;\n        const requiredCoins = getRequiredCoinsForBatch(player.current_batch);\n        const currentFlippedCount = currentBatchTasks.filter(t => flippedCoins.includes(t.id)).length;\n\n        return (\n            <Card key={player.id} sx={{ mb: 2 }}>\n                <CardContent>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                        <Typography variant=\"h6\">\n                            {player.name}\n                        </Typography>\n                        <Chip \n                            label={player.status}\n                            color={player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\"}\n                            size=\"small\"\n                        />\n                    </Box>\n\n                    <Box sx={{ mb: 2, bgcolor: 'background.default', p: 2, borderRadius: 1 }}>\n                        <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n                            Current Round: {player.current_batch} / {game?.max_batches}\n                            {currentBatchTarget && player.status === PlayerStatus.ACTIVE && (\n                                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\n                                    <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                                        Required flips:\n                                    </Typography>\n                                    <Typography variant=\"body2\" sx={{ ml: 2 }}>\n                                        {requiredCoins}\n                                    </Typography>\n                                </Box>\n                            )}\n                        </Typography>\n\n                        <Box sx={{ mb: 2 }}>\n                            {renderTaskRow(currentBatchTasks, player.current_batch, player.status)}\n                        </Box>\n                    </Box>\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue as TabType);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(20);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    // 添加一个辅助函数来处理毫秒到时间的转换\n    const formatTimeFromMs = (ms: number) => {\n        const totalSeconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed!\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTimeFromMs(endTime - startTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    // 修改返回主菜单的处理函数\n    const handleReturnToMainMenu = () => {\n        // 清除游戏状态\n        setGameId('');\n        setGame(null);\n        setWsService(null);\n        setStartTime(null);\n        setEndTime(null);\n        // 清除输入记录\n        setPlayerName('');\n        setPlayerCount(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTimeFromMs(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMainMenu}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    const renderStatistics = () => {\n        if (!game) return null;\n\n        return (\n            <Box sx={{ p: 2 }}>\n                <Typography variant=\"h6\" sx={{ mb: 2, color: 'primary.main' }}>\n                    Game Statistics\n                </Typography>\n                {Array.from({ length: game.max_batches }, (_, i) => i + 1).map(batchNum => (\n                    <Box key={batchNum} sx={{ mb: 3 }}>\n                        <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                            Round {batchNum}\n                        </Typography>\n                        <TableContainer component={Paper} sx={{ mb: 2 }}>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Player</TableCell>\n                                        <TableCell align=\"right\">Time</TableCell>\n                                        <TableCell align=\"right\">Status</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {game.players.map(player => {\n                                        const batchTasks = game.tasks.filter(t => \n                                            t.batch_number === batchNum && \n                                            t.assigned_to === player.id\n                                        );\n                                        const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                                        const hasStarted = player.batch_start_time?.[batchNum] != null;\n                                        const completionTime = player.batch_completion_time?.[batchNum];\n                                        const startTime = player.batch_start_time?.[batchNum];\n                                        \n                                        // 计算当前时间（如果批次已开始但未完成）\n                                        let displayTime = '-';\n                                        if (completionTime) {\n                                            displayTime = formatTimeFromMs(completionTime);\n                                        } else if (hasStarted && startTime) {\n                                            const currentTime = Date.now() - startTime;\n                                            displayTime = formatTimeFromMs(currentTime);\n                                        }\n\n                                        let status = 'Pending';\n                                        if (isCompleted) {\n                                            status = 'Completed';\n                                        } else if (hasStarted) {\n                                            status = 'In Progress';\n                                        }\n\n                                        return (\n                                            <TableRow key={player.id}>\n                                                <TableCell>{player.name}</TableCell>\n                                                <TableCell align=\"right\">{displayTime}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Chip \n                                                        label={status}\n                                                        size=\"small\"\n                                                        color={isCompleted ? 'success' : (hasStarted ? 'primary' : 'default')}\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                    <TableRow sx={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}>\n                                        <TableCell><strong>Total</strong></TableCell>\n                                        <TableCell align=\"right\">\n                                            <strong>\n                                                {formatTimeFromMs(game.players.reduce((sum, p) => \n                                                    sum + (p.batch_completion_time?.[batchNum] || 0), \n                                                    0\n                                                ))}\n                                            </strong>\n                                        </TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    // 使用useMemo来记忆计算结果\n    const getTasksForBatch = React.useMemo(() => {\n        if (!game?.tasks) return {};\n        const tasksByBatch: { [key: number]: Task[] } = {};\n        game.tasks.forEach(task => {\n            if (!tasksByBatch[task.batch_number]) {\n                tasksByBatch[task.batch_number] = [];\n            }\n            tasksByBatch[task.batch_number].push(task);\n        });\n        return tasksByBatch;\n    }, [game?.tasks]);\n\n    // 使用useMemo来记忆玩家任务\n    const getPlayerTasks = React.useMemo(() => {\n        if (!game?.tasks || !game?.players) return {};\n        const playerTasks: { [key: string]: Task[] } = {};\n        game.players.forEach(player => {\n            playerTasks[player.id] = game.tasks.filter(t => t.assigned_to === player.id);\n        });\n        return playerTasks;\n    }, [game?.tasks, game?.players]);\n\n    useEffect(() => {\n        if (!game?.tasks || !startTime) return;\n\n        const newStats = { ...batchStats };\n        \n        // 遍历每个批次\n        for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n            if (!newStats[batchNum]) {\n                newStats[batchNum] = {};\n            }\n            \n            // 遍历每个玩家\n            game.players.forEach(player => {\n                const batchTasks = game.tasks.filter(t => \n                    t.batch_number === batchNum && \n                    t.assigned_to === player.id\n                );\n                \n                const completedTasks = batchTasks.filter(t => \n                    t.status === TaskStatus.COMPLETED\n                );\n                \n                // 如果这个批次的所有任务都完成了，记录完成时间\n                if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n                    // 只在第一次完成时记录时间\n                    if (!newStats[batchNum][player.id]) {\n                        newStats[batchNum][player.id] = {\n                            completionTime: elapsedTime,\n                            tasksCompleted: completedTasks.length,\n                            totalTasks: batchTasks.length\n                        };\n                    }\n                } else if (batchTasks.length > 0) {\n                    // 更新进行中的任务状态\n                    newStats[batchNum][player.id] = {\n                        completionTime: 0,\n                        tasksCompleted: completedTasks.length,\n                        totalTasks: batchTasks.length\n                    };\n                }\n            });\n        }\n        \n        setBatchStats(newStats);\n    }, [game?.tasks, startTime, elapsedTime]);\n\n    useEffect(() => {\n        if (!game?.tasks || !startTime) return;\n\n        const newCompletionTimes = { ...batchCompletionTimes };\n        const newStartTimes = { ...batchStartTimes };\n        let hasChanges = false;\n\n        Object.entries(getTasksForBatch).forEach(([batchNum, tasks]) => {\n            const batchNumber = parseInt(batchNum);\n            if (!newStartTimes[batchNumber]) {\n                newStartTimes[batchNumber] = {};\n                hasChanges = true;\n            }\n            if (!newCompletionTimes[batchNumber]) {\n                newCompletionTimes[batchNumber] = {};\n                hasChanges = true;\n            }\n\n            game.players.forEach(player => {\n                const playerTasks = tasks.filter(t => t.assigned_to === player.id);\n                if (playerTasks.length > 0 && \n                    playerTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                    !newCompletionTimes[batchNumber][player.id]) {\n                    const batchStartTime = newStartTimes[batchNumber]?.[batchNumber] || startTime;\n                    newCompletionTimes[batchNumber][player.id] = Date.now() - batchStartTime;\n                    hasChanges = true;\n                }\n            });\n        });\n\n        // 只在有变化时更新状态\n        if (hasChanges) {\n            setBatchStartTimes(newStartTimes);\n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.players, getTasksForBatch, startTime]);\n\n    useEffect(() => {\n        if (game?.tasks && startTime) {\n            const newStats = { ...batchStats };\n            \n            // 遍历每个批次\n            for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n                if (!newStats[batchNum]) {\n                    newStats[batchNum] = {};\n                }\n                \n                // 遍历每个玩家\n                game.players.forEach(player => {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const completedTasks = batchTasks.filter(t => \n                        t.status === TaskStatus.COMPLETED\n                    );\n                    \n                    // 如果这个批次的所有任务都完成了，记录完成时间\n                    if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n                        // 只在第一次完成时记录时间\n                        if (!newStats[batchNum][player.id]) {\n                            newStats[batchNum][player.id] = {\n                                completionTime: elapsedTime,\n                                tasksCompleted: completedTasks.length,\n                                totalTasks: batchTasks.length\n                            };\n                        }\n                    } else if (batchTasks.length > 0) {\n                        // 更新进行中的任务状态\n                        newStats[batchNum][player.id] = {\n                            completionTime: 0,\n                            tasksCompleted: completedTasks.length,\n                            totalTasks: batchTasks.length\n                        };\n                    }\n                });\n            }\n            \n            setBatchStats(newStats);\n        }\n    }, [game?.tasks, startTime, elapsedTime]);\n\n    // 修改统计页面中的完成时间显示\n    const renderBatchStatistics = (batchNum: number, player: Player) => {\n        const stats = batchStats[batchNum]?.[player.id];\n        \n        return (\n            <TableRow key={player.id}>\n                <TableCell>{player.name}</TableCell>\n                <TableCell align=\"right\">\n                    {stats?.completionTime ? formatTimeFromMs(stats.completionTime) : '-'}\n                </TableCell>\n                <TableCell align=\"right\">\n                    {stats?.tasksCompleted}/{stats?.totalTasks || 0}\n                </TableCell>\n            </TableRow>\n        );\n    };\n\n    // 渲染主菜单\n    const renderMainMenu = () => (\n        <Card sx={{\n            maxWidth: 600,\n            width: '100%',\n            mx: 'auto',\n            mt: 4\n        }}>\n            {/* Top section with title and subtitle */}\n            <Box sx={{\n                background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n                p: 4,\n                borderTopLeftRadius: 8,\n                borderTopRightRadius: 8\n            }}>\n                <Typography variant=\"h3\" sx={{\n                    fontWeight: 'bold',\n                    background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n                    WebkitBackgroundClip: 'text',\n                    WebkitTextFillColor: 'transparent',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n                    textAlign: 'center',\n                    mb: 1\n                }}>\n                    Online Multiplayer Coin Game\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"text.secondary\" align=\"center\">\n                    Flip coins with your friends in this multiplayer game!\n                </Typography>\n            </Box>\n\n            {/* Bottom section with form */}\n            <Box sx={{\n                background: '#ffffff',\n                p: 4,\n                borderBottomLeftRadius: 8,\n                borderBottomRightRadius: 8\n            }}>\n                <Tabs value={activeTab} onChange={(e, newValue) => {\n                    setActiveTab(newValue as TabType);\n                    // 切换标签时也清除输入\n                    setPlayerName('');\n                    setPlayerCount(2);\n                    setJoinGameId('');\n                    setError(null);\n                }} sx={{ mb: 3 }}>\n                    <Tab label=\"CREATE GAME\" />\n                    <Tab label=\"JOIN GAME\" />\n                </Tabs>\n\n                {activeTab === 0 ? (\n                    // Create game form\n                    <Box component=\"form\" onSubmit={handleCreateGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Number of Players\"\n                            type=\"number\"\n                            required\n                            value={playerCount}\n                            onChange={(e) => setPlayerCount(Number(e.target.value))}\n                            inputProps={{ min: 2, max: 5 }}\n                            helperText=\"Minimum 2, maximum 5 players\"\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || playerCount < 2 || playerCount > 5}\n                        >\n                            Create Game\n                        </Button>\n                    </Box>\n                ) : (\n                    // Join game form\n                    <Box component=\"form\" onSubmit={handleJoinGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Game Code\"\n                            required\n                            value={joinGameId}\n                            onChange={(e) => setJoinGameId(e.target.value)}\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || !joinGameId}\n                        >\n                            Join Game\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        </Card>\n    );\n\n    const renderGame = () => {\n        if (!game) return null;\n        \n        return (\n            <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n                {/* 游戏头部信息 */}\n                <Box sx={{ \n                    display: 'flex', \n                    justifyContent: 'space-between', \n                    alignItems: 'center',\n                    mb: 3\n                }}>\n                    <Box>\n                        <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                            Game ID: {game.id}\n                        </Typography>\n                        <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                            Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                        </Typography>\n                    </Box>\n                    {(game.status === 'in_progress' || game.status === 'completed') && startTime && (\n                        <Typography variant=\"h6\" sx={{ color: 'text.secondary' }}>\n                            Time: {formatTimeFromMs(elapsedTime)}\n                        </Typography>\n                    )}\n                </Box>\n\n                {/* 开始游戏按钮 */}\n                {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleStartGame}\n                        sx={{ mb: 3 }}\n                    >\n                        Start Game\n                    </Button>\n                )}\n\n                {/* 游戏内容 */}\n                <Grid container spacing={3}>\n                    {/* Left column: Player cards */}\n                    <Grid item xs={12} md={7}>\n                        <Stack spacing={3}>\n                            {game.players.map(renderPlayer)}\n                        </Stack>\n                    </Grid>\n\n                    {/* Right column: Results and statistics */}\n                    <Grid item xs={12} md={5}>\n                        {renderStatistics()}\n                    </Grid>\n                </Grid>\n\n                {/* 返回主菜单按钮 - 只在游戏完成时显示 */}\n                {game.status === 'completed' && (\n                    <Box sx={{ mt: 4, textAlign: 'center' }}>\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleReturnToMainMenu}\n                            sx={{\n                                minWidth: 200,\n                                borderRadius: 2\n                            }}\n                        >\n                            Return to Main Menu\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        );\n    };\n\n    // 获取每轮需要翻转的硬币数量\n    const getRequiredCoinsForBatch = (batchNum: number): number => {\n        return 20; // 所有批次都需要20个硬币\n    };\n\n    // 获取每轮的子批次结构\n    const getBatchStructure = (batchNum: number): { subBatchIndex: number, coinsCount: number }[] => {\n        const structure = {\n            1: [{ subBatchIndex: 0, coinsCount: 20 }],  // 第1轮：1个子批次×20枚\n            2: [  // 第2轮：2个子批次×10枚\n                { subBatchIndex: 0, coinsCount: 10 },\n                { subBatchIndex: 1, coinsCount: 10 }\n            ],\n            3: [  // 第3轮：4个子批次×5枚\n                { subBatchIndex: 0, coinsCount: 5 },\n                { subBatchIndex: 1, coinsCount: 5 },\n                { subBatchIndex: 2, coinsCount: 5 },\n                { subBatchIndex: 3, coinsCount: 5 }\n            ],\n            4: Array.from({ length: 10 }, (_, i) => ({  // 第4轮：10个子批次×2枚\n                subBatchIndex: i,\n                coinsCount: 2\n            }))\n        };\n        return structure[batchNum as keyof typeof structure] || [];\n    };\n\n    // 获取当前子批次的硬币数量\n    const getSubBatchSize = (batchNum: number, subBatchIndex: number): number => {\n        const structure = getBatchStructure(batchNum);\n        const subBatch = structure.find(sb => sb.subBatchIndex === subBatchIndex);\n        return subBatch?.coinsCount || 0;\n    };\n\n    // 检查子批次是否完成\n    const isSubBatchComplete = (batchNum: number, subBatchIndex: number, playerId: string): boolean => {\n        if (!game) return false;\n        const subBatchTasks = game.tasks.filter(t => \n            t.batch_number === batchNum && \n            t.sub_batch_number === subBatchIndex &&\n            t.assigned_to === playerId\n        );\n        const flippedCount = subBatchTasks.filter(t => flippedCoins.includes(t.id)).length;\n        return flippedCount >= getSubBatchSize(batchNum, subBatchIndex);\n    };\n\n    return (\n        <Container>\n            {!gameId ? (\n                renderMainMenu()\n            ) : game ? (\n                renderGame()\n            ) : (\n                <CircularProgress />\n            )}\n            \n            {error && (\n                <Alert severity=\"error\" sx={{ mt: 2 }}>\n                    {error}\n                </Alert>\n            )}\n        </Container>\n    );\n}; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAiB,OAAO;AAC3D,SACIC,GAAG,EACHC,MAAM,EACNC,IAAI,EACJC,WAAW,EACXC,UAAU,EACVC,IAAI,EACJC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,IAAI,EACJC,GAAG,EACHC,KAAK,EACLC,IAAI,EACJC,SAAS,EACTC,KAAK,EACLC,cAAc,EACdC,KAAK,EACLC,SAAS,EACTC,SAAS,EACTC,SAAS,EACTC,QAAQ,EACRC,KAAK,EACLC,SAAS,EACTC,gBAAgB,QACb,eAAe;AACtB,SAAyCC,UAAU,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,UAAU;AAC7F,SAASC,WAAW,EAAEC,gBAAgB,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQxE,OAAO,MAAMC,IAAyB,GAAGA,CAAC;EAAEC,MAAM,EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACpE,MAAM,CAACF,MAAM,EAAEG,SAAS,CAAC,GAAGvC,QAAQ,CAAqBqC,aAAa,CAAC;EACvE,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGzC,QAAQ,CAAkB,IAAI,CAAC;EACvD,MAAM,CAAC0C,UAAU,EAAEC,aAAa,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC4C,QAAQ,EAAEC,WAAW,CAAC,GAAG7C,QAAQ,CAAgB,IAAI,CAAC;EAC7D,MAAM,CAAC8C,SAAS,EAAEC,YAAY,CAAC,GAAG/C,QAAQ,CAA0B,IAAI,CAAC;EACzE,MAAM,CAACgD,cAAc,EAAEC,iBAAiB,CAAC,GAAGjD,QAAQ,CAAC,CAACqC,aAAa,CAAC;EACpE,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGnD,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACoD,UAAU,EAAEC,aAAa,CAAC,GAAGrD,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACsD,aAAa,EAAEC,gBAAgB,CAAC,GAAGvD,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACwD,UAAU,EAAEC,aAAa,CAAC,GAAGzD,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC0D,KAAK,EAAEC,QAAQ,CAAC,GAAG3D,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAAC4D,SAAS,EAAEC,YAAY,CAAC,GAAG7D,QAAQ,CAAU,CAAC,CAAC;EACtD,MAAM,CAAC8D,SAAS,EAAEC,YAAY,CAAC,GAAG/D,QAAQ,CAAgB,IAAI,CAAC;EAC/D,MAAM,CAACgE,OAAO,EAAEC,UAAU,CAAC,GAAGjE,QAAQ,CAAgB,IAAI,CAAC;EAC3D,MAAM,CAACkE,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGnE,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAACoE,WAAW,EAAEC,cAAc,CAAC,GAAGrE,QAAQ,CAAS,CAAC,CAAC;EACzD,MAAM,CAACsE,cAAc,EAAEC,iBAAiB,CAAC,GAAGvE,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACwE,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGzE,QAAQ,CAA2C,CAAC,CAAC,CAAC;EAC9G,MAAM,CAAC0E,eAAe,EAAEC,kBAAkB,CAAC,GAAG3E,QAAQ,CAA2C,CAAC,CAAC,CAAC;EACpG,MAAM,CAAC4E,eAAe,EAAEC,kBAAkB,CAAC,GAAG7E,QAAQ,CAInD,CAAC,CAAC,CAAC;;EAEN;EACA,MAAM,CAAC8E,YAAY,EAAEC,eAAe,CAAC,GAAG/E,QAAQ,CAAW,EAAE,CAAC;EAC9D,MAAM,CAACgF,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGjF,QAAQ,CAEjE,CAAC,CAAC,CAAC;;EAEN;;EAKA,MAAM,CAACkF,UAAU,EAAEC,aAAa,CAAC,GAAGnF,QAAQ,CAEzC,CAAC,CAAC,CAAC;;EAEN;EACA,MAAM,CAACoF,aAAa,EAAEC,gBAAgB,CAAC,GAAGrF,QAAQ,CAA2C,CAAC,CAAC,CAAC;;EAEhG;EACA,MAAM,CAACsF,WAAW,EAAEC,cAAc,CAAC,GAAGvF,QAAQ,CAAS,CAAC,CAAC;;EAEzD;EACA,MAAM,CAACwF,UAAU,EAAEC,aAAa,CAAC,GAAGzF,QAAQ,CAQzC,CAAC,CAAC,CAAC;EAENC,SAAS,CAAC,MAAM;IACZ,IAAImC,MAAM,IAAIQ,QAAQ,EAAE;MACpB,MAAM8C,OAAO,GAAG,IAAI1D,gBAAgB,CAACI,MAAM,EAAEQ,QAAQ,EAAG+C,WAAW,IAAK;QACpEC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,WAAW,CAAC;QAC/ClD,OAAO,CAACkD,WAAW,CAAC;MACxB,CAAC,CAAC;MACFD,OAAO,CAACI,OAAO,CAAC,CAAC;MACjB/C,YAAY,CAAC2C,OAAO,CAAC;;MAErB;MACA,OAAO,MAAM;QACTA,OAAO,CAACK,UAAU,CAAC,CAAC;MACxB,CAAC;IACL;EACJ,CAAC,EAAE,CAAC3D,MAAM,EAAEQ,QAAQ,CAAC,CAAC;EAEtB3C,SAAS,CAAC,MAAM;IACZ,IAAI,CAAAuC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEwD,MAAM,MAAK,aAAa,IAAI,CAAClC,SAAS,EAAE;MAC9CC,YAAY,CAACkC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;IAC5B;EACJ,CAAC,EAAE,CAAC1D,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEwD,MAAM,EAAElC,SAAS,CAAC,CAAC;EAE7B7D,SAAS,CAAC,MAAM;IACZ,IAAIkG,aAAoC,GAAG,IAAI;IAE/C,IAAI,CAAA3D,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEwD,MAAM,MAAK,aAAa,IAAIlC,SAAS,EAAE;MAC7CqC,aAAa,GAAGC,WAAW,CAAC,MAAM;QAC9B/B,cAAc,CAACgC,IAAI,IAAIJ,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGpC,SAAS,CAAC;MAClD,CAAC,EAAE,IAAI,CAAC;IACZ;IAEA,IAAI,CAAAtB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEwD,MAAM,MAAK,WAAW,IAAIlC,SAAS,IAAI,CAACE,OAAO,EAAE;MACvDC,UAAU,CAACgC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;MACtB3B,iBAAiB,CAAC,IAAI,CAAC;MACvB,IAAI4B,aAAa,EAAE;QACfG,aAAa,CAACH,aAAa,CAAC;MAChC;IACJ;IAEA,OAAO,MAAM;MACT,IAAIA,aAAa,EAAE;QACfG,aAAa,CAACH,aAAa,CAAC;MAChC;IACJ,CAAC;EACL,CAAC,EAAE,CAAC3D,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEwD,MAAM,EAAElC,SAAS,EAAEE,OAAO,CAAC,CAAC;EAEtC/D,SAAS,CAAC,MAAM;IACZ,IAAIsG,UAA0B;IAE9B,IAAIzC,SAAS,IAAI,CAAAtB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEwD,MAAM,MAAK,aAAa,EAAE;MAC7CO,UAAU,GAAGH,WAAW,CAAC,MAAM;QAC3Bb,cAAc,CAACc,IAAI,IAAIJ,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGpC,SAAS,CAAC;MAClD,CAAC,EAAE,IAAI,CAAC;IACZ;IAEA,OAAO,MAAM;MACT,IAAIyC,UAAU,EAAE;QACZD,aAAa,CAACC,UAAU,CAAC;MAC7B;IACJ,CAAC;EACL,CAAC,EAAE,CAACzC,SAAS,EAAEtB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEwD,MAAM,CAAC,CAAC;EAE7B/F,SAAS,CAAC,MAAM;IACZ,IAAIuC,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEgE,KAAK,IAAIhE,IAAI,CAACiE,OAAO,EAAE;MAC7B,MAAMC,aAAa,GAAG;QAAE,GAAGhC;MAAgB,CAAC;MAC5C,MAAMiC,kBAAkB,GAAG;QAAE,GAAGnC;MAAqB,CAAC;MACtD,IAAIoC,UAAU,GAAG,KAAK;MAEtBpE,IAAI,CAACiE,OAAO,CAACI,OAAO,CAACC,MAAM,IAAI;QAC3B,IAAI,CAACJ,aAAa,CAACI,MAAM,CAACC,aAAa,CAAC,EAAE;UACtCL,aAAa,CAACI,MAAM,CAACC,aAAa,CAAC,GAAG,CAAC,CAAC;UACxCH,UAAU,GAAG,IAAI;QACrB;QACA,IAAI,CAACD,kBAAkB,CAACG,MAAM,CAACC,aAAa,CAAC,EAAE;UAC3CJ,kBAAkB,CAACG,MAAM,CAACC,aAAa,CAAC,GAAG,CAAC,CAAC;UAC7CH,UAAU,GAAG,IAAI;QACrB;;QAEA;QACA,IAAIE,MAAM,CAACE,gBAAgB,EAAE;UACzBC,MAAM,CAACC,OAAO,CAACJ,MAAM,CAACE,gBAAgB,CAAC,CAACH,OAAO,CAAC,CAAC,CAACM,QAAQ,EAAErD,SAAS,CAAC,KAAK;YACvE,IAAI4C,aAAa,CAACI,MAAM,CAACC,aAAa,CAAC,CAACK,MAAM,CAACD,QAAQ,CAAC,CAAC,KAAKrD,SAAS,EAAE;cACrE4C,aAAa,CAACI,MAAM,CAACC,aAAa,CAAC,CAACK,MAAM,CAACD,QAAQ,CAAC,CAAC,GAAGrD,SAAS;cACjE8C,UAAU,GAAG,IAAI;YACrB;UACJ,CAAC,CAAC;QACN;;QAEA;QACA,KAAK,IAAIO,QAAQ,GAAG,CAAC,EAAEA,QAAQ,IAAI3E,IAAI,CAAC6E,WAAW,EAAEF,QAAQ,EAAE,EAAE;UAAA,IAAAG,qBAAA;UAC7D,MAAMC,UAAU,GAAG/E,IAAI,CAACgE,KAAK,CAACgB,MAAM,CAACC,CAAC,IAClCA,CAAC,CAACC,YAAY,KAAKP,QAAQ,IAC3BM,CAAC,CAACE,WAAW,KAAKb,MAAM,CAACc,EAC7B,CAAC;UAED,MAAMC,SAAS,IAAAP,qBAAA,GAAGZ,aAAa,CAACI,MAAM,CAACC,aAAa,CAAC,cAAAO,qBAAA,uBAAnCA,qBAAA,CAAsCH,QAAQ,CAAC;UACjE,IAAIU,SAAS,IACTN,UAAU,CAACO,MAAM,GAAG,CAAC,IACrBP,UAAU,CAACQ,KAAK,CAACN,CAAC,IAAIA,CAAC,CAACzB,MAAM,KAAKpE,UAAU,CAACoG,SAAS,CAAC,IACxD,CAACrB,kBAAkB,CAACG,MAAM,CAACC,aAAa,CAAC,CAACD,MAAM,CAACc,EAAE,CAAC,EAAE;YACtDjB,kBAAkB,CAACG,MAAM,CAACC,aAAa,CAAC,CAACD,MAAM,CAACc,EAAE,CAAC,GAAG3B,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG2B,SAAS;YAC5EjB,UAAU,GAAG,IAAI;UACrB;QACJ;MACJ,CAAC,CAAC;;MAEF;MACA,IAAIA,UAAU,EAAE;QACZjC,kBAAkB,CAAC+B,aAAa,CAAC;QACjCjC,uBAAuB,CAACkC,kBAAkB,CAAC;MAC/C;IACJ;EACJ,CAAC,EAAE,CAACnE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgE,KAAK,EAAEhE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiE,OAAO,EAAEjE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE6E,WAAW,CAAC,CAAC;EAEnDpH,SAAS,CAAC,MAAM;IACZ,IAAIuC,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEgE,KAAK,EAAE;MACb,IAAIyB,YAAY,GAAG,KAAK;MACxB,MAAMC,mBAAmB,GAAG,CAAC,GAAGpD,YAAY,CAAC;;MAE7C;MACAtC,IAAI,CAACiE,OAAO,CAACI,OAAO,CAACC,MAAM,IAAI;QAC3B,MAAMqB,WAAW,GAAG3F,IAAI,CAACgE,KAAK,CAACgB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACE,WAAW,KAAKb,MAAM,CAACc,EAAE,CAAC;QACvE,MAAMQ,iBAAiB,GAAGD,WAAW,CAACX,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,YAAY,KAAKZ,MAAM,CAACC,aAAa,CAAC;;QAE1F;QACA,IAAIqB,iBAAiB,CAACN,MAAM,GAAG,CAAC,IAC5BM,iBAAiB,CAACL,KAAK,CAACN,CAAC,IAAIA,CAAC,CAACzB,MAAM,KAAKpE,UAAU,CAACyG,OAAO,CAAC,EAAE;UAC/D;UACA,MAAMC,cAAc,GAAGH,WAAW,CAACX,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,YAAY,KAAKZ,MAAM,CAACC,aAAa,GAAG,CAAC,CAAC;UAC3F,MAAMwB,gBAAgB,GAAGD,cAAc,CAACE,GAAG,CAACf,CAAC,IAAIA,CAAC,CAACG,EAAE,CAAC;UACtD,MAAMa,eAAe,GAAGP,mBAAmB,CAACV,MAAM,CAACI,EAAE,IAAI,CAACW,gBAAgB,CAACG,QAAQ,CAACd,EAAE,CAAC,CAAC;UACxF,IAAIa,eAAe,CAACX,MAAM,KAAKI,mBAAmB,CAACJ,MAAM,EAAE;YACvDI,mBAAmB,CAACJ,MAAM,GAAG,CAAC;YAC9BI,mBAAmB,CAACS,IAAI,CAAC,GAAGF,eAAe,CAAC;YAC5CR,YAAY,GAAG,IAAI;UACvB;QACJ;MACJ,CAAC,CAAC;;MAEF;MACA,IAAIA,YAAY,EAAE;QACdlD,eAAe,CAACmD,mBAAmB,CAAC;MACxC;IACJ;EACJ,CAAC,EAAE,CAAC1F,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgE,KAAK,CAAC,CAAC;;EAEjB;EACA,MAAMoC,gBAAgB,GAAIjD,WAAqB,IAAK;IAChDlD,OAAO,CAACkD,WAAW,CAAC;IACpB,IAAIA,WAAW,CAACK,MAAM,KAAK,WAAW,IAAI,CAAChC,OAAO,EAAE;MAChDC,UAAU,CAACgC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;IAC1B;EACJ,CAAC;EAED,MAAM2C,gBAAgB,GAAG,MAAOC,CAAkB,IAAK;IACnDA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACApF,QAAQ,CAAC,IAAI,CAAC;MACd;MACA,MAAMvB,MAAM,GAAG,MAAML,WAAW,CAACiH,UAAU,CAAC9F,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;MAC9D,IAAId,MAAM,EAAE;QACR;QACA,MAAMQ,QAAQ,GAAG,MAAMb,WAAW,CAACkH,QAAQ,CAAC7G,MAAM,EAAEM,UAAU,CAAC;;QAE/D;QACAH,SAAS,CAACH,MAAM,CAAC;QACjBS,WAAW,CAACD,QAAQ,CAAC;;QAErB;QACA,MAAMsG,EAAE,GAAG,IAAIlH,gBAAgB,CAC3BI,MAAM,EACNM,UAAU,EACVkG,gBACJ,CAAC;QACD7F,YAAY,CAACmG,EAAE,CAAC;;QAEhB;QACA,MAAMC,gBAAgB,GAAG,MAAMpH,WAAW,CAACqH,YAAY,CAAChH,MAAM,CAAC;QAC/DK,OAAO,CAAC0G,gBAAgB,CAAC;;QAEzB;QACApF,YAAY,CAACkC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;QAExBN,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE;UAAEzD,MAAM;UAAEQ;QAAS,CAAC,CAAC;MACnE;IACJ,CAAC,CAAC,OAAOyG,GAAG,EAAE;MACVzD,OAAO,CAAClC,KAAK,CAAC,sBAAsB,EAAE2F,GAAG,CAAC;MAC1C1F,QAAQ,CAAC0F,GAAG,YAAYC,KAAK,GAAGD,GAAG,CAACE,OAAO,GAAG,uBAAuB,CAAC;IAC1E;EACJ,CAAC;EAED,MAAMC,cAAc,GAAG,MAAOV,CAAkB,IAAK;IACjDA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACApF,QAAQ,CAAC,IAAI,CAAC;MACd,IAAIH,UAAU,EAAE;QACZ;QACA,MAAMiG,MAAM,GAAG,MAAM1H,WAAW,CAAC2H,eAAe,CAAClG,UAAU,CAAC;QAC5D,IAAI,CAACiG,MAAM,EAAE;UACT9F,QAAQ,CAAC,gBAAgB,CAAC;UAC1B;QACJ;;QAEA;QACA,MAAMf,QAAQ,GAAG,MAAMb,WAAW,CAACkH,QAAQ,CAACzF,UAAU,EAAEd,UAAU,CAAC;;QAEnE;QACAH,SAAS,CAACiB,UAAU,CAAC;QACrBX,WAAW,CAACD,QAAQ,CAAC;;QAErB;QACA,MAAMsG,EAAE,GAAG,IAAIlH,gBAAgB,CAC3BwB,UAAU,EACVd,UAAU,EACVkG,gBACJ,CAAC;QACD7F,YAAY,CAACmG,EAAE,CAAC;;QAEhB;QACA,MAAMS,SAAS,GAAG,MAAM5H,WAAW,CAACqH,YAAY,CAAC5F,UAAU,CAAC;QAC5Df,OAAO,CAACkH,SAAS,CAAC;;QAElB;QACA5F,YAAY,CAACkC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;QAExBN,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE;UAAEzD,MAAM,EAAEoB,UAAU;UAAEZ;QAAS,CAAC,CAAC;MAC9E;IACJ,CAAC,CAAC,OAAOyG,GAAG,EAAE;MACVzD,OAAO,CAAClC,KAAK,CAAC,qBAAqB,EAAE2F,GAAG,CAAC;MACzC1F,QAAQ,CAAC0F,GAAG,YAAYC,KAAK,GAAGD,GAAG,CAACE,OAAO,GAAG,qBAAqB,CAAC;IACxE;EACJ,CAAC;EAED,MAAMK,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAACxH,MAAM,EAAE;IAEb,IAAI;MACA,MAAML,WAAW,CAAC8H,SAAS,CAACzH,MAAM,CAAC;MACnC,MAAMgC,WAAW,GAAG6B,IAAI,CAACC,GAAG,CAAC,CAAC;MAC9BnC,YAAY,CAACK,WAAW,CAAC;MACzBO,kBAAkB,CAAC0B,IAAI,KAAK;QACxB,GAAGA,IAAI;QACP,CAAC,EAAE;UAAE,CAAC,EAAEjC;QAAY;MACxB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,OAAOiF,GAAG,EAAE;MACV1F,QAAQ,CAAC0F,GAAG,YAAYC,KAAK,GAAGD,GAAG,CAACE,OAAO,GAAG,sBAAsB,CAAC;IACzE;EACJ,CAAC;EAED,MAAMO,aAAa,GAAG7I,SAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;EAED;EACA,MAAM8I,gBAAgB,GAAIC,IAAc,IAAK;IACzC,oBACI9H,OAAA,CAAChC,GAAG;MACA+J,EAAE,EAAE;QACAC,KAAK,EAAE;UAAEC,EAAE,EAAE,MAAM;UAAEC,EAAE,EAAE;QAAO,CAAC;QACjCC,MAAM,EAAE;UAAEF,EAAE,EAAE,MAAM;UAAEC,EAAE,EAAE;QAAO,CAAC;QAClCE,YAAY,EAAE,KAAK;QACnBC,MAAM,EAAEC,KAAK,KAAK;UACdL,EAAE,EAAE,aAAaK,KAAK,CAACC,OAAO,CAACC,OAAO,CAACC,IAAI,EAAE;UAC7CP,EAAE,EAAE,aAAaI,KAAK,CAACC,OAAO,CAACC,OAAO,CAACC,IAAI;QAC/C,CAAC,CAAC;QACFC,OAAO,EAAE,MAAM;QACfC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBC,eAAe,EAAEP,KAAK,IAAIA,KAAK,CAACC,OAAO,CAACO,UAAU,CAACC,KAAK;QACxDC,KAAK,EAAEV,KAAK,IAAIA,KAAK,CAACC,OAAO,CAACU,IAAI,CAACT,OAAO;QAC1CU,QAAQ,EAAE;UAAEjB,EAAE,EAAE,QAAQ;UAAEC,EAAE,EAAE;QAAS,CAAC;QACxCiB,UAAU,EAAE,MAAM;QAClBC,YAAY,EAAE;UAAEnB,EAAE,EAAE,CAAC;UAAEC,EAAE,EAAE;QAAE,CAAC;QAC9BmB,WAAW,EAAE;MACjB,CAAE;MAAAC,QAAA,EAEDxB,IAAI,KAAKlI,QAAQ,CAAC2J,KAAK,GAAG,GAAG,GAAG;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAEd,CAAC;;EAED;EACA,MAAMC,iBAAiB,GAAGA,CAAC3E,QAAgB,EAAEvE,QAAgB,KAAK;IAC9D,MAAM2E,UAAU,GAAG/E,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgE,KAAK,CAACgB,MAAM,CAACC,CAAC,IACnCA,CAAC,CAACC,YAAY,KAAKP,QAAQ,IAC3BM,CAAC,CAACE,WAAW,KAAK/E,QACtB,CAAC;IACD,OAAO,CAAA2E,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEQ,KAAK,CAACN,CAAC,IAAI3C,YAAY,CAAC4D,QAAQ,CAACjB,CAAC,CAACG,EAAE,CAAC,CAAC,KAAI,KAAK;EACvE,CAAC;;EAED;EACA,MAAMmE,cAAc,GAAG,MAAOC,MAAc,IAAK;IAC7C,IAAI,CAACxJ,IAAI,IAAI,CAACI,QAAQ,EAAE;;IAExB;IACA,MAAMqJ,aAAa,GAAGzJ,IAAI,CAACiE,OAAO,CAACyF,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACvE,EAAE,KAAKhF,QAAQ,CAAC;IAC/D,IAAI,CAAAqJ,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEjG,MAAM,MAAKnE,YAAY,CAACuK,MAAM,EAAE;;IAEnD;IACA,MAAMC,YAAY,GAAGJ,aAAa,CAAClF,aAAa;IAChD,MAAMuF,aAAa,GAAGC,wBAAwB,CAACF,YAAY,CAAC;;IAE5D;IACA,MAAMG,iBAAiB,GAAG1H,YAAY,CAAC0C,MAAM,CAACI,EAAE,IAC5CpF,IAAI,CAACgE,KAAK,CAAC0F,IAAI,CAACzE,CAAC,IACbA,CAAC,CAACG,EAAE,KAAKA,EAAE,IACXH,CAAC,CAACC,YAAY,KAAK2E,YAAY,IAC/B5E,CAAC,CAACE,WAAW,KAAK/E,QACtB,CACJ,CAAC,CAACkF,MAAM;IAER,IAAI0E,iBAAiB,IAAIF,aAAa,EAAE;IAExC,IAAI;MACA;MACAvH,eAAe,CAACsB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE2F,MAAM,CAAC,CAAC;;MAE1C;MACA3G,gBAAgB,CAACgB,IAAI,KAAK;QACtB,GAAGA,IAAI;QACP,CAAC2F,MAAM,GAAG;UACNS,UAAU,EAAE;QAChB;MACJ,CAAC,CAAC,CAAC;;MAEH;MACA,MAAM1K,WAAW,CAAC2K,QAAQ,CAAClK,IAAI,CAACoF,EAAE,EAAEoE,MAAM,CAAC;IAC/C,CAAC,CAAC,OAAOtI,KAAK,EAAE;MACZkC,OAAO,CAAClC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C;MACAqB,eAAe,CAACsB,IAAI,IAAIA,IAAI,CAACmB,MAAM,CAACI,EAAE,IAAIA,EAAE,KAAKoE,MAAM,CAAC,CAAC;MACzD3G,gBAAgB,CAACgB,IAAI,IAAI;QACrB,MAAMsG,QAAQ,GAAG;UAAE,GAAGtG;QAAK,CAAC;QAC5B,OAAOsG,QAAQ,CAACX,MAAM,CAAC;QACvB,OAAOW,QAAQ;MACnB,CAAC,CAAC;IACN;EACJ,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAIzF,QAAgB,IAAK;IAC9C,MAAM0F,YAAY,GAAG7H,sBAAsB,CAACmC,QAAQ,CAAC,IAAI,EAAE;IAC3D,IAAI0F,YAAY,CAAC/E,MAAM,KAAK,CAAC,EAAE;;IAE/B;IACA+E,YAAY,CAAChG,OAAO,CAACiG,MAAM,IAAI;MAC3B,IAAIhK,SAAS,EAAE;QACXA,SAAS,CAACiK,YAAY,CAACD,MAAM,CAAC;MAClC;IACJ,CAAC,CAAC;;IAEF;IACA7H,yBAAyB,CAACoB,IAAI,IAAI;MAC9B,MAAMsG,QAAQ,GAAG;QAAE,GAAGtG;MAAK,CAAC;MAC5B,OAAOsG,QAAQ,CAACxF,QAAQ,CAAC;MACzB,OAAOwF,QAAQ;IACnB,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMK,sBAAsB,GAAG,MAAAA,CAAO7F,QAAgB,EAAE8F,aAAqB,KAAK;IAC9E,IAAI,CAACzK,IAAI,IAAI,CAACI,QAAQ,EAAE;IAExB,IAAI;MACA;MACA,IAAI,CAACsK,eAAe,CAAC/F,QAAQ,EAAE8F,aAAa,CAAC,EAAE;QAC3CtJ,QAAQ,CAAC,wCAAwC,CAAC;QAClD;MACJ;;MAEA;MACA,MAAMwJ,kBAAkB,GAAG3K,IAAI,CAACiE,OAAO,CAAC2G,SAAS,CAACjB,CAAC,IAAIA,CAAC,CAACvE,EAAE,KAAKhF,QAAQ,CAAC;MACzE,MAAMyK,eAAe,GAAG,CAACF,kBAAkB,GAAG,CAAC,IAAI3K,IAAI,CAACiE,OAAO,CAACqB,MAAM;MACtE,MAAMwF,UAAU,GAAG9K,IAAI,CAACiE,OAAO,CAAC4G,eAAe,CAAC;;MAEhD;MACA,MAAME,YAAY,GAAG/K,IAAI,CAACgE,KAAK,CAACgC,GAAG,CAACgF,IAAI,IAAI;QACxC;QACA,IAAIA,IAAI,CAAC9F,YAAY,KAAKP,QAAQ,IAC9BqG,IAAI,CAACC,gBAAgB,KAAKR,aAAa,IACvCO,IAAI,CAAC7F,WAAW,KAAK/E,QAAQ,EAAE;UAC/B;UACA,OAAO;YACH,GAAG4K,IAAI;YACP7F,WAAW,EAAE2F,UAAU,CAAC1F,EAAE;YAC1B5B,MAAM,EAAEpE,UAAU,CAAC8L,WAAW,CAAE;UACpC,CAAC;QACL;QACA,OAAOF,IAAI;MACf,CAAC,CAAC;;MAEF;MACA,MAAMG,iBAAiB,GAAGJ,YAAY,CAACK,IAAI,CAACJ,IAAI,IAC5CA,IAAI,CAAC7F,WAAW,KAAK/E,QAAQ,IAC7B4K,IAAI,CAACxH,MAAM,KAAKpE,UAAU,CAACoG,SAC/B,CAAC;;MAED;MACA,MAAM6F,4BAA4B,GAAGN,YAAY,CAACK,IAAI,CAACJ,IAAI,IACvDA,IAAI,CAAC7F,WAAW,KAAK2F,UAAU,CAAC1F,EAAE,IAClC4F,IAAI,CAACxH,MAAM,KAAKpE,UAAU,CAAC8L,WAC/B,CAAC;;MAED;MACA,MAAMI,cAAc,GAAGtL,IAAI,CAACiE,OAAO,CAAC+B,GAAG,CAAC1B,MAAM,IAAI;QAC9C,IAAIA,MAAM,CAACc,EAAE,KAAKhF,QAAQ,EAAE;UACxB;UACA,OAAO;YACH,GAAGkE,MAAM;YACTd,MAAM,EAAE2H,iBAAiB,GAAG9L,YAAY,CAACuK,MAAM,GAAGvK,YAAY,CAACkM;UACnE,CAAC;QACL;QACA,IAAIjH,MAAM,CAACc,EAAE,KAAK0F,UAAU,CAAC1F,EAAE,EAAE;UAC7B;UACA,OAAO;YACH,GAAGd,MAAM;YACTd,MAAM,EAAE6H,4BAA4B,GAAGhM,YAAY,CAACuK,MAAM,GAAGvK,YAAY,CAACkM;UAC9E,CAAC;QACL;QACA,OAAOjH,MAAM;MACjB,CAAC,CAAC;;MAEF;MACA,MAAMnB,WAAW,GAAG;QAChB,GAAGnD,IAAI;QACPgE,KAAK,EAAE+G,YAAY;QACnB9G,OAAO,EAAEqH,cAAc;QACvB9H,MAAM,EAAE,aAAa,CAAE;MAC3B,CAAC;;MAED;MACA,MAAMjE,WAAW,CAACiM,UAAU,CAACxL,IAAI,CAACoF,EAAE,EAAEjC,WAAW,CAAC;;MAElD;MACAlD,OAAO,CAACkD,WAAW,CAAC;IACxB,CAAC,CAAC,OAAOjC,KAAK,EAAE;MACZkC,OAAO,CAAClC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDC,QAAQ,CAAC,8BAA8B,CAAC;IAC5C;EACJ,CAAC;;EAED;EACA,MAAMuJ,eAAe,GAAGA,CAAC/F,QAAgB,EAAE8F,aAAqB,KAAc;IAC1E,IAAI,CAACzK,IAAI,IAAI,CAACI,QAAQ,EAAE,OAAO,KAAK;;IAEpC;IACA,MAAMuF,WAAW,GAAG3F,IAAI,CAACgE,KAAK,CAACgB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACE,WAAW,KAAK/E,QAAQ,CAAC;;IAEtE;IACA,MAAMqL,kBAAkB,GAAG9F,WAAW,CAACX,MAAM,CAACC,CAAC,IAC1CA,CAAC,CAACC,YAAY,GAAGP,QAAQ,IACzBM,CAAC,CAACC,YAAY,KAAKP,QAAQ,IAAIM,CAAC,CAACgG,gBAAgB,GAAGR,aACzD,CAAC;;IAED;IACA,OAAO,CAACgB,kBAAkB,CAACL,IAAI,CAACnG,CAAC,IAAIA,CAAC,CAACzB,MAAM,KAAKpE,UAAU,CAACoG,SAAS,CAAC;EAC3E,CAAC;;EAED;EACA,MAAMkG,sBAAsB,GAAGA,CAACtL,QAAgB,EAAEoD,MAAkB,KAAK;IACrE,IAAI,CAACxD,IAAI,EAAE;IAEX,MAAM2L,WAAW,GAAG3L,IAAI,CAACiE,OAAO,CAAC2G,SAAS,CAACjB,CAAC,IAAIA,CAAC,CAACvE,EAAE,KAAKhF,QAAQ,CAAC;IAClE,IAAIuL,WAAW,KAAK,CAAC,CAAC,EAAE;;IAExB;IACA,MAAML,cAAc,GAAGtL,IAAI,CAACiE,OAAO,CAAC+B,GAAG,CAAC1B,MAAM,IAAI;MAC9C,IAAIA,MAAM,CAACc,EAAE,KAAKhF,QAAQ,EAAE;QACxB,OAAO;UACH,GAAGkE,MAAM;UACTd,MAAM,EAAEA,MAAM,KAAKpE,UAAU,CAAC8L,WAAW,GAAG7L,YAAY,CAACuK,MAAM,GAAGvK,YAAY,CAACkM;QACnF,CAAC;MACL;MACA,OAAOjH,MAAM;IACjB,CAAC,CAAC;IAEFrE,OAAO,CAAC4D,IAAI,IAAIA,IAAI,GAAG;MACnB,GAAGA,IAAI;MACPI,OAAO,EAAEqH;IACb,CAAC,GAAGzH,IAAI,CAAC;EACb,CAAC;;EAED;EACApG,SAAS,CAAC,MAAM;IACZ,IAAI,CAACuC,IAAI,IAAI,CAACI,QAAQ,EAAE;;IAExB;IACA,MAAMwL,kBAAkB,GAAG5L,IAAI,CAACgE,KAAK,CAACoH,IAAI,CAACJ,IAAI,IAC3CA,IAAI,CAAC7F,WAAW,KAAK/E,QAAQ,IAC7B4K,IAAI,CAACxH,MAAM,KAAKpE,UAAU,CAAC8L,WAC/B,CAAC;;IAED;IACA,IAAIU,kBAAkB,EAAE;MACpBF,sBAAsB,CAACtL,QAAQ,EAAEhB,UAAU,CAAC8L,WAAW,CAAC;IAC5D;EACJ,CAAC,EAAE,CAAClL,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgE,KAAK,EAAE5D,QAAQ,CAAC,CAAC;;EAE3B;EACA,MAAMyL,UAAU,GAAGA,CAACrE,IAAc,EAAEyC,UAAmB,EAAE6B,OAAgB,GAAG,KAAK,EAAEC,OAAoB,EAAEzB,MAAe,KAAK;IACzH,MAAM0B,SAAS,GAAG1B,MAAM,GAAG1H,aAAa,CAAC0H,MAAM,CAAC,GAAG2B,SAAS;IAC5D,MAAMC,SAAS,GAAG5B,MAAM,GAAGhI,YAAY,CAAC4D,QAAQ,CAACoE,MAAM,CAAC,GAAG,KAAK;;IAEhE;IACA,MAAM6B,WAAW,GAAGD,SAAS,GACtB1E,IAAI,KAAKlI,QAAQ,CAAC2J,KAAK,GAAG3J,QAAQ,CAAC8M,KAAK,GAAG9M,QAAQ,CAAC2J,KAAK,GAC1DzB,IAAI;IAEV,oBACI9H,OAAA,CAAChC,GAAG;MACA+J,EAAE,EAAE;QACAC,KAAK,EAAEoE,OAAO,GAAG,EAAE,GAAG,EAAE;QACxBjE,MAAM,EAAEiE,OAAO,GAAG,EAAE,GAAG,EAAE;QACzBhE,YAAY,EAAE,KAAK;QACnBS,eAAe,EAAE4D,WAAW,KAAK7M,QAAQ,CAAC2J,KAAK,GAAG,SAAS,GAAG,SAAS;QACvElB,MAAM,EAAE,GAAG+D,OAAO,GAAG,CAAC,GAAG,CAAC,kBAAkB;QAC5CpD,KAAK,EAAE,SAAS;QAChBN,OAAO,EAAE,MAAM;QACfC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBO,UAAU,EAAE,MAAM;QAClBD,QAAQ,EAAEkD,OAAO,GAAG,QAAQ,GAAG,QAAQ;QACvCO,WAAW,EAAE,IAAI;QACjBC,EAAE,EAAER,OAAO,GAAG,CAAC,GAAG,CAAC;QACnBS,QAAQ,EAAE,UAAU;QACpBC,MAAM,EAAET,OAAO,GAAG,SAAS,GAAG,SAAS;QACvCU,UAAU,EAAE,gBAAgB;QAC5BC,cAAc,EAAE,aAAa;QAC7BC,SAAS,EAAEX,SAAS,aAATA,SAAS,eAATA,SAAS,CAAE/B,UAAU,GAAG,iBAAiB,GAAG,eAAe;QACtE,SAAS,EAAE8B,OAAO,GAAG;UACjBY,SAAS,EAAE,aAAa;UACxBC,SAAS,EAAE;QACf,CAAC,GAAG,CAAC,CAAC;QACN,UAAU,EAAEb,OAAO,GAAG;UAClBY,SAAS,EAAE;QACf,CAAC,GAAG,CAAC,CAAC;QACN,UAAU,EAAE;UACRE,OAAO,EAAE,IAAI;UACbN,QAAQ,EAAE,UAAU;UACpBO,GAAG,EAAE,CAAC;UACNC,IAAI,EAAE,CAAC;UACPC,KAAK,EAAE,CAAC;UACRC,MAAM,EAAE,CAAC;UACTnF,YAAY,EAAE,KAAK;UACnBU,UAAU,EAAE,kGAAkG;UAC9G0E,aAAa,EAAE;QACnB;MACJ,CAAE;MACFnB,OAAO,EAAEA,OAAQ;MAAA/C,QAAA,EAEhBmD,WAAW,KAAK7M,QAAQ,CAAC2J,KAAK,GAAG,GAAG,GAAG;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAEd,CAAC;;EAED;EACA,MAAM8D,aAAa,GAAGA,CAACnJ,KAAa,EAAEW,QAAgB,EAAEyI,YAA0B,KAAK;IACnF,IAAIA,YAAY,KAAK/N,YAAY,CAACkM,OAAO,EAAE;MACvC,oBACI7L,OAAA,CAAC5B,UAAU;QAACuP,OAAO,EAAC,OAAO;QAAC3E,KAAK,EAAC,gBAAgB;QAAAM,QAAA,EAAC;MAEnD;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAErB;IAEA,MAAMiE,SAAS,GAAGC,iBAAiB,CAAC5I,QAAQ,CAAC;IAC7C,MAAM8E,aAAa,GAAGzJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiE,OAAO,CAACyF,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACvE,EAAE,KAAKhF,QAAQ,CAAC;IAEhE,oBACIV,OAAA,CAAChC,GAAG;MAAAsL,QAAA,EACCsE,SAAS,CAACtH,GAAG,CAAC,CAAC;QAAEyE,aAAa;QAAE+C;MAAW,CAAC,KAAK;QAAA,IAAAC,eAAA;QAC9C,MAAMC,aAAa,GAAG1J,KAAK,CAACgB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACgG,gBAAgB,KAAKR,aAAa,CAAC;QAC7E,IAAIiD,aAAa,CAACpI,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;QAE3C,MAAMqI,kBAAkB,GAAG,EAAAF,eAAA,GAAAC,aAAa,CAAC,CAAC,CAAC,cAAAD,eAAA,uBAAhBA,eAAA,CAAkBjG,IAAI,KAAIlI,QAAQ,CAAC2J,KAAK;QACnE,MAAM2E,YAAY,GAAGF,aAAa,CAAC1I,MAAM,CAACC,CAAC,IAAI3C,YAAY,CAAC4D,QAAQ,CAACjB,CAAC,CAACG,EAAE,CAAC,CAAC,CAACE,MAAM;QAClF,MAAMuI,UAAU,GAAGC,kBAAkB,CAACnJ,QAAQ,EAAE8F,aAAa,EAAE,CAAAhB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAErE,EAAE,KAAI,EAAE,CAAC;QACvF,MAAM2I,UAAU,GAAGrD,eAAe,CAAC/F,QAAQ,EAAE8F,aAAa,CAAC;QAE3D,oBACI/K,OAAA,CAAChC,GAAG;UAAsC+J,EAAE,EAAE;YAAE6E,EAAE,EAAE;UAAE,CAAE;UAAAtD,QAAA,gBACpDtJ,OAAA,CAAChC,GAAG;YAAC+J,EAAE,EAAE;cAAEW,OAAO,EAAE,MAAM;cAAEC,UAAU,EAAE,QAAQ;cAAEiE,EAAE,EAAE;YAAE,CAAE;YAAAtD,QAAA,gBACtDtJ,OAAA,CAAC5B,UAAU;cAACuP,OAAO,EAAC,WAAW;cAAC5F,EAAE,EAAE;gBAAEuG,EAAE,EAAE;cAAE,CAAE;cAAAhF,QAAA,GAAC,YACjC,EAACyB,aAAa,GAAG,CAAC,EAAC,IAAE,EAACmD,YAAY,EAAC,GAAC,EAACJ,UAAU,EAAC,SAC9D;YAAA;cAAAtE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,EACZwE,UAAU,IAAI,CAAApE,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEjG,MAAM,MAAKnE,YAAY,CAACuK,MAAM,iBACxDlK,OAAA,CAAC/B,MAAM;cACH0P,OAAO,EAAC,WAAW;cACnB3E,KAAK,EAAC,SAAS;cACfuF,IAAI,EAAC,OAAO;cACZlC,OAAO,EAAEA,CAAA,KAAMvB,sBAAsB,CAAC7F,QAAQ,EAAE8F,aAAa,CAAE;cAC/DyD,QAAQ,EAAE,CAACH,UAAW;cAAA/E,QAAA,EACzB;YAED;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CACX;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACN3J,OAAA,CAAChC,GAAG;YAAC+J,EAAE,EAAE;cACLW,OAAO,EAAE,MAAM;cACf+F,QAAQ,EAAE,MAAM;cAChBC,GAAG,EAAE,CAAC;cACNC,OAAO,EAAEN,UAAU,GAAG,CAAC,GAAG,GAAG;cAC7Bb,aAAa,EAAEa,UAAU,GAAG,MAAM,GAAG;YACzC,CAAE;YAAA/E,QAAA,EACG0E,aAAa,CAAC1H,GAAG,CAAEgF,IAAI;cAAA,IAAAsD,qBAAA;cAAA,oBACpB5O,OAAA,CAAChC,GAAG;gBAAAsL,QAAA,EACC6C,UAAU,CACPb,IAAI,CAACxD,IAAI,EACT,EAAA8G,qBAAA,GAAA1L,aAAa,CAACoI,IAAI,CAAC5F,EAAE,CAAC,cAAAkJ,qBAAA,uBAAtBA,qBAAA,CAAwBrE,UAAU,KAAI,KAAK,EAC3C,KAAK,EACL,MAAMV,cAAc,CAACyB,IAAI,CAAC5F,EAAE,CAAC,EAC7B4F,IAAI,CAAC5F,EACT;cAAC,GAPK4F,IAAI,CAAC5F,EAAE;gBAAA8D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAQZ,CAAC;YAAA,CACT;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC;QAAA,GAnCA,GAAG1E,QAAQ,IAAI8F,aAAa,EAAE;UAAAvB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAoCnC,CAAC;MAEd,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAEd,CAAC;;EAED;EACA,MAAMkF,YAAY,GAAIjK,MAAc,IAAK;IAAA,IAAAkK,mBAAA;IACrC,MAAM5I,iBAAiB,GAAG,CAAA5F,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgE,KAAK,CAACgB,MAAM,CAACC,CAAC,IAC1CA,CAAC,CAACC,YAAY,KAAKZ,MAAM,CAACC,aAAa,IACvCU,CAAC,CAACE,WAAW,KAAKb,MAAM,CAACc,EAC7B,CAAC,KAAI,EAAE;IAEP,MAAMuI,kBAAkB,IAAAa,mBAAA,GAAG5I,iBAAiB,CAAC,CAAC,CAAC,cAAA4I,mBAAA,uBAApBA,mBAAA,CAAsBhH,IAAI;IACrD,MAAMsC,aAAa,GAAGC,wBAAwB,CAACzF,MAAM,CAACC,aAAa,CAAC;IACpE,MAAMkK,mBAAmB,GAAG7I,iBAAiB,CAACZ,MAAM,CAACC,CAAC,IAAI3C,YAAY,CAAC4D,QAAQ,CAACjB,CAAC,CAACG,EAAE,CAAC,CAAC,CAACE,MAAM;IAE7F,oBACI5F,OAAA,CAAC9B,IAAI;MAAiB6J,EAAE,EAAE;QAAE6E,EAAE,EAAE;MAAE,CAAE;MAAAtD,QAAA,eAChCtJ,OAAA,CAAC7B,WAAW;QAAAmL,QAAA,gBACRtJ,OAAA,CAAChC,GAAG;UAAC+J,EAAE,EAAE;YAAEW,OAAO,EAAE,MAAM;YAAEE,cAAc,EAAE,eAAe;YAAED,UAAU,EAAE,QAAQ;YAAEiE,EAAE,EAAE;UAAE,CAAE;UAAAtD,QAAA,gBACvFtJ,OAAA,CAAC5B,UAAU;YAACuP,OAAO,EAAC,IAAI;YAAArE,QAAA,EACnB1E,MAAM,CAACoK;UAAI;YAAAxF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eACb3J,OAAA,CAAClB,IAAI;YACDmQ,KAAK,EAAErK,MAAM,CAACd,MAAO;YACrBkF,KAAK,EAAEpE,MAAM,CAACd,MAAM,KAAKnE,YAAY,CAACuK,MAAM,GAAG,SAAS,GAAG,SAAU;YACrEqE,IAAI,EAAC;UAAO;YAAA/E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eAEN3J,OAAA,CAAChC,GAAG;UAAC+J,EAAE,EAAE;YAAE6E,EAAE,EAAE,CAAC;YAAEsC,OAAO,EAAE,oBAAoB;YAAEjF,CAAC,EAAE,CAAC;YAAE7B,YAAY,EAAE;UAAE,CAAE;UAAAkB,QAAA,gBACrEtJ,OAAA,CAAC5B,UAAU;YAACuP,OAAO,EAAC,WAAW;YAAC5F,EAAE,EAAE;cAAE6E,EAAE,EAAE;YAAE,CAAE;YAAAtD,QAAA,GAAC,iBAC5B,EAAC1E,MAAM,CAACC,aAAa,EAAC,KAAG,EAACvE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE6E,WAAW,EACzD8I,kBAAkB,IAAIrJ,MAAM,CAACd,MAAM,KAAKnE,YAAY,CAACuK,MAAM,iBACxDlK,OAAA,CAAChC,GAAG;cAAC+J,EAAE,EAAE;gBAAEW,OAAO,EAAE,MAAM;gBAAEC,UAAU,EAAE,QAAQ;gBAAEwG,EAAE,EAAE;cAAE,CAAE;cAAA7F,QAAA,gBACtDtJ,OAAA,CAAC5B,UAAU;gBAACuP,OAAO,EAAC,OAAO;gBAAC5F,EAAE,EAAE;kBAAEuG,EAAE,EAAE;gBAAE,CAAE;gBAAAhF,QAAA,EAAC;cAE3C;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAY,CAAC,eACb3J,OAAA,CAAC5B,UAAU;gBAACuP,OAAO,EAAC,OAAO;gBAAC5F,EAAE,EAAE;kBAAEqH,EAAE,EAAE;gBAAE,CAAE;gBAAA9F,QAAA,EACrCc;cAAa;gBAAAZ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CACR;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACO,CAAC,eAEb3J,OAAA,CAAChC,GAAG;YAAC+J,EAAE,EAAE;cAAE6E,EAAE,EAAE;YAAE,CAAE;YAAAtD,QAAA,EACdmE,aAAa,CAACvH,iBAAiB,EAAEtB,MAAM,CAACC,aAAa,EAAED,MAAM,CAACd,MAAM;UAAC;YAAA0F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC,GAhCP/E,MAAM,CAACc,EAAE;MAAA8D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAiCd,CAAC;EAEf,CAAC;EAED,MAAM0F,oBAAoB,GAAIvL,MAAoB,IAAK;IACnD,QAAQA,MAAM;MACV,KAAKnE,YAAY,CAACuK,MAAM;QACpB,OAAO,SAAS;MACpB,KAAKvK,YAAY,CAACkM,OAAO;QACrB,OAAO,SAAS;MACpB,KAAKlM,YAAY,CAAC2P,IAAI;QAClB,OAAO,SAAS;MACpB;QACI,OAAO,SAAS;IACxB;EACJ,CAAC;EAED,MAAMC,kBAAkB,GAAIzL,MAAkB,IAAK;IAC/C,QAAQA,MAAM;MACV,KAAKpE,UAAU,CAACoG,SAAS;QACrB,OAAO,SAAS;MACpB,KAAKpG,UAAU,CAAC8L,WAAW;QACvB,OAAO,SAAS;MACpB,KAAK9L,UAAU,CAACyG,OAAO;QACnB,OAAO,SAAS;MACpB;QACI,OAAO,SAAS;IACxB;EACJ,CAAC;EAED,MAAMqJ,eAAe,GAAGA,CAACC,CAAuB,EAAEC,QAAgB,KAAK;IACnE;IACA/N,YAAY,CAAC+N,QAAmB,CAAC;IACjCjP,aAAa,CAAC,EAAE,CAAC;IACjBQ,cAAc,CAAC,CAAC,CAAC;IACjBE,aAAa,CAAC,CAAC,CAAC;IAChBE,gBAAgB,CAAC,EAAE,CAAC;IACpBE,aAAa,CAAC,EAAE,CAAC;IACjBE,QAAQ,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,MAAMkO,kBAAkB,GAAGA,CAAA,KAAM;IAC7B5N,UAAU,CAACgC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;IACtB/B,uBAAuB,CAAC,IAAI,CAAC;EACjC,CAAC;;EAED;EACA,MAAM2N,gBAAgB,GAAIC,EAAU,IAAK;IACrC,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACH,EAAE,GAAG,IAAI,CAAC;IAC1C,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACF,YAAY,GAAG,EAAE,CAAC;IAC7C,MAAMI,OAAO,GAAGJ,YAAY,GAAG,EAAE;IACjC,OAAO,GAAGG,OAAO,IAAIC,OAAO,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EAC9D,CAAC;EAED,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;IACjC,IAAI,CAACzO,SAAS,IAAI,CAACE,OAAO,EAAE,OAAO,IAAI;IACvC,MAAMwO,SAAS,GAAGxO,OAAO,GAAGF,SAAS;IAErC,oBACI5B,OAAA,CAACzB,MAAM;MACHgS,IAAI,EAAEvO,oBAAqB;MAC3BwO,OAAO,EAAEA,CAAA,KAAMvO,uBAAuB,CAAC,KAAK,CAAE;MAC9CwO,UAAU,EAAE;QACR1I,EAAE,EAAE;UACAK,YAAY,EAAE,CAAC;UACf6B,CAAC,EAAE;QACP;MACJ,CAAE;MAAAX,QAAA,gBAEFtJ,OAAA,CAACxB,WAAW;QAACuJ,EAAE,EAAE;UAAE2I,SAAS,EAAE,QAAQ;UAAE1H,KAAK,EAAE;QAAe,CAAE;QAAAM,QAAA,EAAC;MAEjE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,eACd3J,OAAA,CAACvB,aAAa;QAAA6K,QAAA,eACVtJ,OAAA,CAAChC,GAAG;UAAC+J,EAAE,EAAE;YACLW,OAAO,EAAE,MAAM;YACfiI,aAAa,EAAE,QAAQ;YACvBhI,UAAU,EAAE,QAAQ;YACpB+F,GAAG,EAAE,CAAC;YACNkC,EAAE,EAAE;UACR,CAAE;UAAAtH,QAAA,gBACEtJ,OAAA,CAAC5B,UAAU;YAACuP,OAAO,EAAC,IAAI;YAAArE,QAAA,GAAC,cACT,EAACsG,gBAAgB,CAAC9N,OAAO,GAAGF,SAAS,CAAC;UAAA;YAAA4H,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1C,CAAC,eACb3J,OAAA,CAAC5B,UAAU;YAACuP,OAAO,EAAC,OAAO;YAAC3E,KAAK,EAAC,gBAAgB;YAAAM,QAAA,EAAC;UAEnD;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACK,CAAC,eAChB3J,OAAA,CAACtB,aAAa;QAACqJ,EAAE,EAAE;UAAEa,cAAc,EAAE;QAAS,CAAE;QAAAU,QAAA,eAC5CtJ,OAAA,CAAC/B,MAAM;UACH0P,OAAO,EAAC,WAAW;UACnBtB,OAAO,EAAEA,CAAA,KAAM;YACXpK,uBAAuB,CAAC,KAAK,CAAC;YAC9B4O,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;UAC9B,CAAE;UAAAzH,QAAA,EACL;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAEjB,CAAC;EAED,MAAMqH,kBAAkB,GAAGA,CAAA,KAAM;IAC7B3O,iBAAiB,CAAC,IAAI,CAAC;EAC3B,CAAC;;EAED;EACA,MAAM4O,sBAAsB,GAAGA,CAAA,KAAM;IACjC;IACA5Q,SAAS,CAAC,EAAE,CAAC;IACbE,OAAO,CAAC,IAAI,CAAC;IACbM,YAAY,CAAC,IAAI,CAAC;IAClBgB,YAAY,CAAC,IAAI,CAAC;IAClBE,UAAU,CAAC,IAAI,CAAC;IAChB;IACAtB,aAAa,CAAC,EAAE,CAAC;IACjBQ,cAAc,CAAC,CAAC,CAAC;IACjBM,aAAa,CAAC,EAAE,CAAC;IACjBE,QAAQ,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,MAAMyP,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAACtP,SAAS,IAAI,CAACE,OAAO,EAAE,OAAO,IAAI;IACvC,MAAMwO,SAAS,GAAGxO,OAAO,GAAGF,SAAS;IAErC,oBACI5B,OAAA,CAAChC,GAAG;MAAC+J,EAAE,EAAE;QACLkC,CAAC,EAAE,CAAC;QACJpB,eAAe,EAAE,oBAAoB;QACrCsI,SAAS,EAAE,OAAO;QAClBzI,OAAO,EAAE,MAAM;QACfiI,aAAa,EAAE,QAAQ;QACvBhI,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE;MACpB,CAAE;MAAAU,QAAA,eACEtJ,OAAA,CAAC9B,IAAI;QAAC6J,EAAE,EAAE;UACNqJ,QAAQ,EAAE,GAAG;UACbpJ,KAAK,EAAE,MAAM;UACbiC,CAAC,EAAE,CAAC;UACJyG,SAAS,EAAE;QACf,CAAE;QAAApH,QAAA,gBACEtJ,OAAA,CAAC5B,UAAU;UAACuP,OAAO,EAAC,IAAI;UAAC5F,EAAE,EAAE;YAAE6E,EAAE,EAAE,CAAC;YAAE5D,KAAK,EAAE;UAAe,CAAE;UAAAM,QAAA,EAAC;QAE/D;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACb3J,OAAA,CAAC5B,UAAU;UAACuP,OAAO,EAAC,IAAI;UAAC5F,EAAE,EAAE;YAAE6E,EAAE,EAAE;UAAE,CAAE;UAAAtD,QAAA,GAAC,cACxB,EAACsG,gBAAgB,CAACU,SAAS,CAAC;QAAA;UAAA9G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC,eACb3J,OAAA,CAAC/B,MAAM;UACH0P,OAAO,EAAC,WAAW;UACnBtB,OAAO,EAAE4E,sBAAuB;UAChC1C,IAAI,EAAC,OAAO;UAAAjF,QAAA,EACf;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAEd,CAAC;EAED,MAAM0H,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAAC/Q,IAAI,EAAE,OAAO,IAAI;IAEtB,oBACIN,OAAA,CAAChC,GAAG;MAAC+J,EAAE,EAAE;QAAEkC,CAAC,EAAE;MAAE,CAAE;MAAAX,QAAA,gBACdtJ,OAAA,CAAC5B,UAAU;QAACuP,OAAO,EAAC,IAAI;QAAC5F,EAAE,EAAE;UAAE6E,EAAE,EAAE,CAAC;UAAE5D,KAAK,EAAE;QAAe,CAAE;QAAAM,QAAA,EAAC;MAE/D;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,EACZ2H,KAAK,CAACC,IAAI,CAAC;QAAE3L,MAAM,EAAEtF,IAAI,CAAC6E;MAAY,CAAC,EAAE,CAACsK,CAAC,EAAE+B,CAAC,KAAKA,CAAC,GAAG,CAAC,CAAC,CAAClL,GAAG,CAACrB,QAAQ,iBACnEjF,OAAA,CAAChC,GAAG;QAAgB+J,EAAE,EAAE;UAAE6E,EAAE,EAAE;QAAE,CAAE;QAAAtD,QAAA,gBAC9BtJ,OAAA,CAAC5B,UAAU;UAACuP,OAAO,EAAC,WAAW;UAAC5F,EAAE,EAAE;YAAEoB,UAAU,EAAE,MAAM;YAAEyD,EAAE,EAAE;UAAE,CAAE;UAAAtD,QAAA,GAAC,QACzD,EAACrE,QAAQ;QAAA;UAAAuE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC,eACb3J,OAAA,CAACf,cAAc;UAACwS,SAAS,EAAElS,KAAM;UAACwI,EAAE,EAAE;YAAE6E,EAAE,EAAE;UAAE,CAAE;UAAAtD,QAAA,eAC5CtJ,OAAA,CAACd,KAAK;YAACqP,IAAI,EAAC,OAAO;YAAAjF,QAAA,gBACftJ,OAAA,CAACb,SAAS;cAAAmK,QAAA,eACNtJ,OAAA,CAACV,QAAQ;gBAAAgK,QAAA,gBACLtJ,OAAA,CAACX,SAAS;kBAAAiK,QAAA,EAAC;gBAAM;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eAC7B3J,OAAA,CAACX,SAAS;kBAACqS,KAAK,EAAC,OAAO;kBAAApI,QAAA,EAAC;gBAAI;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eACzC3J,OAAA,CAACX,SAAS;kBAACqS,KAAK,EAAC,OAAO;kBAAApI,QAAA,EAAC;gBAAM;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACrC;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACJ,CAAC,eACZ3J,OAAA,CAACZ,SAAS;cAAAkK,QAAA,GACLhJ,IAAI,CAACiE,OAAO,CAAC+B,GAAG,CAAC1B,MAAM,IAAI;gBAAA,IAAA+M,qBAAA,EAAAC,qBAAA,EAAAC,sBAAA;gBACxB,MAAMxM,UAAU,GAAG/E,IAAI,CAACgE,KAAK,CAACgB,MAAM,CAACC,CAAC,IAClCA,CAAC,CAACC,YAAY,KAAKP,QAAQ,IAC3BM,CAAC,CAACE,WAAW,KAAKb,MAAM,CAACc,EAC7B,CAAC;gBACD,MAAMoM,WAAW,GAAGzM,UAAU,CAACO,MAAM,GAAG,CAAC,IAAIP,UAAU,CAACQ,KAAK,CAACN,CAAC,IAAIA,CAAC,CAACzB,MAAM,KAAKpE,UAAU,CAACoG,SAAS,CAAC;gBACrG,MAAMiM,UAAU,GAAG,EAAAJ,qBAAA,GAAA/M,MAAM,CAACE,gBAAgB,cAAA6M,qBAAA,uBAAvBA,qBAAA,CAA0B1M,QAAQ,CAAC,KAAI,IAAI;gBAC9D,MAAM+M,cAAc,IAAAJ,qBAAA,GAAGhN,MAAM,CAACqN,qBAAqB,cAAAL,qBAAA,uBAA5BA,qBAAA,CAA+B3M,QAAQ,CAAC;gBAC/D,MAAMrD,SAAS,IAAAiQ,sBAAA,GAAGjN,MAAM,CAACE,gBAAgB,cAAA+M,sBAAA,uBAAvBA,sBAAA,CAA0B5M,QAAQ,CAAC;;gBAErD;gBACA,IAAIiN,WAAW,GAAG,GAAG;gBACrB,IAAIF,cAAc,EAAE;kBAChBE,WAAW,GAAGtC,gBAAgB,CAACoC,cAAc,CAAC;gBAClD,CAAC,MAAM,IAAID,UAAU,IAAInQ,SAAS,EAAE;kBAChC,MAAMM,WAAW,GAAG6B,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGpC,SAAS;kBAC1CsQ,WAAW,GAAGtC,gBAAgB,CAAC1N,WAAW,CAAC;gBAC/C;gBAEA,IAAI4B,MAAM,GAAG,SAAS;gBACtB,IAAIgO,WAAW,EAAE;kBACbhO,MAAM,GAAG,WAAW;gBACxB,CAAC,MAAM,IAAIiO,UAAU,EAAE;kBACnBjO,MAAM,GAAG,aAAa;gBAC1B;gBAEA,oBACI9D,OAAA,CAACV,QAAQ;kBAAAgK,QAAA,gBACLtJ,OAAA,CAACX,SAAS;oBAAAiK,QAAA,EAAE1E,MAAM,CAACoK;kBAAI;oBAAAxF,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAY,CAAC,eACpC3J,OAAA,CAACX,SAAS;oBAACqS,KAAK,EAAC,OAAO;oBAAApI,QAAA,EAAE4I;kBAAW;oBAAA1I,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAY,CAAC,eAClD3J,OAAA,CAACX,SAAS;oBAACqS,KAAK,EAAC,OAAO;oBAAApI,QAAA,eACpBtJ,OAAA,CAAClB,IAAI;sBACDmQ,KAAK,EAAEnL,MAAO;sBACdyK,IAAI,EAAC,OAAO;sBACZvF,KAAK,EAAE8I,WAAW,GAAG,SAAS,GAAIC,UAAU,GAAG,SAAS,GAAG;oBAAW;sBAAAvI,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACzE;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACK,CAAC;gBAAA,GATD/E,MAAM,CAACc,EAAE;kBAAA8D,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAUd,CAAC;cAEnB,CAAC,CAAC,eACF3J,OAAA,CAACV,QAAQ;gBAACyI,EAAE,EAAE;kBAAEc,eAAe,EAAE;gBAAsB,CAAE;gBAAAS,QAAA,gBACrDtJ,OAAA,CAACX,SAAS;kBAAAiK,QAAA,eAACtJ,OAAA;oBAAAsJ,QAAA,EAAQ;kBAAK;oBAAAE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eAC7C3J,OAAA,CAACX,SAAS;kBAACqS,KAAK,EAAC,OAAO;kBAAApI,QAAA,eACpBtJ,OAAA;oBAAAsJ,QAAA,EACKsG,gBAAgB,CAACtP,IAAI,CAACiE,OAAO,CAAC4N,MAAM,CAAC,CAACC,GAAG,EAAEnI,CAAC;sBAAA,IAAAoI,qBAAA;sBAAA,OACzCD,GAAG,IAAI,EAAAC,qBAAA,GAAApI,CAAC,CAACgI,qBAAqB,cAAAI,qBAAA,uBAAvBA,qBAAA,CAA0BpN,QAAQ,CAAC,KAAI,CAAC,CAAC;oBAAA,GAChD,CACJ,CAAC;kBAAC;oBAAAuE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACE;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACF,CAAC,eACZ3J,OAAA,CAACX,SAAS;kBAAAmK,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACJ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA,GApEX1E,QAAQ;QAAAuE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAqEb,CACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAEd,CAAC;;EAED;EACA,MAAM2I,gBAAgB,GAAGzU,KAAK,CAAC0U,OAAO,CAAC,MAAM;IACzC,IAAI,EAACjS,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEgE,KAAK,GAAE,OAAO,CAAC,CAAC;IAC3B,MAAMkO,YAAuC,GAAG,CAAC,CAAC;IAClDlS,IAAI,CAACgE,KAAK,CAACK,OAAO,CAAC2G,IAAI,IAAI;MACvB,IAAI,CAACkH,YAAY,CAAClH,IAAI,CAAC9F,YAAY,CAAC,EAAE;QAClCgN,YAAY,CAAClH,IAAI,CAAC9F,YAAY,CAAC,GAAG,EAAE;MACxC;MACAgN,YAAY,CAAClH,IAAI,CAAC9F,YAAY,CAAC,CAACiB,IAAI,CAAC6E,IAAI,CAAC;IAC9C,CAAC,CAAC;IACF,OAAOkH,YAAY;EACvB,CAAC,EAAE,CAAClS,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgE,KAAK,CAAC,CAAC;;EAEjB;EACA,MAAMmO,cAAc,GAAG5U,KAAK,CAAC0U,OAAO,CAAC,MAAM;IACvC,IAAI,EAACjS,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEgE,KAAK,KAAI,EAAChE,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEiE,OAAO,GAAE,OAAO,CAAC,CAAC;IAC7C,MAAM0B,WAAsC,GAAG,CAAC,CAAC;IACjD3F,IAAI,CAACiE,OAAO,CAACI,OAAO,CAACC,MAAM,IAAI;MAC3BqB,WAAW,CAACrB,MAAM,CAACc,EAAE,CAAC,GAAGpF,IAAI,CAACgE,KAAK,CAACgB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACE,WAAW,KAAKb,MAAM,CAACc,EAAE,CAAC;IAChF,CAAC,CAAC;IACF,OAAOO,WAAW;EACtB,CAAC,EAAE,CAAC3F,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgE,KAAK,EAAEhE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiE,OAAO,CAAC,CAAC;EAEhCxG,SAAS,CAAC,MAAM;IACZ,IAAI,EAACuC,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEgE,KAAK,KAAI,CAAC1C,SAAS,EAAE;IAEhC,MAAM8Q,QAAQ,GAAG;MAAE,GAAGpP;IAAW,CAAC;;IAElC;IACA,KAAK,IAAI2B,QAAQ,GAAG,CAAC,EAAEA,QAAQ,KAAK3E,IAAI,CAAC6E,WAAW,IAAI,CAAC,CAAC,EAAEF,QAAQ,EAAE,EAAE;MACpE,IAAI,CAACyN,QAAQ,CAACzN,QAAQ,CAAC,EAAE;QACrByN,QAAQ,CAACzN,QAAQ,CAAC,GAAG,CAAC,CAAC;MAC3B;;MAEA;MACA3E,IAAI,CAACiE,OAAO,CAACI,OAAO,CAACC,MAAM,IAAI;QAC3B,MAAMS,UAAU,GAAG/E,IAAI,CAACgE,KAAK,CAACgB,MAAM,CAACC,CAAC,IAClCA,CAAC,CAACC,YAAY,KAAKP,QAAQ,IAC3BM,CAAC,CAACE,WAAW,KAAKb,MAAM,CAACc,EAC7B,CAAC;QAED,MAAMiN,cAAc,GAAGtN,UAAU,CAACC,MAAM,CAACC,CAAC,IACtCA,CAAC,CAACzB,MAAM,KAAKpE,UAAU,CAACoG,SAC5B,CAAC;;QAED;QACA,IAAIT,UAAU,CAACO,MAAM,GAAG,CAAC,IAAI+M,cAAc,CAAC/M,MAAM,KAAKP,UAAU,CAACO,MAAM,EAAE;UACtE;UACA,IAAI,CAAC8M,QAAQ,CAACzN,QAAQ,CAAC,CAACL,MAAM,CAACc,EAAE,CAAC,EAAE;YAChCgN,QAAQ,CAACzN,QAAQ,CAAC,CAACL,MAAM,CAACc,EAAE,CAAC,GAAG;cAC5BsM,cAAc,EAAE5O,WAAW;cAC3BwP,cAAc,EAAED,cAAc,CAAC/M,MAAM;cACrCiN,UAAU,EAAExN,UAAU,CAACO;YAC3B,CAAC;UACL;QACJ,CAAC,MAAM,IAAIP,UAAU,CAACO,MAAM,GAAG,CAAC,EAAE;UAC9B;UACA8M,QAAQ,CAACzN,QAAQ,CAAC,CAACL,MAAM,CAACc,EAAE,CAAC,GAAG;YAC5BsM,cAAc,EAAE,CAAC;YACjBY,cAAc,EAAED,cAAc,CAAC/M,MAAM;YACrCiN,UAAU,EAAExN,UAAU,CAACO;UAC3B,CAAC;QACL;MACJ,CAAC,CAAC;IACN;IAEArC,aAAa,CAACmP,QAAQ,CAAC;EAC3B,CAAC,EAAE,CAACpS,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgE,KAAK,EAAE1C,SAAS,EAAEwB,WAAW,CAAC,CAAC;EAEzCrF,SAAS,CAAC,MAAM;IACZ,IAAI,EAACuC,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEgE,KAAK,KAAI,CAAC1C,SAAS,EAAE;IAEhC,MAAM6C,kBAAkB,GAAG;MAAE,GAAGnC;IAAqB,CAAC;IACtD,MAAMkC,aAAa,GAAG;MAAE,GAAGhC;IAAgB,CAAC;IAC5C,IAAIkC,UAAU,GAAG,KAAK;IAEtBK,MAAM,CAACC,OAAO,CAACsN,gBAAgB,CAAC,CAAC3N,OAAO,CAAC,CAAC,CAACM,QAAQ,EAAEX,KAAK,CAAC,KAAK;MAC5D,MAAMwO,WAAW,GAAGC,QAAQ,CAAC9N,QAAQ,CAAC;MACtC,IAAI,CAACT,aAAa,CAACsO,WAAW,CAAC,EAAE;QAC7BtO,aAAa,CAACsO,WAAW,CAAC,GAAG,CAAC,CAAC;QAC/BpO,UAAU,GAAG,IAAI;MACrB;MACA,IAAI,CAACD,kBAAkB,CAACqO,WAAW,CAAC,EAAE;QAClCrO,kBAAkB,CAACqO,WAAW,CAAC,GAAG,CAAC,CAAC;QACpCpO,UAAU,GAAG,IAAI;MACrB;MAEApE,IAAI,CAACiE,OAAO,CAACI,OAAO,CAACC,MAAM,IAAI;QAC3B,MAAMqB,WAAW,GAAG3B,KAAK,CAACgB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACE,WAAW,KAAKb,MAAM,CAACc,EAAE,CAAC;QAClE,IAAIO,WAAW,CAACL,MAAM,GAAG,CAAC,IACtBK,WAAW,CAACJ,KAAK,CAACN,CAAC,IAAIA,CAAC,CAACzB,MAAM,KAAKpE,UAAU,CAACoG,SAAS,CAAC,IACzD,CAACrB,kBAAkB,CAACqO,WAAW,CAAC,CAAClO,MAAM,CAACc,EAAE,CAAC,EAAE;UAAA,IAAAsN,qBAAA;UAC7C,MAAMC,cAAc,GAAG,EAAAD,qBAAA,GAAAxO,aAAa,CAACsO,WAAW,CAAC,cAAAE,qBAAA,uBAA1BA,qBAAA,CAA6BF,WAAW,CAAC,KAAIlR,SAAS;UAC7E6C,kBAAkB,CAACqO,WAAW,CAAC,CAAClO,MAAM,CAACc,EAAE,CAAC,GAAG3B,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGiP,cAAc;UACxEvO,UAAU,GAAG,IAAI;QACrB;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;;IAEF;IACA,IAAIA,UAAU,EAAE;MACZjC,kBAAkB,CAAC+B,aAAa,CAAC;MACjCjC,uBAAuB,CAACkC,kBAAkB,CAAC;IAC/C;EACJ,CAAC,EAAE,CAACnE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiE,OAAO,EAAE+N,gBAAgB,EAAE1Q,SAAS,CAAC,CAAC;EAEhD7D,SAAS,CAAC,MAAM;IACZ,IAAIuC,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEgE,KAAK,IAAI1C,SAAS,EAAE;MAC1B,MAAM8Q,QAAQ,GAAG;QAAE,GAAGpP;MAAW,CAAC;;MAElC;MACA,KAAK,IAAI2B,QAAQ,GAAG,CAAC,EAAEA,QAAQ,KAAK3E,IAAI,CAAC6E,WAAW,IAAI,CAAC,CAAC,EAAEF,QAAQ,EAAE,EAAE;QACpE,IAAI,CAACyN,QAAQ,CAACzN,QAAQ,CAAC,EAAE;UACrByN,QAAQ,CAACzN,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC3B;;QAEA;QACA3E,IAAI,CAACiE,OAAO,CAACI,OAAO,CAACC,MAAM,IAAI;UAC3B,MAAMS,UAAU,GAAG/E,IAAI,CAACgE,KAAK,CAACgB,MAAM,CAACC,CAAC,IAClCA,CAAC,CAACC,YAAY,KAAKP,QAAQ,IAC3BM,CAAC,CAACE,WAAW,KAAKb,MAAM,CAACc,EAC7B,CAAC;UAED,MAAMiN,cAAc,GAAGtN,UAAU,CAACC,MAAM,CAACC,CAAC,IACtCA,CAAC,CAACzB,MAAM,KAAKpE,UAAU,CAACoG,SAC5B,CAAC;;UAED;UACA,IAAIT,UAAU,CAACO,MAAM,GAAG,CAAC,IAAI+M,cAAc,CAAC/M,MAAM,KAAKP,UAAU,CAACO,MAAM,EAAE;YACtE;YACA,IAAI,CAAC8M,QAAQ,CAACzN,QAAQ,CAAC,CAACL,MAAM,CAACc,EAAE,CAAC,EAAE;cAChCgN,QAAQ,CAACzN,QAAQ,CAAC,CAACL,MAAM,CAACc,EAAE,CAAC,GAAG;gBAC5BsM,cAAc,EAAE5O,WAAW;gBAC3BwP,cAAc,EAAED,cAAc,CAAC/M,MAAM;gBACrCiN,UAAU,EAAExN,UAAU,CAACO;cAC3B,CAAC;YACL;UACJ,CAAC,MAAM,IAAIP,UAAU,CAACO,MAAM,GAAG,CAAC,EAAE;YAC9B;YACA8M,QAAQ,CAACzN,QAAQ,CAAC,CAACL,MAAM,CAACc,EAAE,CAAC,GAAG;cAC5BsM,cAAc,EAAE,CAAC;cACjBY,cAAc,EAAED,cAAc,CAAC/M,MAAM;cACrCiN,UAAU,EAAExN,UAAU,CAACO;YAC3B,CAAC;UACL;QACJ,CAAC,CAAC;MACN;MAEArC,aAAa,CAACmP,QAAQ,CAAC;IAC3B;EACJ,CAAC,EAAE,CAACpS,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgE,KAAK,EAAE1C,SAAS,EAAEwB,WAAW,CAAC,CAAC;;EAEzC;EACA,MAAM8P,qBAAqB,GAAGA,CAACjO,QAAgB,EAAEL,MAAc,KAAK;IAAA,IAAAuO,oBAAA;IAChE,MAAMC,KAAK,IAAAD,oBAAA,GAAG7P,UAAU,CAAC2B,QAAQ,CAAC,cAAAkO,oBAAA,uBAApBA,oBAAA,CAAuBvO,MAAM,CAACc,EAAE,CAAC;IAE/C,oBACI1F,OAAA,CAACV,QAAQ;MAAAgK,QAAA,gBACLtJ,OAAA,CAACX,SAAS;QAAAiK,QAAA,EAAE1E,MAAM,CAACoK;MAAI;QAAAxF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACpC3J,OAAA,CAACX,SAAS;QAACqS,KAAK,EAAC,OAAO;QAAApI,QAAA,EACnB8J,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEpB,cAAc,GAAGpC,gBAAgB,CAACwD,KAAK,CAACpB,cAAc,CAAC,GAAG;MAAG;QAAAxI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9D,CAAC,eACZ3J,OAAA,CAACX,SAAS;QAACqS,KAAK,EAAC,OAAO;QAAApI,QAAA,GACnB8J,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAER,cAAc,EAAC,GAAC,EAAC,CAAAQ,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEP,UAAU,KAAI,CAAC;MAAA;QAAArJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC;IAAA,GAPD/E,MAAM,CAACc,EAAE;MAAA8D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQd,CAAC;EAEnB,CAAC;;EAED;EACA,MAAM0J,cAAc,GAAGA,CAAA,kBACnBrT,OAAA,CAAC9B,IAAI;IAAC6J,EAAE,EAAE;MACNqJ,QAAQ,EAAE,GAAG;MACbpJ,KAAK,EAAE,MAAM;MACbsL,EAAE,EAAE,MAAM;MACVnE,EAAE,EAAE;IACR,CAAE;IAAA7F,QAAA,gBAEEtJ,OAAA,CAAChC,GAAG;MAAC+J,EAAE,EAAE;QACLe,UAAU,EAAE,mDAAmD;QAC/DmB,CAAC,EAAE,CAAC;QACJsJ,mBAAmB,EAAE,CAAC;QACtBC,oBAAoB,EAAE;MAC1B,CAAE;MAAAlK,QAAA,gBACEtJ,OAAA,CAAC5B,UAAU;QAACuP,OAAO,EAAC,IAAI;QAAC5F,EAAE,EAAE;UACzBoB,UAAU,EAAE,MAAM;UAClBL,UAAU,EAAE,kDAAkD;UAC9D2K,oBAAoB,EAAE,MAAM;UAC5BC,mBAAmB,EAAE,aAAa;UAClCC,UAAU,EAAE,6BAA6B;UACzCjD,SAAS,EAAE,QAAQ;UACnB9D,EAAE,EAAE;QACR,CAAE;QAAAtD,QAAA,EAAC;MAEH;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACb3J,OAAA,CAAC5B,UAAU;QAACuP,OAAO,EAAC,WAAW;QAAC3E,KAAK,EAAC,gBAAgB;QAAC0I,KAAK,EAAC,QAAQ;QAAApI,QAAA,EAAC;MAEtE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,eAGN3J,OAAA,CAAChC,GAAG;MAAC+J,EAAE,EAAE;QACLe,UAAU,EAAE,SAAS;QACrBmB,CAAC,EAAE,CAAC;QACJ2J,sBAAsB,EAAE,CAAC;QACzBC,uBAAuB,EAAE;MAC7B,CAAE;MAAAvK,QAAA,gBACEtJ,OAAA,CAACrB,IAAI;QAACmV,KAAK,EAAEpS,SAAU;QAACqS,QAAQ,EAAEA,CAACnN,CAAC,EAAE8I,QAAQ,KAAK;UAC/C/N,YAAY,CAAC+N,QAAmB,CAAC;UACjC;UACAjP,aAAa,CAAC,EAAE,CAAC;UACjBQ,cAAc,CAAC,CAAC,CAAC;UACjBM,aAAa,CAAC,EAAE,CAAC;UACjBE,QAAQ,CAAC,IAAI,CAAC;QAClB,CAAE;QAACsG,EAAE,EAAE;UAAE6E,EAAE,EAAE;QAAE,CAAE;QAAAtD,QAAA,gBACbtJ,OAAA,CAACpB,GAAG;UAACqQ,KAAK,EAAC;QAAa;UAAAzF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC3B3J,OAAA,CAACpB,GAAG;UAACqQ,KAAK,EAAC;QAAW;UAAAzF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC,EAENjI,SAAS,KAAK,CAAC;MAAA;MACZ;MACA1B,OAAA,CAAChC,GAAG;QAACyT,SAAS,EAAC,MAAM;QAACuC,QAAQ,EAAErN,gBAAiB;QAAA2C,QAAA,gBAC7CtJ,OAAA,CAAC1B,SAAS;UACN2V,SAAS;UACThF,KAAK,EAAC,WAAW;UACjBiF,QAAQ;UACRJ,KAAK,EAAEtT,UAAW;UAClBuT,QAAQ,EAAGnN,CAAC,IAAKnG,aAAa,CAACmG,CAAC,CAACuN,MAAM,CAACL,KAAK,CAAE;UAC/C/L,EAAE,EAAE;YAAE6E,EAAE,EAAE;UAAE,CAAE;UACdwH,YAAY,EAAC;QAAK;UAAA5K,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,eACF3J,OAAA,CAAC1B,SAAS;UACN2V,SAAS;UACThF,KAAK,EAAC,mBAAmB;UACzBnH,IAAI,EAAC,QAAQ;UACboM,QAAQ;UACRJ,KAAK,EAAE9S,WAAY;UACnB+S,QAAQ,EAAGnN,CAAC,IAAK3F,cAAc,CAACiE,MAAM,CAAC0B,CAAC,CAACuN,MAAM,CAACL,KAAK,CAAC,CAAE;UACxDO,UAAU,EAAE;YAAEC,GAAG,EAAE,CAAC;YAAEC,GAAG,EAAE;UAAE,CAAE;UAC/BC,UAAU,EAAC,8BAA8B;UACzCzM,EAAE,EAAE;YAAE6E,EAAE,EAAE;UAAE,CAAE;UACdwH,YAAY,EAAC;QAAK;UAAA5K,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,eACF3J,OAAA,CAAC/B,MAAM;UACHgW,SAAS;UACTtG,OAAO,EAAC,WAAW;UACnB7F,IAAI,EAAC,QAAQ;UACb0G,QAAQ,EAAE,CAAChO,UAAU,IAAIQ,WAAW,GAAG,CAAC,IAAIA,WAAW,GAAG,CAAE;UAAAsI,QAAA,EAC/D;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;MAAA;MAEN;MACA3J,OAAA,CAAChC,GAAG;QAACyT,SAAS,EAAC,MAAM;QAACuC,QAAQ,EAAE1M,cAAe;QAAAgC,QAAA,gBAC3CtJ,OAAA,CAAC1B,SAAS;UACN2V,SAAS;UACThF,KAAK,EAAC,WAAW;UACjBiF,QAAQ;UACRJ,KAAK,EAAEtT,UAAW;UAClBuT,QAAQ,EAAGnN,CAAC,IAAKnG,aAAa,CAACmG,CAAC,CAACuN,MAAM,CAACL,KAAK,CAAE;UAC/C/L,EAAE,EAAE;YAAE6E,EAAE,EAAE;UAAE,CAAE;UACdwH,YAAY,EAAC;QAAK;UAAA5K,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,eACF3J,OAAA,CAAC1B,SAAS;UACN2V,SAAS;UACThF,KAAK,EAAC,WAAW;UACjBiF,QAAQ;UACRJ,KAAK,EAAExS,UAAW;UAClByS,QAAQ,EAAGnN,CAAC,IAAKrF,aAAa,CAACqF,CAAC,CAACuN,MAAM,CAACL,KAAK,CAAE;UAC/C/L,EAAE,EAAE;YAAE6E,EAAE,EAAE;UAAE,CAAE;UACdwH,YAAY,EAAC;QAAK;UAAA5K,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,eACF3J,OAAA,CAAC/B,MAAM;UACHgW,SAAS;UACTtG,OAAO,EAAC,WAAW;UACnB7F,IAAI,EAAC,QAAQ;UACb0G,QAAQ,EAAE,CAAChO,UAAU,IAAI,CAACc,UAAW;UAAAgI,QAAA,EACxC;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CACT;EAED,MAAM8K,UAAU,GAAGA,CAAA,KAAM;IAAA,IAAAC,cAAA;IACrB,IAAI,CAACpU,IAAI,EAAE,OAAO,IAAI;IAEtB,oBACIN,OAAA,CAAChC,GAAG;MAAC+J,EAAE,EAAE;QAAEkC,CAAC,EAAE,CAAC;QAAEpB,eAAe,EAAE,oBAAoB;QAAEsI,SAAS,EAAE;MAAQ,CAAE;MAAA7H,QAAA,gBAEzEtJ,OAAA,CAAChC,GAAG;QAAC+J,EAAE,EAAE;UACLW,OAAO,EAAE,MAAM;UACfE,cAAc,EAAE,eAAe;UAC/BD,UAAU,EAAE,QAAQ;UACpBiE,EAAE,EAAE;QACR,CAAE;QAAAtD,QAAA,gBACEtJ,OAAA,CAAChC,GAAG;UAAAsL,QAAA,gBACAtJ,OAAA,CAAC5B,UAAU;YAACuP,OAAO,EAAC,IAAI;YAAC5F,EAAE,EAAE;cAAE6E,EAAE,EAAE,CAAC;cAAE5D,KAAK,EAAE;YAAe,CAAE;YAAAM,QAAA,GAAC,WAClD,EAAChJ,IAAI,CAACoF,EAAE;UAAA;YAAA8D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC,eACb3J,OAAA,CAAC5B,UAAU;YAACuP,OAAO,EAAC,IAAI;YAAC5F,EAAE,EAAE;cAAEiB,KAAK,EAAE;YAAe,CAAE;YAAAM,QAAA,GAAC,UAC5C,EAAChJ,IAAI,CAACwD,MAAM,KAAK,SAAS,GAAG,SAAS,GAAGxD,IAAI,CAACwD,MAAM,KAAK,aAAa,GAAG,aAAa,GAAG,WAAW;UAAA;YAAA0F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ,CAAC,EACL,CAACrJ,IAAI,CAACwD,MAAM,KAAK,aAAa,IAAIxD,IAAI,CAACwD,MAAM,KAAK,WAAW,KAAKlC,SAAS,iBACxE5B,OAAA,CAAC5B,UAAU;UAACuP,OAAO,EAAC,IAAI;UAAC5F,EAAE,EAAE;YAAEiB,KAAK,EAAE;UAAiB,CAAE;UAAAM,QAAA,GAAC,QAChD,EAACsG,gBAAgB,CAACxM,WAAW,CAAC;QAAA;UAAAoG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CACf;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,EAGLrJ,IAAI,CAACwD,MAAM,KAAK,SAAS,IAAIpD,QAAQ,OAAAgU,cAAA,GAAKpU,IAAI,CAACiE,OAAO,CAAC,CAAC,CAAC,cAAAmQ,cAAA,uBAAfA,cAAA,CAAiBhP,EAAE,kBAC1D1F,OAAA,CAAC/B,MAAM;QACH0P,OAAO,EAAC,WAAW;QACnBtB,OAAO,EAAE3E,eAAgB;QACzBK,EAAE,EAAE;UAAE6E,EAAE,EAAE;QAAE,CAAE;QAAAtD,QAAA,EACjB;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACX,eAGD3J,OAAA,CAAC3B,IAAI;QAACsW,SAAS;QAACC,OAAO,EAAE,CAAE;QAAAtL,QAAA,gBAEvBtJ,OAAA,CAAC3B,IAAI;UAACwW,IAAI;UAAC5M,EAAE,EAAE,EAAG;UAAC6M,EAAE,EAAE,CAAE;UAAAxL,QAAA,eACrBtJ,OAAA,CAAChB,KAAK;YAAC4V,OAAO,EAAE,CAAE;YAAAtL,QAAA,EACbhJ,IAAI,CAACiE,OAAO,CAAC+B,GAAG,CAACuI,YAAY;UAAC;YAAArF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAGP3J,OAAA,CAAC3B,IAAI;UAACwW,IAAI;UAAC5M,EAAE,EAAE,EAAG;UAAC6M,EAAE,EAAE,CAAE;UAAAxL,QAAA,EACpB+H,gBAAgB,CAAC;QAAC;UAAA7H,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,EAGNrJ,IAAI,CAACwD,MAAM,KAAK,WAAW,iBACxB9D,OAAA,CAAChC,GAAG;QAAC+J,EAAE,EAAE;UAAEoH,EAAE,EAAE,CAAC;UAAEuB,SAAS,EAAE;QAAS,CAAE;QAAApH,QAAA,eACpCtJ,OAAA,CAAC/B,MAAM;UACH0P,OAAO,EAAC,WAAW;UACnBtB,OAAO,EAAE4E,sBAAuB;UAChClJ,EAAE,EAAE;YACAgN,QAAQ,EAAE,GAAG;YACb3M,YAAY,EAAE;UAClB,CAAE;UAAAkB,QAAA,EACL;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAEd,CAAC;;EAED;EACA,MAAMU,wBAAwB,GAAIpF,QAAgB,IAAa;IAC3D,OAAO,EAAE,CAAC,CAAC;EACf,CAAC;;EAED;EACA,MAAM4I,iBAAiB,GAAI5I,QAAgB,IAAsD;IAC7F,MAAM2I,SAAS,GAAG;MACd,CAAC,EAAE,CAAC;QAAE7C,aAAa,EAAE,CAAC;QAAE+C,UAAU,EAAE;MAAG,CAAC,CAAC;MAAG;MAC5C,CAAC,EAAE;MAAG;MACF;QAAE/C,aAAa,EAAE,CAAC;QAAE+C,UAAU,EAAE;MAAG,CAAC,EACpC;QAAE/C,aAAa,EAAE,CAAC;QAAE+C,UAAU,EAAE;MAAG,CAAC,CACvC;MACD,CAAC,EAAE;MAAG;MACF;QAAE/C,aAAa,EAAE,CAAC;QAAE+C,UAAU,EAAE;MAAE,CAAC,EACnC;QAAE/C,aAAa,EAAE,CAAC;QAAE+C,UAAU,EAAE;MAAE,CAAC,EACnC;QAAE/C,aAAa,EAAE,CAAC;QAAE+C,UAAU,EAAE;MAAE,CAAC,EACnC;QAAE/C,aAAa,EAAE,CAAC;QAAE+C,UAAU,EAAE;MAAE,CAAC,CACtC;MACD,CAAC,EAAEwD,KAAK,CAACC,IAAI,CAAC;QAAE3L,MAAM,EAAE;MAAG,CAAC,EAAE,CAAC6J,CAAC,EAAE+B,CAAC,MAAM;QAAG;QACxCzG,aAAa,EAAEyG,CAAC;QAChB1D,UAAU,EAAE;MAChB,CAAC,CAAC;IACN,CAAC;IACD,OAAOF,SAAS,CAAC3I,QAAQ,CAA2B,IAAI,EAAE;EAC9D,CAAC;;EAED;EACA,MAAM+P,eAAe,GAAGA,CAAC/P,QAAgB,EAAE8F,aAAqB,KAAa;IACzE,MAAM6C,SAAS,GAAGC,iBAAiB,CAAC5I,QAAQ,CAAC;IAC7C,MAAMgQ,QAAQ,GAAGrH,SAAS,CAAC5D,IAAI,CAACkL,EAAE,IAAIA,EAAE,CAACnK,aAAa,KAAKA,aAAa,CAAC;IACzE,OAAO,CAAAkK,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEnH,UAAU,KAAI,CAAC;EACpC,CAAC;;EAED;EACA,MAAMM,kBAAkB,GAAGA,CAACnJ,QAAgB,EAAE8F,aAAqB,EAAErK,QAAgB,KAAc;IAC/F,IAAI,CAACJ,IAAI,EAAE,OAAO,KAAK;IACvB,MAAM0N,aAAa,GAAG1N,IAAI,CAACgE,KAAK,CAACgB,MAAM,CAACC,CAAC,IACrCA,CAAC,CAACC,YAAY,KAAKP,QAAQ,IAC3BM,CAAC,CAACgG,gBAAgB,KAAKR,aAAa,IACpCxF,CAAC,CAACE,WAAW,KAAK/E,QACtB,CAAC;IACD,MAAMwN,YAAY,GAAGF,aAAa,CAAC1I,MAAM,CAACC,CAAC,IAAI3C,YAAY,CAAC4D,QAAQ,CAACjB,CAAC,CAACG,EAAE,CAAC,CAAC,CAACE,MAAM;IAClF,OAAOsI,YAAY,IAAI8G,eAAe,CAAC/P,QAAQ,EAAE8F,aAAa,CAAC;EACnE,CAAC;EAED,oBACI/K,OAAA,CAACR,SAAS;IAAA8J,QAAA,GACL,CAACpJ,MAAM,GACJmT,cAAc,CAAC,CAAC,GAChB/S,IAAI,GACJmU,UAAU,CAAC,CAAC,gBAEZzU,OAAA,CAACP,gBAAgB;MAAA+J,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACtB,EAEAnI,KAAK,iBACFxB,OAAA,CAACnB,KAAK;MAACsW,QAAQ,EAAC,OAAO;MAACpN,EAAE,EAAE;QAAEoH,EAAE,EAAE;MAAE,CAAE;MAAA7F,QAAA,EACjC9H;IAAK;MAAAgI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACV;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAEpB,CAAC;AAACvJ,EAAA,CA73CWH,IAAyB;AAAAmV,EAAA,GAAzBnV,IAAyB;AAAA,IAAAmV,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}