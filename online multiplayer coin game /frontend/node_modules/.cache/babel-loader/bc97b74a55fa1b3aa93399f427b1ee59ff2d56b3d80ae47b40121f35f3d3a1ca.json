{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Tabs, Tab, Alert, Chip, Stack, TableContainer, Table, TableHead, TableBody, TableCell, TableRow, Paper, Container, CircularProgress } from '@mui/material';\nimport { TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Game = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  const [gameId, setGameId] = useState(initialGameId);\n  const [game, setGame] = useState(null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerId, setPlayerId] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n  const [playerCount, setPlayerCount] = useState(2);\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(20);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showResultPage, setShowResultPage] = useState(false);\n  const [batchCompletionTimes, setBatchCompletionTimes] = useState({});\n  const [batchStartTimes, setBatchStartTimes] = useState({});\n  const [batchFlipStates, setBatchFlipStates] = useState({});\n\n  // 修改翻转状态的类型定义，加入玩家ID\n  const [flippedCoins, setFlippedCoins] = useState({});\n  const [pendingBatchCompletion, setPendingBatchCompletion] = useState({});\n\n  // 添加翻转动画状态\n\n  const [flipStates, setFlipStates] = useState({});\n\n  // 添加翻转动画状态\n  const [flippingCoins, setFlippingCoins] = useState({});\n\n  // 修改计时器状态和开始时间状态\n  const [elapsedTime, setElapsedTime] = useState(0);\n\n  // 添加批次统计时间的状态\n  const [batchStats, setBatchStats] = useState({});\n\n  // 添加当前子批次的useEffect\n  const [currentSubBatch, setCurrentSubBatch] = useState(0);\n\n  // 添加已完成子批次的状态\n  const [completedSubBatches, setCompletedSubBatches] = useState(new Set());\n\n  // 添加永久翻转状态的记录\n  const [permanentFlippedCoins, setPermanentFlippedCoins] = useState({});\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, updatedGame => {\n        console.log('Game state updated:', updatedGame);\n        setGame(updatedGame);\n\n        // 从更新的游戏状态中同步硬币状态\n        if (updatedGame.tasks) {\n          const flippedCoinsState = {};\n          updatedGame.players.forEach(player => {\n            const playerTasks = updatedGame.tasks.filter(t => t.assigned_to === player.id && t.status === TaskStatus.COMPLETED);\n            flippedCoinsState[player.id] = playerTasks.map(t => t.id);\n          });\n          setFlippedCoins(flippedCoinsState);\n          setPermanentFlippedCoins(flippedCoinsState);\n        }\n      });\n      service.connect();\n\n      // 处理硬币翻转事件\n      service.setOnCoinFlipped((taskId, flippedByPlayerId, coinType) => {\n        const flippedByPlayer = game === null || game === void 0 ? void 0 : game.players.find(p => p.id === flippedByPlayerId);\n        if (flippedByPlayer) {\n          console.log(`Received coin flip from ${flippedByPlayer.name} for coin ${taskId}`);\n        }\n\n        // 立即更新翻转状态\n        setFlippedCoins(prev => ({\n          ...prev,\n          [flippedByPlayerId]: [...(prev[flippedByPlayerId] || []), taskId]\n        }));\n        setPermanentFlippedCoins(prev => ({\n          ...prev,\n          [flippedByPlayerId]: [...(prev[flippedByPlayerId] || []), taskId]\n        }));\n\n        // 触发翻转动画\n        setFlippingCoins(prev => ({\n          ...prev,\n          [taskId]: {\n            isFlipping: true\n          }\n        }));\n        setTimeout(() => {\n          setFlippingCoins(prev => ({\n            ...prev,\n            [taskId]: {\n              isFlipping: false\n            }\n          }));\n        }, 500);\n\n        // 同时更新游戏状态中的任务状态\n        setGame(prevGame => {\n          if (!prevGame) return prevGame;\n          return {\n            ...prevGame,\n            tasks: prevGame.tasks.map(task => task.id === taskId ? {\n              ...task,\n              status: TaskStatus.COMPLETED\n            } : task)\n          };\n        });\n      });\n      setWsService(service);\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId, game === null || game === void 0 ? void 0 : game.players]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  useEffect(() => {\n    let timerInterval = null;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && startTime) {\n      timerInterval = setInterval(() => {\n        setCurrentTime(prev => Date.now() - startTime);\n      }, 1000);\n    }\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'completed' && startTime && !endTime) {\n      setEndTime(Date.now());\n      setShowResultPage(true);\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime, endTime]);\n  useEffect(() => {\n    let intervalId;\n    if (startTime && (game === null || game === void 0 ? void 0 : game.status) === 'in_progress') {\n      intervalId = setInterval(() => {\n        setElapsedTime(prev => Date.now() - startTime);\n      }, 1000);\n    }\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [startTime, game === null || game === void 0 ? void 0 : game.status]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && game.players) {\n      const newStartTimes = {\n        ...batchStartTimes\n      };\n      const newCompletionTimes = {\n        ...batchCompletionTimes\n      };\n      let hasChanges = false;\n      game.players.forEach(player => {\n        if (!newStartTimes[player.current_batch]) {\n          newStartTimes[player.current_batch] = {};\n          hasChanges = true;\n        }\n        if (!newCompletionTimes[player.current_batch]) {\n          newCompletionTimes[player.current_batch] = {};\n          hasChanges = true;\n        }\n\n        // 使用后端提供的批次开始时间\n        if (player.batch_start_time) {\n          Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n            if (newStartTimes[player.current_batch][Number(batchNum)] !== startTime) {\n              newStartTimes[player.current_batch][Number(batchNum)] = startTime;\n              hasChanges = true;\n            }\n          });\n        }\n\n        // Calculate completion times for each batch\n        for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n          var _newStartTimes$player;\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const startedAt = (_newStartTimes$player = newStartTimes[player.current_batch]) === null || _newStartTimes$player === void 0 ? void 0 : _newStartTimes$player[batchNum];\n          if (startedAt && batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[player.current_batch][player.id]) {\n            newCompletionTimes[player.current_batch][player.id] = Date.now() - startedAt;\n            hasChanges = true;\n          }\n        }\n      });\n\n      // 只在有变化时更新状态\n      if (hasChanges) {\n        setBatchStartTimes(newStartTimes);\n        setBatchCompletionTimes(newCompletionTimes);\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players, game === null || game === void 0 ? void 0 : game.max_batches]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks) {\n      let shouldUpdate = false;\n      const newFlippedCoins = {\n        ...flippedCoins\n      };\n\n      // 检查是否有新的批次开始\n      game.players.forEach(player => {\n        const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n        const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n\n        // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n        if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n          // 清理上一个批次的翻转状态\n          const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n          const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n          if (newFlippedCoins[player.id]) {\n            newFlippedCoins[player.id] = newFlippedCoins[player.id].filter(id => !prevBatchTaskIds.includes(id));\n            shouldUpdate = true;\n          }\n        }\n      });\n\n      // 只在有变化时更新状态\n      if (shouldUpdate) {\n        setFlippedCoins(newFlippedCoins);\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks]);\n\n  // 修改游戏状态更新的effect，确保永久翻转的硬币不会被重置\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && playerId) {\n      const currentPlayer = game.players.find(p => p.id === playerId);\n      if (!currentPlayer) return;\n      const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n      const currentBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch);\n      const shouldUpdateFlips = currentBatchTasks.some(t => t.status === TaskStatus.COMPLETED) || currentBatchTasks.every(t => t.status === TaskStatus.PENDING);\n      if (shouldUpdateFlips) {\n        setFlippedCoins(prev => {\n          const otherPlayersStates = {\n            ...prev\n          };\n          const permanentFlips = permanentFlippedCoins[playerId] || [];\n          const completedTaskIds = playerTasks.filter(t => t.status === TaskStatus.COMPLETED).map(t => t.id);\n\n          // 使用Array.from替代Set的扩展运算符\n          const allFlippedCoins = Array.from(new Set([...permanentFlips, ...completedTaskIds]));\n          return {\n            ...otherPlayersStates,\n            [playerId]: allFlippedCoins\n          };\n        });\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, playerId, permanentFlippedCoins]);\n\n  // 修改handleCoinFlip函数\n  const handleCoinFlip = (taskId, type) => {\n    if (!playerId || !wsService || !game) return;\n    const player = game.players.find(p => p.id === playerId);\n    if (!player) return;\n\n    // 先发送WebSocket消息\n    wsService.flipCoin(taskId, type);\n\n    // 立即更新本地状态\n    console.log(`Local player ${player.name} flipped coin ${taskId}`);\n    const updateLocalState = () => {\n      setFlippedCoins(prev => ({\n        ...prev,\n        [playerId]: [...(prev[playerId] || []), taskId]\n      }));\n      setPermanentFlippedCoins(prev => ({\n        ...prev,\n        [playerId]: [...(prev[playerId] || []), taskId]\n      }));\n      setFlippingCoins(prev => ({\n        ...prev,\n        [taskId]: {\n          isFlipping: true\n        }\n      }));\n\n      // 更新游戏状态中的任务状态\n      setGame(prevGame => {\n        if (!prevGame) return prevGame;\n        return {\n          ...prevGame,\n          tasks: prevGame.tasks.map(task => task.id === taskId ? {\n            ...task,\n            status: TaskStatus.COMPLETED\n          } : task)\n        };\n      });\n    };\n    updateLocalState();\n\n    // 重置翻转动画\n    setTimeout(() => {\n      setFlippingCoins(prev => ({\n        ...prev,\n        [taskId]: {\n          isFlipping: false\n        }\n      }));\n    }, 500);\n  };\n\n  // 处理批次完成\n  const handleCompleteBatch = batchNum => {\n    const pendingTasks = pendingBatchCompletion[batchNum] || [];\n    if (pendingTasks.length === 0) return;\n\n    // 发送所有任务完成的请求\n    pendingTasks.forEach(taskId => {\n      if (wsService) {\n        wsService.completeTask(taskId);\n      }\n    });\n\n    // 清理这个批次的待完成状态\n    setPendingBatchCompletion(prev => {\n      const newState = {\n        ...prev\n      };\n      delete newState[batchNum];\n      return newState;\n    });\n  };\n\n  // 修改渲染硬币的函数\n  const renderCoin = (type, isFlipping, isSmall = false, onClick, taskId) => {\n    var _Object$entries$find, _Object$entries$find2;\n    const flipState = taskId ? flippingCoins[taskId] : undefined;\n\n    // 检查硬币是否被任何玩家翻转（同时检查flippedCoins和permanentFlippedCoins）\n    const isFlippedByAnyPlayer = taskId && (Object.values(flippedCoins).some(playerFlips => playerFlips.includes(taskId)) || Object.values(permanentFlippedCoins).some(playerFlips => playerFlips.includes(taskId)));\n\n    // 获取翻转这个硬币的玩家\n    const flippedByPlayerId = taskId && (((_Object$entries$find = Object.entries(flippedCoins).find(([_, flips]) => flips.includes(taskId))) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0]) || ((_Object$entries$find2 = Object.entries(permanentFlippedCoins).find(([_, flips]) => flips.includes(taskId))) === null || _Object$entries$find2 === void 0 ? void 0 : _Object$entries$find2[0]));\n    const flippedByPlayer = flippedByPlayerId ? game === null || game === void 0 ? void 0 : game.players.find(p => p.id === flippedByPlayerId) : null;\n\n    // 决定显示哪一面\n    const displayType = isFlippedByAnyPlayer ? type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS : type;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: isSmall ? 20 : 32,\n        height: isSmall ? 20 : 32,\n        borderRadius: '50%',\n        backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n        border: `${isSmall ? 1 : 2}px solid #B8860B`,\n        color: '#704214',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 'bold',\n        fontSize: isSmall ? '0.6rem' : '0.8rem',\n        perspective: 1000,\n        mb: isSmall ? 0 : 1,\n        position: 'relative',\n        cursor: onClick ? 'pointer' : 'default',\n        transition: 'all 0.6s ease-in-out',\n        transformStyle: 'preserve-3d',\n        transform: flipState !== null && flipState !== void 0 && flipState.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n        opacity: isFlippedByAnyPlayer ? 0.8 : 1,\n        '&:hover': onClick ? {\n          transform: !(flipState !== null && flipState !== void 0 && flipState.isFlipping) ? 'scale(1.05)' : 'rotateY(360deg)',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n        } : {},\n        '&:active': onClick ? {\n          transform: !(flipState !== null && flipState !== void 0 && flipState.isFlipping) ? 'scale(0.95)' : 'rotateY(360deg)'\n        } : {},\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          borderRadius: '50%',\n          background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n          pointerEvents: 'none'\n        }\n      },\n      onClick: onClick ? () => onClick() : undefined,\n      title: flippedByPlayer ? `Flipped by ${flippedByPlayer.name}` : undefined,\n      children: displayType === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 监听游戏状态变化\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && playerId) {\n      const currentPlayer = game.players.find(p => p.id === playerId);\n      if (!currentPlayer) return;\n      const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n      const currentBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch);\n\n      // 只有当前玩家的新批次开始时才清理状态\n      if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n        // 清理当前玩家上一个批次的翻转状态\n        const prevBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch - 1);\n        const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n        setFlippedCoins(prev => {\n          var _prev$playerId;\n          return {\n            ...prev,\n            [playerId]: ((_prev$playerId = prev[playerId]) === null || _prev$playerId === void 0 ? void 0 : _prev$playerId.filter(id => !prevBatchTaskIds.includes(id))) || []\n          };\n        });\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, playerId]);\n\n  // 检查当前批次是否可以执行\n  const canExecuteBatch = (batchNum, subBatchIndex) => {\n    if (!game || !playerId) return false;\n\n    // 获取当前玩家的所有任务\n    const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n\n    // 获取所有之前的子批次\n    const previousSubBatches = playerTasks.filter(t => t.batch_number < batchNum || t.batch_number === batchNum && t.sub_batch_number < subBatchIndex);\n\n    // 如果还有之前的子批次未完成，则不能执行当前批次\n    return !previousSubBatches.some(t => t.status !== TaskStatus.COMPLETED);\n  };\n\n  // 修改renderTaskRow函数中的按钮显示逻辑\n  const renderTaskRow = (tasks, batchNum, playerStatus) => {\n    if (playerStatus === PlayerStatus.WAITING) {\n      return /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: \"Waiting for your turn...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 17\n      }, this);\n    }\n    const structure = getBatchStructure(batchNum);\n    const currentPlayer = game === null || game === void 0 ? void 0 : game.players.find(p => p.id === playerId);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: structure.map(({\n        subBatchIndex,\n        coinsCount\n      }) => {\n        var _subBatchTasks$;\n        const subBatchTasks = tasks.filter(t => t.sub_batch_number === subBatchIndex);\n        if (subBatchTasks.length === 0) return null;\n        const currentBatchTarget = ((_subBatchTasks$ = subBatchTasks[0]) === null || _subBatchTasks$ === void 0 ? void 0 : _subBatchTasks$.type) || TaskType.HEADS;\n        const flippedCount = playerId && flippedCoins[playerId] ? subBatchTasks.filter(t => flippedCoins[playerId].includes(t.id)).length : 0;\n        const isComplete = isSubBatchComplete(batchNum, subBatchIndex, (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.id) || '');\n        const canExecute = canExecuteBatch(batchNum, subBatchIndex);\n\n        // 检查是否是当前活动的子批次\n        const isActiveSubBatch = (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.status) === PlayerStatus.ACTIVE && canExecute && !isComplete;\n\n        // 检查子批次是否已经完成并提交\n        const isSubmitted = subBatchTasks.every(t => t.status === TaskStatus.COMPLETED);\n        // 使用包含玩家ID的buttonKey确保按钮状态的独立性\n        const buttonKey = `${playerId}-${batchNum}-${subBatchIndex}`;\n        const isButtonDisabled = completedSubBatches.has(buttonKey);\n        return /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center',\n              mb: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              sx: {\n                mr: 2\n              },\n              children: [\"Sub-batch \", subBatchIndex + 1, \" (\", flippedCount, \"/\", coinsCount, \" flips)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 33\n            }, this), isComplete && (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.status) === PlayerStatus.ACTIVE && !isSubmitted && !isButtonDisabled && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              size: \"small\",\n              onClick: () => handleCompleteSubBatch(batchNum, subBatchIndex),\n              disabled: !canExecute,\n              children: \"Complete this batch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 1,\n              opacity: isActiveSubBatch ? 1 : 0.5,\n              pointerEvents: isActiveSubBatch ? 'auto' : 'none'\n            },\n            children: subBatchTasks.map(task => {\n              var _flippingCoins$task$i;\n              return /*#__PURE__*/_jsxDEV(Box, {\n                children: renderCoin(task.type, ((_flippingCoins$task$i = flippingCoins[task.id]) === null || _flippingCoins$task$i === void 0 ? void 0 : _flippingCoins$task$i.isFlipping) || false, false, isActiveSubBatch ? () => handleCoinFlip(task.id, task.type) : undefined, task.id)\n              }, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 590,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 29\n          }, this)]\n        }, buttonKey, true, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染玩家卡片\n  const renderPlayer = player => {\n    var _currentBatchTasks$;\n    const currentBatchTasks = (game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === player.current_batch && t.assigned_to === player.id)) || [];\n    const currentBatchTarget = (_currentBatchTasks$ = currentBatchTasks[0]) === null || _currentBatchTasks$ === void 0 ? void 0 : _currentBatchTasks$.type;\n    const requiredCoins = getRequiredCoinsForBatch(player.current_batch);\n    const currentFlippedCount = currentBatchTasks.filter(t => {\n      var _flippedCoins$player$;\n      return (_flippedCoins$player$ = flippedCoins[player.id]) === null || _flippedCoins$player$ === void 0 ? void 0 : _flippedCoins$player$.includes(t.id);\n    }).length;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: player.status,\n            color: player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\",\n            size: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2,\n            bgcolor: 'background.default',\n            p: 2,\n            borderRadius: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              mb: 1\n            },\n            children: [\"Current Round: \", player.current_batch, \" / \", game === null || game === void 0 ? void 0 : game.max_batches, currentBatchTarget && player.status === PlayerStatus.ACTIVE && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                mt: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  mr: 1\n                },\n                children: \"Required flips:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 638,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  ml: 2\n                },\n                children: requiredCoins\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 637,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: renderTaskRow(currentBatchTasks, player.current_batch, player.status)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 17\n      }, this)\n    }, player.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 13\n    }, this);\n  };\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(20);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n\n  // 添加一个辅助函数来处理毫秒到时间的转换\n  const formatTimeFromMs = ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTimeFromMs(endTime - startTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 736,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 725,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 712,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteGame = () => {\n    setShowResultPage(true);\n  };\n\n  // 修改返回主菜单的处理函数\n  const handleReturnToMainMenu = () => {\n    // 清除游戏状态\n    setGameId('');\n    setGame(null);\n    setWsService(null);\n    setStartTime(null);\n    setEndTime(null);\n    // 清除输入记录\n    setPlayerName('');\n    setPlayerCount(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const renderResultPage = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 600,\n          width: '100%',\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            mb: 3,\n            color: 'primary.main'\n          },\n          children: \"Game Complete! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            mb: 4\n          },\n          children: [\"Total Time: \", formatTimeFromMs(totalTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 798,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMainMenu,\n          size: \"large\",\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 801,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 789,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 780,\n      columnNumber: 13\n    }, this);\n  };\n  const renderStatistics = () => {\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mb: 2,\n          color: 'primary.main'\n        },\n        children: \"Game Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 818,\n        columnNumber: 17\n      }, this), Array.from({\n        length: game.max_batches\n      }, (_, i) => i + 1).map(batchNum => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: [\"Round \", batchNum]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          sx: {\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Player\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 830,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 831,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 832,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 829,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 828,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [game.players.map(player => {\n                var _player$batch_start_t, _player$batch_complet, _player$batch_start_t2;\n                const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n                const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                const hasStarted = ((_player$batch_start_t = player.batch_start_time) === null || _player$batch_start_t === void 0 ? void 0 : _player$batch_start_t[batchNum]) != null;\n                const completionTime = (_player$batch_complet = player.batch_completion_time) === null || _player$batch_complet === void 0 ? void 0 : _player$batch_complet[batchNum];\n                const startTime = (_player$batch_start_t2 = player.batch_start_time) === null || _player$batch_start_t2 === void 0 ? void 0 : _player$batch_start_t2[batchNum];\n\n                // 计算当前时间（如果批次已开始但未完成）\n                let displayTime = '-';\n                if (completionTime) {\n                  displayTime = formatTimeFromMs(completionTime);\n                } else if (hasStarted && startTime) {\n                  const currentTime = Date.now() - startTime;\n                  displayTime = formatTimeFromMs(currentTime);\n                }\n                let status = 'Pending';\n                if (isCompleted) {\n                  status = 'Completed';\n                } else if (hasStarted) {\n                  status = 'In Progress';\n                }\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: player.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 864,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: displayTime\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 865,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: /*#__PURE__*/_jsxDEV(Chip, {\n                      label: status,\n                      size: \"small\",\n                      color: isCompleted ? 'success' : hasStarted ? 'primary' : 'default'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 867,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 866,\n                    columnNumber: 49\n                  }, this)]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 863,\n                  columnNumber: 45\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(TableRow, {\n                sx: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                },\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 877,\n                    columnNumber: 52\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 877,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: formatTimeFromMs(game.players.reduce((sum, p) => {\n                      var _p$batch_completion_t;\n                      return sum + (((_p$batch_completion_t = p.batch_completion_time) === null || _p$batch_completion_t === void 0 ? void 0 : _p$batch_completion_t[batchNum]) || 0);\n                    }, 0))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 879,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 878,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 886,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 876,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 835,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 827,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 826,\n          columnNumber: 25\n        }, this)]\n      }, batchNum, true, {\n        fileName: _jsxFileName,\n        lineNumber: 822,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 817,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 使用useMemo来记忆计算结果\n  const getTasksForBatch = React.useMemo(() => {\n    if (!(game !== null && game !== void 0 && game.tasks)) return {};\n    const tasksByBatch = {};\n    game.tasks.forEach(task => {\n      if (!tasksByBatch[task.batch_number]) {\n        tasksByBatch[task.batch_number] = [];\n      }\n      tasksByBatch[task.batch_number].push(task);\n    });\n    return tasksByBatch;\n  }, [game === null || game === void 0 ? void 0 : game.tasks]);\n\n  // 使用useMemo来记忆玩家任务\n  const getPlayerTasks = React.useMemo(() => {\n    if (!(game !== null && game !== void 0 && game.tasks) || !(game !== null && game !== void 0 && game.players)) return {};\n    const playerTasks = {};\n    game.players.forEach(player => {\n      playerTasks[player.id] = game.tasks.filter(t => t.assigned_to === player.id);\n    });\n    return playerTasks;\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players]);\n  useEffect(() => {\n    if (!(game !== null && game !== void 0 && game.tasks) || !startTime) return;\n    const newStats = {\n      ...batchStats\n    };\n\n    // 遍历每个批次\n    for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n      if (!newStats[batchNum]) {\n        newStats[batchNum] = {};\n      }\n\n      // 遍历每个玩家\n      game.players.forEach(player => {\n        const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n        const completedTasks = batchTasks.filter(t => t.status === TaskStatus.COMPLETED);\n\n        // 如果这个批次的所有任务都完成了，记录完成时间\n        if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n          // 只在第一次完成时记录时间\n          if (!newStats[batchNum][player.id]) {\n            newStats[batchNum][player.id] = {\n              completionTime: elapsedTime,\n              tasksCompleted: completedTasks.length,\n              totalTasks: batchTasks.length\n            };\n          }\n        } else if (batchTasks.length > 0) {\n          // 更新进行中的任务状态\n          newStats[batchNum][player.id] = {\n            completionTime: 0,\n            tasksCompleted: completedTasks.length,\n            totalTasks: batchTasks.length\n          };\n        }\n      });\n    }\n    setBatchStats(newStats);\n  }, [game === null || game === void 0 ? void 0 : game.tasks, startTime, elapsedTime]);\n  useEffect(() => {\n    if (!(game !== null && game !== void 0 && game.tasks) || !startTime) return;\n    const newCompletionTimes = {\n      ...batchCompletionTimes\n    };\n    const newStartTimes = {\n      ...batchStartTimes\n    };\n    let hasChanges = false;\n    Object.entries(getTasksForBatch).forEach(([batchNum, tasks]) => {\n      const batchNumber = parseInt(batchNum);\n      if (!newStartTimes[batchNumber]) {\n        newStartTimes[batchNumber] = {};\n        hasChanges = true;\n      }\n      if (!newCompletionTimes[batchNumber]) {\n        newCompletionTimes[batchNumber] = {};\n        hasChanges = true;\n      }\n      game.players.forEach(player => {\n        const playerTasks = tasks.filter(t => t.assigned_to === player.id);\n        if (playerTasks.length > 0 && playerTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[batchNumber][player.id]) {\n          var _newStartTimes$batchN;\n          const batchStartTime = ((_newStartTimes$batchN = newStartTimes[batchNumber]) === null || _newStartTimes$batchN === void 0 ? void 0 : _newStartTimes$batchN[batchNumber]) || startTime;\n          newCompletionTimes[batchNumber][player.id] = Date.now() - batchStartTime;\n          hasChanges = true;\n        }\n      });\n    });\n\n    // 只在有变化时更新状态\n    if (hasChanges) {\n      setBatchStartTimes(newStartTimes);\n      setBatchCompletionTimes(newCompletionTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.players, getTasksForBatch, startTime]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && startTime) {\n      const newStats = {\n        ...batchStats\n      };\n\n      // 遍历每个批次\n      for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n        if (!newStats[batchNum]) {\n          newStats[batchNum] = {};\n        }\n\n        // 遍历每个玩家\n        game.players.forEach(player => {\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const completedTasks = batchTasks.filter(t => t.status === TaskStatus.COMPLETED);\n\n          // 如果这个批次的所有任务都完成了，记录完成时间\n          if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n            // 只在第一次完成时记录时间\n            if (!newStats[batchNum][player.id]) {\n              newStats[batchNum][player.id] = {\n                completionTime: elapsedTime,\n                tasksCompleted: completedTasks.length,\n                totalTasks: batchTasks.length\n              };\n            }\n          } else if (batchTasks.length > 0) {\n            // 更新进行中的任务状态\n            newStats[batchNum][player.id] = {\n              completionTime: 0,\n              tasksCompleted: completedTasks.length,\n              totalTasks: batchTasks.length\n            };\n          }\n        });\n      }\n      setBatchStats(newStats);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, startTime, elapsedTime]);\n\n  // 修改统计页面中的完成时间显示\n  const renderBatchStatistics = (batchNum, player) => {\n    var _batchStats$batchNum;\n    const stats = (_batchStats$batchNum = batchStats[batchNum]) === null || _batchStats$batchNum === void 0 ? void 0 : _batchStats$batchNum[player.id];\n    return /*#__PURE__*/_jsxDEV(TableRow, {\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        children: player.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1055,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        children: stats !== null && stats !== void 0 && stats.completionTime ? formatTimeFromMs(stats.completionTime) : '-'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1056,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        children: [stats === null || stats === void 0 ? void 0 : stats.tasksCompleted, \"/\", (stats === null || stats === void 0 ? void 0 : stats.totalTasks) || 0]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1059,\n        columnNumber: 17\n      }, this)]\n    }, player.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1054,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染主菜单\n  const renderMainMenu = () => /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 600,\n      width: '100%',\n      mx: 'auto',\n      mt: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n        p: 4,\n        borderTopLeftRadius: 8,\n        borderTopRightRadius: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        sx: {\n          fontWeight: 'bold',\n          background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent',\n          textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n          textAlign: 'center',\n          mb: 1\n        },\n        children: \"Online Multiplayer Coin Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1081,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"text.secondary\",\n        align: \"center\",\n        children: \"Flip coins with your friends in this multiplayer game!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1092,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1075,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        background: '#ffffff',\n        p: 4,\n        borderBottomLeftRadius: 8,\n        borderBottomRightRadius: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Tabs, {\n        value: activeTab,\n        onChange: (e, newValue) => {\n          setActiveTab(newValue);\n          // 切换标签时也清除输入\n          setPlayerName('');\n          setPlayerCount(2);\n          setJoinGameId('');\n          setError(null);\n        },\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"CREATE GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"JOIN GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 17\n      }, this), activeTab === 0 ?\n      /*#__PURE__*/\n      // Create game form\n      _jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleCreateGame,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Name\",\n          required: true,\n          value: playerName,\n          onChange: e => setPlayerName(e.target.value),\n          sx: {\n            mb: 2\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1119,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Number of Players\",\n          type: \"number\",\n          required: true,\n          value: playerCount,\n          onChange: e => setPlayerCount(Number(e.target.value)),\n          inputProps: {\n            min: 2,\n            max: 5\n          },\n          helperText: \"Minimum 2, maximum 5 players\",\n          sx: {\n            mb: 3\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1128,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: !playerName || playerCount < 2 || playerCount > 5,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1140,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1118,\n        columnNumber: 21\n      }, this) :\n      /*#__PURE__*/\n      // Join game form\n      _jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleJoinGame,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Name\",\n          required: true,\n          value: playerName,\n          onChange: e => setPlayerName(e.target.value),\n          sx: {\n            mb: 2\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1152,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Game Code\",\n          required: true,\n          value: joinGameId,\n          onChange: e => setJoinGameId(e.target.value),\n          sx: {\n            mb: 3\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1161,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: !playerName || !joinGameId,\n          children: \"Join Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1170,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1151,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1098,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1068,\n    columnNumber: 9\n  }, this);\n  const renderGame = () => {\n    var _game$players$;\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 1,\n              color: 'primary.main'\n            },\n            children: [\"Game ID: \", game.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1197,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              color: 'text.primary'\n            },\n            children: [\"Status: \", game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1200,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1196,\n          columnNumber: 21\n        }, this), (game.status === 'in_progress' || game.status === 'completed') && startTime && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'text.secondary'\n          },\n          children: [\"Time: \", formatTimeFromMs(elapsedTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1205,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1190,\n        columnNumber: 17\n      }, this), game.status === 'waiting' && playerId === ((_game$players$ = game.players[0]) === null || _game$players$ === void 0 ? void 0 : _game$players$.id) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartGame,\n        sx: {\n          mb: 3\n        },\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1213,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 3,\n            children: game.players.map(renderPlayer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1226,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1225,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: renderStatistics()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1232,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1223,\n        columnNumber: 17\n      }, this), game.status === 'completed' && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4,\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMainMenu,\n          sx: {\n            minWidth: 200,\n            borderRadius: 2\n          },\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1240,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1239,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1188,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 获取每轮需要翻转的硬币数量\n  const getRequiredCoinsForBatch = batchNum => {\n    return 20; // 所有批次都需要20个硬币\n  };\n\n  // 获取每轮的子批次结构\n  const getBatchStructure = batchNum => {\n    const structure = {\n      1: [{\n        subBatchIndex: 0,\n        coinsCount: 20\n      }],\n      // 第1轮：1个批次×20枚\n      2: [\n      // 第2轮：2个批次×10枚\n      {\n        subBatchIndex: 0,\n        coinsCount: 10\n      }, {\n        subBatchIndex: 1,\n        coinsCount: 10\n      }],\n      3: [\n      // 第3轮：4个批次×5枚\n      {\n        subBatchIndex: 0,\n        coinsCount: 5\n      }, {\n        subBatchIndex: 1,\n        coinsCount: 5\n      }, {\n        subBatchIndex: 2,\n        coinsCount: 5\n      }, {\n        subBatchIndex: 3,\n        coinsCount: 5\n      }],\n      4: Array.from({\n        length: 10\n      }, (_, i) => ({\n        // 第4轮：10个批次×2枚\n        subBatchIndex: i,\n        coinsCount: 2\n      }))\n    };\n    return structure[batchNum] || [];\n  };\n\n  // 获取当前子批次的硬币数量\n  const getSubBatchSize = (batchNum, subBatchIndex) => {\n    const structure = getBatchStructure(batchNum);\n    const subBatch = structure.find(sb => sb.subBatchIndex === subBatchIndex);\n    return (subBatch === null || subBatch === void 0 ? void 0 : subBatch.coinsCount) || 0;\n  };\n\n  // 修改isSubBatchComplete函数\n  const isSubBatchComplete = (batchNum, subBatchIndex, currentPlayerId) => {\n    if (!game) return false;\n    const subBatchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.sub_batch_number === subBatchIndex && t.assigned_to === currentPlayerId);\n    const flippedCount = subBatchTasks.filter(t => {\n      var _flippedCoins$current;\n      return (_flippedCoins$current = flippedCoins[currentPlayerId]) === null || _flippedCoins$current === void 0 ? void 0 : _flippedCoins$current.includes(t.id);\n    }).length;\n    return flippedCount >= getSubBatchSize(batchNum, subBatchIndex);\n  };\n\n  // 添加错误处理函数\n  const handleGameUpdate = updatedGame => {\n    setGame(updatedGame);\n    if (updatedGame.status === 'completed' && !endTime) {\n      setEndTime(Date.now());\n    }\n  };\n\n  // 添加创建游戏的处理函数\n  const handleCreateGame = async e => {\n    e.preventDefault();\n    try {\n      setError(null);\n      // 固定为4轮游戏，每轮20个硬币\n      const gameId = await gameService.createGame(playerCount, 4, 20);\n      if (gameId) {\n        // 加入游戏\n        const playerId = await gameService.joinGame(gameId, playerName);\n\n        // 更新状态\n        setGameId(gameId);\n        setPlayerId(playerId);\n\n        // 创建WebSocket连接\n        const ws = new WebSocketService(gameId, playerName, handleGameUpdate);\n        setWsService(ws);\n\n        // 获取初始游戏状态\n        const initialGameState = await gameService.getGameState(gameId);\n        setGame(initialGameState);\n\n        // 设置开始时间\n        setStartTime(Date.now());\n        console.log('Game created successfully:', {\n          gameId,\n          playerId\n        });\n      }\n    } catch (err) {\n      console.error('Error creating game:', err);\n      setError(err instanceof Error ? err.message : 'Failed to create game');\n    }\n  };\n\n  // 添加加入游戏的处理函数\n  const handleJoinGame = async e => {\n    e.preventDefault();\n    try {\n      setError(null);\n      if (joinGameId) {\n        // 检查游戏是否存在\n        const exists = await gameService.checkGameExists(joinGameId);\n        if (!exists) {\n          setError('Game not found');\n          return;\n        }\n\n        // 加入游戏\n        const playerId = await gameService.joinGame(joinGameId, playerName);\n\n        // 更新状态\n        setGameId(joinGameId);\n        setPlayerId(playerId);\n\n        // 创建WebSocket连接\n        const ws = new WebSocketService(joinGameId, playerName, handleGameUpdate);\n        setWsService(ws);\n\n        // 获取游戏状态\n        const gameState = await gameService.getGameState(joinGameId);\n        setGame(gameState);\n\n        // 设置开始时间\n        setStartTime(Date.now());\n        console.log('Joined game successfully:', {\n          gameId: joinGameId,\n          playerId\n        });\n      }\n    } catch (err) {\n      console.error('Error joining game:', err);\n      setError(err instanceof Error ? err.message : 'Failed to join game');\n    }\n  };\n\n  // 添加开始游戏的处理函数\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      const currentTime = Date.now();\n      setStartTime(currentTime);\n      setBatchStartTimes(prev => ({\n        ...prev,\n        1: {\n          1: currentTime\n        }\n      }));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to start game');\n    }\n  };\n\n  // 修改handleCompleteSubBatch函数，确保永久翻转的硬币状态不会丢失\n  const handleCompleteSubBatch = async (batchNum, subBatchIndex) => {\n    if (!game || !playerId || !wsService) return;\n    try {\n      if (!canExecuteBatch(batchNum, subBatchIndex)) {\n        setError('Please complete previous batches first');\n        return;\n      }\n      const subBatchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.sub_batch_number === subBatchIndex && t.assigned_to === playerId);\n      const buttonKey = `${playerId}-${batchNum}-${subBatchIndex}`;\n      setCompletedSubBatches(prev => {\n        const newSet = new Set(Array.from(prev));\n        newSet.add(buttonKey);\n        return newSet;\n      });\n      const permanentFlips = permanentFlippedCoins[playerId] || [];\n      const currentFlips = flippedCoins[playerId] || [];\n      const allFlips = Array.from(new Set([...permanentFlips, ...currentFlips]));\n      for (const task of subBatchTasks) {\n        await wsService.completeTask(task.id);\n      }\n      setFlippedCoins(prev => ({\n        ...prev,\n        [playerId]: allFlips\n      }));\n    } catch (error) {\n      console.error('Error completing sub-batch:', error);\n      setError('Failed to complete sub-batch');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [!gameId ? renderMainMenu() : game ? renderGame() : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1456,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mt: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1460,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1450,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"GrEUlIjxJZji3zvDTkInYndBGe0=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","Stack","TableContainer","Table","TableHead","TableBody","TableCell","TableRow","Paper","Container","CircularProgress","TaskStatus","PlayerStatus","TaskType","gameService","WebSocketService","jsxDEV","_jsxDEV","Game","gameId","initialGameId","_s","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","currentTime","setCurrentTime","showResultPage","setShowResultPage","batchCompletionTimes","setBatchCompletionTimes","batchStartTimes","setBatchStartTimes","batchFlipStates","setBatchFlipStates","flippedCoins","setFlippedCoins","pendingBatchCompletion","setPendingBatchCompletion","flipStates","setFlipStates","flippingCoins","setFlippingCoins","elapsedTime","setElapsedTime","batchStats","setBatchStats","currentSubBatch","setCurrentSubBatch","completedSubBatches","setCompletedSubBatches","Set","permanentFlippedCoins","setPermanentFlippedCoins","service","updatedGame","console","log","tasks","flippedCoinsState","players","forEach","player","playerTasks","filter","t","assigned_to","id","status","COMPLETED","map","connect","setOnCoinFlipped","taskId","flippedByPlayerId","coinType","flippedByPlayer","find","p","name","prev","isFlipping","setTimeout","prevGame","task","disconnect","Date","now","timerInterval","setInterval","clearInterval","intervalId","newStartTimes","newCompletionTimes","hasChanges","current_batch","batch_start_time","Object","entries","batchNum","Number","max_batches","_newStartTimes$player","batchTasks","batch_number","startedAt","length","every","shouldUpdate","newFlippedCoins","currentBatchTasks","PENDING","prevBatchTasks","prevBatchTaskIds","includes","currentPlayer","shouldUpdateFlips","some","otherPlayersStates","permanentFlips","completedTaskIds","allFlippedCoins","Array","from","handleCoinFlip","type","flipCoin","updateLocalState","handleCompleteBatch","pendingTasks","completeTask","newState","renderCoin","isSmall","onClick","_Object$entries$find","_Object$entries$find2","flipState","undefined","isFlippedByAnyPlayer","values","playerFlips","_","flips","displayType","HEADS","TAILS","sx","width","height","borderRadius","backgroundColor","border","color","display","alignItems","justifyContent","fontWeight","fontSize","perspective","mb","position","cursor","transition","transformStyle","transform","opacity","boxShadow","content","top","left","right","bottom","background","pointerEvents","title","children","fileName","_jsxFileName","lineNumber","columnNumber","_prev$playerId","canExecuteBatch","subBatchIndex","previousSubBatches","sub_batch_number","renderTaskRow","playerStatus","WAITING","variant","structure","getBatchStructure","coinsCount","_subBatchTasks$","subBatchTasks","currentBatchTarget","flippedCount","isComplete","isSubBatchComplete","canExecute","isActiveSubBatch","ACTIVE","isSubmitted","buttonKey","isButtonDisabled","has","mr","size","handleCompleteSubBatch","disabled","flexWrap","gap","_flippingCoins$task$i","renderPlayer","_currentBatchTasks$","requiredCoins","getRequiredCoinsForBatch","currentFlippedCount","_flippedCoins$player$","label","bgcolor","mt","ml","getPlayerStatusColor","IDLE","getTaskStatusColor","IN_PROGRESS","handleTabChange","newValue","handleGameComplete","formatTimeFromMs","ms","totalSeconds","Math","floor","minutes","seconds","toString","padStart","renderCompletionDialog","totalTime","open","onClose","PaperProps","textAlign","flexDirection","py","window","location","reload","handleCompleteGame","handleReturnToMainMenu","renderResultPage","minHeight","maxWidth","renderStatistics","i","component","align","_player$batch_start_t","_player$batch_complet","_player$batch_start_t2","isCompleted","hasStarted","completionTime","batch_completion_time","displayTime","reduce","sum","_p$batch_completion_t","getTasksForBatch","useMemo","tasksByBatch","push","getPlayerTasks","newStats","completedTasks","tasksCompleted","totalTasks","batchNumber","parseInt","_newStartTimes$batchN","batchStartTime","renderBatchStatistics","_batchStats$batchNum","stats","renderMainMenu","mx","borderTopLeftRadius","borderTopRightRadius","WebkitBackgroundClip","WebkitTextFillColor","textShadow","borderBottomLeftRadius","borderBottomRightRadius","value","onChange","e","onSubmit","handleCreateGame","fullWidth","required","target","autoComplete","inputProps","min","max","helperText","handleJoinGame","renderGame","_game$players$","handleStartGame","container","spacing","item","xs","md","minWidth","getSubBatchSize","subBatch","sb","currentPlayerId","_flippedCoins$current","handleGameUpdate","preventDefault","createGame","joinGame","ws","initialGameState","getGameState","err","Error","message","exists","checkGameExists","gameState","startGame","newSet","add","currentFlips","allFlips","severity","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes,\n    Stack,\n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableCell,\n    TableRow,\n    Paper,\n    Container,\n    CircularProgress\n} from '@mui/material';\nimport { Game as GameType, Player, Task, TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\n\ninterface GameProps {\n    gameId?: string;\n}\n\ntype TabType = 0 | 1;\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | undefined>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(20);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState<TabType>(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n    const [batchCompletionTimes, setBatchCompletionTimes] = useState<{[key: number]: {[key: string]: number}}>({});\n    const [batchStartTimes, setBatchStartTimes] = useState<{[key: number]: {[key: number]: number}}>({});\n    const [batchFlipStates, setBatchFlipStates] = useState<{\n        [batchNum: number]: {\n            [taskId: string]: boolean;  // true means flipped\n        };\n    }>({});\n\n    // 修改翻转状态的类型定义，加入玩家ID\n    const [flippedCoins, setFlippedCoins] = useState<{[playerId: string]: string[]}>({});\n    const [pendingBatchCompletion, setPendingBatchCompletion] = useState<{\n        [batchNum: number]: string[];\n    }>({});\n\n    // 添加翻转动画状态\n    interface FlipState {\n        isFlipping: boolean;\n        showOpposite: boolean;\n    }\n    const [flipStates, setFlipStates] = useState<{\n        [key: string]: FlipState;\n    }>({});\n\n    // 添加翻转动画状态\n    const [flippingCoins, setFlippingCoins] = useState<{[key: string]: { isFlipping: boolean }}>({});\n\n    // 修改计时器状态和开始时间状态\n    const [elapsedTime, setElapsedTime] = useState<number>(0);\n\n    // 添加批次统计时间的状态\n    const [batchStats, setBatchStats] = useState<{\n        [batchNum: number]: {\n            [playerId: string]: {\n                completionTime: number;\n                tasksCompleted: number;\n                totalTasks: number;\n            }\n        }\n    }>({});\n\n    // 添加当前子批次的useEffect\n    const [currentSubBatch, setCurrentSubBatch] = useState<number>(0);\n\n    // 添加已完成子批次的状态\n    const [completedSubBatches, setCompletedSubBatches] = useState<Set<string>>(new Set());\n\n    // 添加永久翻转状态的记录\n    const [permanentFlippedCoins, setPermanentFlippedCoins] = useState<{[playerId: string]: string[]}>({});\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, (updatedGame) => {\n                console.log('Game state updated:', updatedGame);\n                setGame(updatedGame);\n                \n                // 从更新的游戏状态中同步硬币状态\n                if (updatedGame.tasks) {\n                    const flippedCoinsState: {[playerId: string]: string[]} = {};\n                    updatedGame.players.forEach(player => {\n                        const playerTasks = updatedGame.tasks.filter(t => \n                            t.assigned_to === player.id && \n                            t.status === TaskStatus.COMPLETED\n                        );\n                        flippedCoinsState[player.id] = playerTasks.map(t => t.id);\n                    });\n                    setFlippedCoins(flippedCoinsState);\n                    setPermanentFlippedCoins(flippedCoinsState);\n                }\n            });\n            service.connect();\n            \n            // 处理硬币翻转事件\n            service.setOnCoinFlipped((taskId, flippedByPlayerId, coinType) => {\n                const flippedByPlayer = game?.players.find(p => p.id === flippedByPlayerId);\n                if (flippedByPlayer) {\n                    console.log(`Received coin flip from ${flippedByPlayer.name} for coin ${taskId}`);\n                }\n                \n                // 立即更新翻转状态\n                setFlippedCoins(prev => ({\n                    ...prev,\n                    [flippedByPlayerId]: [...(prev[flippedByPlayerId] || []), taskId]\n                }));\n                \n                setPermanentFlippedCoins(prev => ({\n                    ...prev,\n                    [flippedByPlayerId]: [...(prev[flippedByPlayerId] || []), taskId]\n                }));\n                \n                // 触发翻转动画\n                setFlippingCoins(prev => ({\n                    ...prev,\n                    [taskId]: { isFlipping: true }\n                }));\n                \n                setTimeout(() => {\n                    setFlippingCoins(prev => ({\n                        ...prev,\n                        [taskId]: { isFlipping: false }\n                    }));\n                }, 500);\n                \n                // 同时更新游戏状态中的任务状态\n                setGame(prevGame => {\n                    if (!prevGame) return prevGame;\n                    return {\n                        ...prevGame,\n                        tasks: prevGame.tasks.map(task => \n                            task.id === taskId \n                                ? { ...task, status: TaskStatus.COMPLETED }\n                                : task\n                        )\n                    };\n                });\n            });\n            \n            setWsService(service);\n\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId, game?.players]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && startTime) {\n            timerInterval = setInterval(() => {\n                setCurrentTime(prev => Date.now() - startTime);\n            }, 1000);\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, startTime, endTime]);\n\n    useEffect(() => {\n        let intervalId: NodeJS.Timeout;\n        \n        if (startTime && game?.status === 'in_progress') {\n            intervalId = setInterval(() => {\n                setElapsedTime(prev => Date.now() - startTime);\n            }, 1000);\n        }\n        \n        return () => {\n            if (intervalId) {\n                clearInterval(intervalId);\n            }\n        };\n    }, [startTime, game?.status]);\n\n    useEffect(() => {\n        if (game?.tasks && game.players) {\n            const newStartTimes = { ...batchStartTimes };\n            const newCompletionTimes = { ...batchCompletionTimes };\n            let hasChanges = false;\n\n            game.players.forEach(player => {\n                if (!newStartTimes[player.current_batch]) {\n                    newStartTimes[player.current_batch] = {};\n                    hasChanges = true;\n                }\n                if (!newCompletionTimes[player.current_batch]) {\n                    newCompletionTimes[player.current_batch] = {};\n                    hasChanges = true;\n                }\n\n                // 使用后端提供的批次开始时间\n                if (player.batch_start_time) {\n                    Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n                        if (newStartTimes[player.current_batch][Number(batchNum)] !== startTime) {\n                            newStartTimes[player.current_batch][Number(batchNum)] = startTime;\n                            hasChanges = true;\n                        }\n                    });\n                }\n\n                // Calculate completion times for each batch\n                for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const startedAt = newStartTimes[player.current_batch]?.[batchNum];\n                    if (startedAt && \n                        batchTasks.length > 0 && \n                        batchTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                        !newCompletionTimes[player.current_batch][player.id]) {\n                        newCompletionTimes[player.current_batch][player.id] = Date.now() - startedAt;\n                        hasChanges = true;\n                    }\n                }\n            });\n\n            // 只在有变化时更新状态\n            if (hasChanges) {\n                setBatchStartTimes(newStartTimes);\n                setBatchCompletionTimes(newCompletionTimes);\n            }\n        }\n    }, [game?.tasks, game?.players, game?.max_batches]);\n\n    useEffect(() => {\n        if (game?.tasks) {\n            let shouldUpdate = false;\n            const newFlippedCoins: {[playerId: string]: string[]} = {...flippedCoins};\n\n            // 检查是否有新的批次开始\n            game.players.forEach(player => {\n                const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n                const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n                \n                // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                    // 清理上一个批次的翻转状态\n                    const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n                    const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n                    if (newFlippedCoins[player.id]) {\n                        newFlippedCoins[player.id] = newFlippedCoins[player.id].filter(id => !prevBatchTaskIds.includes(id));\n                        shouldUpdate = true;\n                    }\n                }\n            });\n\n            // 只在有变化时更新状态\n            if (shouldUpdate) {\n                setFlippedCoins(newFlippedCoins);\n            }\n        }\n    }, [game?.tasks]);\n\n    // 修改游戏状态更新的effect，确保永久翻转的硬币不会被重置\n    useEffect(() => {\n        if (game?.tasks && playerId) {\n            const currentPlayer = game.players.find(p => p.id === playerId);\n            if (!currentPlayer) return;\n\n            const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n            const currentBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch);\n            \n            const shouldUpdateFlips = currentBatchTasks.some(t => t.status === TaskStatus.COMPLETED) ||\n                currentBatchTasks.every(t => t.status === TaskStatus.PENDING);\n\n            if (shouldUpdateFlips) {\n                setFlippedCoins(prev => {\n                    const otherPlayersStates = { ...prev };\n                    const permanentFlips = permanentFlippedCoins[playerId] || [];\n                    const completedTaskIds = playerTasks\n                        .filter(t => t.status === TaskStatus.COMPLETED)\n                        .map(t => t.id);\n                    \n                    // 使用Array.from替代Set的扩展运算符\n                    const allFlippedCoins = Array.from(new Set([...permanentFlips, ...completedTaskIds]));\n                    \n                    return {\n                        ...otherPlayersStates,\n                        [playerId]: allFlippedCoins\n                    };\n                });\n            }\n        }\n    }, [game?.tasks, playerId, permanentFlippedCoins]);\n\n    // 修改handleCoinFlip函数\n    const handleCoinFlip = (taskId: string, type: TaskType) => {\n        if (!playerId || !wsService || !game) return;\n        \n        const player = game.players.find(p => p.id === playerId);\n        if (!player) return;\n\n        // 先发送WebSocket消息\n        wsService.flipCoin(taskId, type);\n        \n        // 立即更新本地状态\n        console.log(`Local player ${player.name} flipped coin ${taskId}`);\n        \n        const updateLocalState = () => {\n            setFlippedCoins(prev => ({\n                ...prev,\n                [playerId]: [...(prev[playerId] || []), taskId]\n            }));\n            \n            setPermanentFlippedCoins(prev => ({\n                ...prev,\n                [playerId]: [...(prev[playerId] || []), taskId]\n            }));\n            \n            setFlippingCoins(prev => ({\n                ...prev,\n                [taskId]: { isFlipping: true }\n            }));\n            \n            // 更新游戏状态中的任务状态\n            setGame(prevGame => {\n                if (!prevGame) return prevGame;\n                return {\n                    ...prevGame,\n                    tasks: prevGame.tasks.map(task => \n                        task.id === taskId \n                            ? { ...task, status: TaskStatus.COMPLETED }\n                            : task\n                    )\n                };\n            });\n        };\n        \n        updateLocalState();\n        \n        // 重置翻转动画\n        setTimeout(() => {\n            setFlippingCoins(prev => ({\n                ...prev,\n                [taskId]: { isFlipping: false }\n            }));\n        }, 500);\n    };\n\n    // 处理批次完成\n    const handleCompleteBatch = (batchNum: number) => {\n        const pendingTasks = pendingBatchCompletion[batchNum] || [];\n        if (pendingTasks.length === 0) return;\n\n        // 发送所有任务完成的请求\n        pendingTasks.forEach((taskId: string) => {\n            if (wsService) {\n                wsService.completeTask(taskId);\n            }\n        });\n\n        // 清理这个批次的待完成状态\n        setPendingBatchCompletion((prev: {[batchNum: number]: string[]}) => {\n            const newState = { ...prev };\n            delete newState[batchNum];\n            return newState;\n        });\n    };\n\n    // 修改渲染硬币的函数\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void, taskId?: string) => {\n        const flipState = taskId ? flippingCoins[taskId] : undefined;\n        \n        // 检查硬币是否被任何玩家翻转（同时检查flippedCoins和permanentFlippedCoins）\n        const isFlippedByAnyPlayer = taskId && (\n            Object.values(flippedCoins).some(playerFlips => playerFlips.includes(taskId)) ||\n            Object.values(permanentFlippedCoins).some(playerFlips => playerFlips.includes(taskId))\n        );\n        \n        // 获取翻转这个硬币的玩家\n        const flippedByPlayerId = taskId && (\n            Object.entries(flippedCoins).find(([_, flips]) => flips.includes(taskId))?.[0] ||\n            Object.entries(permanentFlippedCoins).find(([_, flips]) => flips.includes(taskId))?.[0]\n        );\n        \n        const flippedByPlayer = flippedByPlayerId ? game?.players.find(p => p.id === flippedByPlayerId) : null;\n        \n        // 决定显示哪一面\n        const displayType = isFlippedByAnyPlayer\n            ? (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) \n            : type;\n\n        return (\n            <Box\n                sx={{\n                    width: isSmall ? 20 : 32,\n                    height: isSmall ? 20 : 32,\n                    borderRadius: '50%',\n                    backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                    border: `${isSmall ? 1 : 2}px solid #B8860B`,\n                    color: '#704214',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontWeight: 'bold',\n                    fontSize: isSmall ? '0.6rem' : '0.8rem',\n                    perspective: 1000,\n                    mb: isSmall ? 0 : 1,\n                    position: 'relative',\n                    cursor: onClick ? 'pointer' : 'default',\n                    transition: 'all 0.6s ease-in-out',\n                    transformStyle: 'preserve-3d',\n                    transform: flipState?.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n                    opacity: isFlippedByAnyPlayer ? 0.8 : 1,\n                    '&:hover': onClick ? {\n                        transform: !flipState?.isFlipping ? 'scale(1.05)' : 'rotateY(360deg)',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                    } : {},\n                    '&:active': onClick ? {\n                        transform: !flipState?.isFlipping ? 'scale(0.95)' : 'rotateY(360deg)'\n                    } : {},\n                    '&::after': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        borderRadius: '50%',\n                        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                        pointerEvents: 'none'\n                    }\n                }}\n                onClick={onClick ? () => onClick() : undefined}\n                title={flippedByPlayer ? `Flipped by ${flippedByPlayer.name}` : undefined}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 监听游戏状态变化\n    useEffect(() => {\n        if (game?.tasks && playerId) {\n            const currentPlayer = game.players.find(p => p.id === playerId);\n            if (!currentPlayer) return;\n\n            const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n            const currentBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch);\n            \n            // 只有当前玩家的新批次开始时才清理状态\n            if (currentBatchTasks.length > 0 && \n                currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                // 清理当前玩家上一个批次的翻转状态\n                const prevBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch - 1);\n                const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n                setFlippedCoins(prev => ({\n                    ...prev,\n                    [playerId]: prev[playerId]?.filter(id => !prevBatchTaskIds.includes(id)) || []\n                }));\n            }\n        }\n    }, [game?.tasks, playerId]);\n\n    // 检查当前批次是否可以执行\n    const canExecuteBatch = (batchNum: number, subBatchIndex: number): boolean => {\n        if (!game || !playerId) return false;\n\n        // 获取当前玩家的所有任务\n        const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n        \n        // 获取所有之前的子批次\n        const previousSubBatches = playerTasks.filter(t => \n            (t.batch_number < batchNum) || \n            (t.batch_number === batchNum && t.sub_batch_number < subBatchIndex)\n        );\n\n        // 如果还有之前的子批次未完成，则不能执行当前批次\n        return !previousSubBatches.some(t => t.status !== TaskStatus.COMPLETED);\n    };\n\n    // 修改renderTaskRow函数中的按钮显示逻辑\n    const renderTaskRow = (tasks: Task[], batchNum: number, playerStatus: PlayerStatus) => {\n        if (playerStatus === PlayerStatus.WAITING) {\n            return (\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                    Waiting for your turn...\n                </Typography>\n            );\n        }\n\n        const structure = getBatchStructure(batchNum);\n        const currentPlayer = game?.players.find(p => p.id === playerId);\n        \n        return (\n            <Box>\n                {structure.map(({ subBatchIndex, coinsCount }) => {\n                    const subBatchTasks = tasks.filter(t => t.sub_batch_number === subBatchIndex);\n                    if (subBatchTasks.length === 0) return null;\n\n                    const currentBatchTarget = subBatchTasks[0]?.type || TaskType.HEADS;\n                    const flippedCount = playerId && flippedCoins[playerId] \n                        ? subBatchTasks.filter(t => flippedCoins[playerId].includes(t.id)).length \n                        : 0;\n                    const isComplete = isSubBatchComplete(batchNum, subBatchIndex, currentPlayer?.id || '');\n                    const canExecute = canExecuteBatch(batchNum, subBatchIndex);\n                    \n                    // 检查是否是当前活动的子批次\n                    const isActiveSubBatch = currentPlayer?.status === PlayerStatus.ACTIVE && \n                                           canExecute && \n                                           !isComplete;\n\n                    // 检查子批次是否已经完成并提交\n                    const isSubmitted = subBatchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                    // 使用包含玩家ID的buttonKey确保按钮状态的独立性\n                    const buttonKey = `${playerId}-${batchNum}-${subBatchIndex}`;\n                    const isButtonDisabled = completedSubBatches.has(buttonKey);\n                    \n                    return (\n                        <Box key={buttonKey} sx={{ mb: 2 }}>\n                            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                                <Typography variant=\"subtitle1\" sx={{ mr: 2 }}>\n                                    Sub-batch {subBatchIndex + 1} ({flippedCount}/{coinsCount} flips)\n                                </Typography>\n                                {isComplete && currentPlayer?.status === PlayerStatus.ACTIVE && !isSubmitted && !isButtonDisabled && (\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        size=\"small\"\n                                        onClick={() => handleCompleteSubBatch(batchNum, subBatchIndex)}\n                                        disabled={!canExecute}\n                                    >\n                                        Complete this batch\n                                    </Button>\n                                )}\n                            </Box>\n                            <Box sx={{ \n                                display: 'flex', \n                                flexWrap: 'wrap', \n                                gap: 1,\n                                opacity: isActiveSubBatch ? 1 : 0.5,\n                                pointerEvents: isActiveSubBatch ? 'auto' : 'none'\n                            }}>\n                                {subBatchTasks.map((task) => (\n                                    <Box key={task.id}>\n                                        {renderCoin(\n                                            task.type,\n                                            flippingCoins[task.id]?.isFlipping || false,\n                                            false,\n                                            isActiveSubBatch ? () => handleCoinFlip(task.id, task.type) : undefined,\n                                            task.id\n                                        )}\n                                    </Box>\n                                ))}\n                            </Box>\n                        </Box>\n                    );\n                })}\n            </Box>\n        );\n    };\n\n    // 渲染玩家卡片\n    const renderPlayer = (player: Player) => {\n        const currentBatchTasks = game?.tasks.filter(t => \n            t.batch_number === player.current_batch && \n            t.assigned_to === player.id\n        ) || [];\n\n        const currentBatchTarget = currentBatchTasks[0]?.type;\n        const requiredCoins = getRequiredCoinsForBatch(player.current_batch);\n        const currentFlippedCount = currentBatchTasks.filter(t => flippedCoins[player.id]?.includes(t.id)).length;\n\n        return (\n            <Card key={player.id} sx={{ mb: 2 }}>\n                <CardContent>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                        <Typography variant=\"h6\">\n                            {player.name}\n                        </Typography>\n                        <Chip \n                            label={player.status}\n                            color={player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\"}\n                            size=\"small\"\n                        />\n                    </Box>\n\n                    <Box sx={{ mb: 2, bgcolor: 'background.default', p: 2, borderRadius: 1 }}>\n                        <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n                            Current Round: {player.current_batch} / {game?.max_batches}\n                            {currentBatchTarget && player.status === PlayerStatus.ACTIVE && (\n                                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\n                                    <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                                        Required flips:\n                                    </Typography>\n                                    <Typography variant=\"body2\" sx={{ ml: 2 }}>\n                                        {requiredCoins}\n                                    </Typography>\n                                </Box>\n                            )}\n                        </Typography>\n\n                        <Box sx={{ mb: 2 }}>\n                            {renderTaskRow(currentBatchTasks, player.current_batch, player.status)}\n                        </Box>\n                    </Box>\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue as TabType);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(20);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    // 添加一个辅助函数来处理毫秒到时间的转换\n    const formatTimeFromMs = (ms: number) => {\n        const totalSeconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed!\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTimeFromMs(endTime - startTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    // 修改返回主菜单的处理函数\n    const handleReturnToMainMenu = () => {\n        // 清除游戏状态\n        setGameId('');\n        setGame(null);\n        setWsService(null);\n        setStartTime(null);\n        setEndTime(null);\n        // 清除输入记录\n        setPlayerName('');\n        setPlayerCount(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTimeFromMs(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMainMenu}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    const renderStatistics = () => {\n        if (!game) return null;\n\n        return (\n            <Box sx={{ p: 2 }}>\n                <Typography variant=\"h6\" sx={{ mb: 2, color: 'primary.main' }}>\n                    Game Statistics\n                </Typography>\n                {Array.from({ length: game.max_batches }, (_, i) => i + 1).map(batchNum => (\n                    <Box key={batchNum} sx={{ mb: 3 }}>\n                        <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                            Round {batchNum}\n                        </Typography>\n                        <TableContainer component={Paper} sx={{ mb: 2 }}>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Player</TableCell>\n                                        <TableCell align=\"right\">Time</TableCell>\n                                        <TableCell align=\"right\">Status</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {game.players.map(player => {\n                                        const batchTasks = game.tasks.filter(t => \n                                            t.batch_number === batchNum && \n                                            t.assigned_to === player.id\n                                        );\n                                        const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                                        const hasStarted = player.batch_start_time?.[batchNum] != null;\n                                        const completionTime = player.batch_completion_time?.[batchNum];\n                                        const startTime = player.batch_start_time?.[batchNum];\n                                        \n                                        // 计算当前时间（如果批次已开始但未完成）\n                                        let displayTime = '-';\n                                        if (completionTime) {\n                                            displayTime = formatTimeFromMs(completionTime);\n                                        } else if (hasStarted && startTime) {\n                                            const currentTime = Date.now() - startTime;\n                                            displayTime = formatTimeFromMs(currentTime);\n                                        }\n\n                                        let status = 'Pending';\n                                        if (isCompleted) {\n                                            status = 'Completed';\n                                        } else if (hasStarted) {\n                                            status = 'In Progress';\n                                        }\n\n                                        return (\n                                            <TableRow key={player.id}>\n                                                <TableCell>{player.name}</TableCell>\n                                                <TableCell align=\"right\">{displayTime}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Chip \n                                                        label={status}\n                                                        size=\"small\"\n                                                        color={isCompleted ? 'success' : (hasStarted ? 'primary' : 'default')}\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                    <TableRow sx={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}>\n                                        <TableCell><strong>Total</strong></TableCell>\n                                        <TableCell align=\"right\">\n                                            <strong>\n                                                {formatTimeFromMs(game.players.reduce((sum, p) => \n                                                    sum + (p.batch_completion_time?.[batchNum] || 0), \n                                                    0\n                                                ))}\n                                            </strong>\n                                        </TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    // 使用useMemo来记忆计算结果\n    const getTasksForBatch = React.useMemo(() => {\n        if (!game?.tasks) return {};\n        const tasksByBatch: { [key: number]: Task[] } = {};\n        game.tasks.forEach(task => {\n            if (!tasksByBatch[task.batch_number]) {\n                tasksByBatch[task.batch_number] = [];\n            }\n            tasksByBatch[task.batch_number].push(task);\n        });\n        return tasksByBatch;\n    }, [game?.tasks]);\n\n    // 使用useMemo来记忆玩家任务\n    const getPlayerTasks = React.useMemo(() => {\n        if (!game?.tasks || !game?.players) return {};\n        const playerTasks: { [key: string]: Task[] } = {};\n        game.players.forEach(player => {\n            playerTasks[player.id] = game.tasks.filter(t => t.assigned_to === player.id);\n        });\n        return playerTasks;\n    }, [game?.tasks, game?.players]);\n\n    useEffect(() => {\n        if (!game?.tasks || !startTime) return;\n\n        const newStats = { ...batchStats };\n        \n        // 遍历每个批次\n        for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n            if (!newStats[batchNum]) {\n                newStats[batchNum] = {};\n            }\n            \n            // 遍历每个玩家\n            game.players.forEach(player => {\n                const batchTasks = game.tasks.filter(t => \n                    t.batch_number === batchNum && \n                    t.assigned_to === player.id\n                );\n                \n                const completedTasks = batchTasks.filter(t => \n                    t.status === TaskStatus.COMPLETED\n                );\n                \n                // 如果这个批次的所有任务都完成了，记录完成时间\n                if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n                    // 只在第一次完成时记录时间\n                    if (!newStats[batchNum][player.id]) {\n                        newStats[batchNum][player.id] = {\n                            completionTime: elapsedTime,\n                            tasksCompleted: completedTasks.length,\n                            totalTasks: batchTasks.length\n                        };\n                    }\n                } else if (batchTasks.length > 0) {\n                    // 更新进行中的任务状态\n                    newStats[batchNum][player.id] = {\n                        completionTime: 0,\n                        tasksCompleted: completedTasks.length,\n                        totalTasks: batchTasks.length\n                    };\n                }\n            });\n        }\n        \n        setBatchStats(newStats);\n    }, [game?.tasks, startTime, elapsedTime]);\n\n    useEffect(() => {\n        if (!game?.tasks || !startTime) return;\n\n        const newCompletionTimes = { ...batchCompletionTimes };\n        const newStartTimes = { ...batchStartTimes };\n        let hasChanges = false;\n\n        Object.entries(getTasksForBatch).forEach(([batchNum, tasks]) => {\n            const batchNumber = parseInt(batchNum);\n            if (!newStartTimes[batchNumber]) {\n                newStartTimes[batchNumber] = {};\n                hasChanges = true;\n            }\n            if (!newCompletionTimes[batchNumber]) {\n                newCompletionTimes[batchNumber] = {};\n                hasChanges = true;\n            }\n\n            game.players.forEach(player => {\n                const playerTasks = tasks.filter(t => t.assigned_to === player.id);\n                if (playerTasks.length > 0 && \n                    playerTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                    !newCompletionTimes[batchNumber][player.id]) {\n                    const batchStartTime = newStartTimes[batchNumber]?.[batchNumber] || startTime;\n                    newCompletionTimes[batchNumber][player.id] = Date.now() - batchStartTime;\n                    hasChanges = true;\n                }\n            });\n        });\n\n        // 只在有变化时更新状态\n        if (hasChanges) {\n            setBatchStartTimes(newStartTimes);\n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.players, getTasksForBatch, startTime]);\n\n    useEffect(() => {\n        if (game?.tasks && startTime) {\n            const newStats = { ...batchStats };\n            \n            // 遍历每个批次\n            for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n                if (!newStats[batchNum]) {\n                    newStats[batchNum] = {};\n                }\n                \n                // 遍历每个玩家\n                game.players.forEach(player => {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const completedTasks = batchTasks.filter(t => \n                        t.status === TaskStatus.COMPLETED\n                    );\n                    \n                    // 如果这个批次的所有任务都完成了，记录完成时间\n                    if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n                        // 只在第一次完成时记录时间\n                        if (!newStats[batchNum][player.id]) {\n                            newStats[batchNum][player.id] = {\n                                completionTime: elapsedTime,\n                                tasksCompleted: completedTasks.length,\n                                totalTasks: batchTasks.length\n                            };\n                        }\n                    } else if (batchTasks.length > 0) {\n                        // 更新进行中的任务状态\n                        newStats[batchNum][player.id] = {\n                            completionTime: 0,\n                            tasksCompleted: completedTasks.length,\n                            totalTasks: batchTasks.length\n                        };\n                    }\n                });\n            }\n            \n            setBatchStats(newStats);\n        }\n    }, [game?.tasks, startTime, elapsedTime]);\n\n    // 修改统计页面中的完成时间显示\n    const renderBatchStatistics = (batchNum: number, player: Player) => {\n        const stats = batchStats[batchNum]?.[player.id];\n        \n        return (\n            <TableRow key={player.id}>\n                <TableCell>{player.name}</TableCell>\n                <TableCell align=\"right\">\n                    {stats?.completionTime ? formatTimeFromMs(stats.completionTime) : '-'}\n                </TableCell>\n                <TableCell align=\"right\">\n                    {stats?.tasksCompleted}/{stats?.totalTasks || 0}\n                </TableCell>\n            </TableRow>\n        );\n    };\n\n    // 渲染主菜单\n    const renderMainMenu = () => (\n        <Card sx={{\n            maxWidth: 600,\n            width: '100%',\n            mx: 'auto',\n            mt: 4\n        }}>\n            {/* Top section with title and subtitle */}\n            <Box sx={{\n                background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n                p: 4,\n                borderTopLeftRadius: 8,\n                borderTopRightRadius: 8\n            }}>\n                <Typography variant=\"h3\" sx={{\n                    fontWeight: 'bold',\n                    background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n                    WebkitBackgroundClip: 'text',\n                    WebkitTextFillColor: 'transparent',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n                    textAlign: 'center',\n                    mb: 1\n                }}>\n                    Online Multiplayer Coin Game\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"text.secondary\" align=\"center\">\n                    Flip coins with your friends in this multiplayer game!\n                </Typography>\n            </Box>\n\n            {/* Bottom section with form */}\n            <Box sx={{\n                background: '#ffffff',\n                p: 4,\n                borderBottomLeftRadius: 8,\n                borderBottomRightRadius: 8\n            }}>\n                <Tabs value={activeTab} onChange={(e, newValue) => {\n                    setActiveTab(newValue as TabType);\n                    // 切换标签时也清除输入\n                    setPlayerName('');\n                    setPlayerCount(2);\n                    setJoinGameId('');\n                    setError(null);\n                }} sx={{ mb: 3 }}>\n                    <Tab label=\"CREATE GAME\" />\n                    <Tab label=\"JOIN GAME\" />\n                </Tabs>\n\n                {activeTab === 0 ? (\n                    // Create game form\n                    <Box component=\"form\" onSubmit={handleCreateGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Number of Players\"\n                            type=\"number\"\n                            required\n                            value={playerCount}\n                            onChange={(e) => setPlayerCount(Number(e.target.value))}\n                            inputProps={{ min: 2, max: 5 }}\n                            helperText=\"Minimum 2, maximum 5 players\"\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || playerCount < 2 || playerCount > 5}\n                        >\n                            Create Game\n                        </Button>\n                    </Box>\n                ) : (\n                    // Join game form\n                    <Box component=\"form\" onSubmit={handleJoinGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Game Code\"\n                            required\n                            value={joinGameId}\n                            onChange={(e) => setJoinGameId(e.target.value)}\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || !joinGameId}\n                        >\n                            Join Game\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        </Card>\n    );\n\n    const renderGame = () => {\n        if (!game) return null;\n        \n        return (\n            <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n                {/* 游戏头部信息 */}\n                <Box sx={{ \n                    display: 'flex', \n                    justifyContent: 'space-between', \n                    alignItems: 'center',\n                    mb: 3\n                }}>\n                    <Box>\n                        <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                            Game ID: {game.id}\n                        </Typography>\n                        <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                            Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                        </Typography>\n                    </Box>\n                    {(game.status === 'in_progress' || game.status === 'completed') && startTime && (\n                        <Typography variant=\"h6\" sx={{ color: 'text.secondary' }}>\n                            Time: {formatTimeFromMs(elapsedTime)}\n                        </Typography>\n                    )}\n                </Box>\n\n                {/* 开始游戏按钮 */}\n                {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleStartGame}\n                        sx={{ mb: 3 }}\n                    >\n                        Start Game\n                    </Button>\n                )}\n\n                {/* 游戏内容 */}\n                <Grid container spacing={3}>\n                    {/* Left column: Player cards */}\n                    <Grid item xs={12} md={7}>\n                        <Stack spacing={3}>\n                            {game.players.map(renderPlayer)}\n                        </Stack>\n                    </Grid>\n\n                    {/* Right column: Results and statistics */}\n                    <Grid item xs={12} md={5}>\n                        {renderStatistics()}\n                    </Grid>\n                </Grid>\n\n                {/* 返回主菜单按钮 - 只在游戏完成时显示 */}\n                {game.status === 'completed' && (\n                    <Box sx={{ mt: 4, textAlign: 'center' }}>\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleReturnToMainMenu}\n                            sx={{\n                                minWidth: 200,\n                                borderRadius: 2\n                            }}\n                        >\n                            Return to Main Menu\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        );\n    };\n\n    // 获取每轮需要翻转的硬币数量\n    const getRequiredCoinsForBatch = (batchNum: number): number => {\n        return 20; // 所有批次都需要20个硬币\n    };\n\n    // 获取每轮的子批次结构\n    const getBatchStructure = (batchNum: number): { subBatchIndex: number, coinsCount: number }[] => {\n        const structure = {\n            1: [{ subBatchIndex: 0, coinsCount: 20 }],  // 第1轮：1个批次×20枚\n            2: [  // 第2轮：2个批次×10枚\n                { subBatchIndex: 0, coinsCount: 10 },\n                { subBatchIndex: 1, coinsCount: 10 }\n            ],\n            3: [  // 第3轮：4个批次×5枚\n                { subBatchIndex: 0, coinsCount: 5 },\n                { subBatchIndex: 1, coinsCount: 5 },\n                { subBatchIndex: 2, coinsCount: 5 },\n                { subBatchIndex: 3, coinsCount: 5 }\n            ],\n            4: Array.from({ length: 10 }, (_, i) => ({  // 第4轮：10个批次×2枚\n                subBatchIndex: i,\n                coinsCount: 2\n            }))\n        };\n        return structure[batchNum as keyof typeof structure] || [];\n    };\n\n    // 获取当前子批次的硬币数量\n    const getSubBatchSize = (batchNum: number, subBatchIndex: number): number => {\n        const structure = getBatchStructure(batchNum);\n        const subBatch = structure.find(sb => sb.subBatchIndex === subBatchIndex);\n        return subBatch?.coinsCount || 0;\n    };\n\n    // 修改isSubBatchComplete函数\n    const isSubBatchComplete = (batchNum: number, subBatchIndex: number, currentPlayerId: string): boolean => {\n        if (!game) return false;\n        const subBatchTasks = game.tasks.filter(t => \n            t.batch_number === batchNum && \n            t.sub_batch_number === subBatchIndex &&\n            t.assigned_to === currentPlayerId\n        );\n        const flippedCount = subBatchTasks.filter(t => flippedCoins[currentPlayerId]?.includes(t.id)).length;\n        return flippedCount >= getSubBatchSize(batchNum, subBatchIndex);\n    };\n\n    // 添加错误处理函数\n    const handleGameUpdate = (updatedGame: GameType) => {\n        setGame(updatedGame);\n        if (updatedGame.status === 'completed' && !endTime) {\n            setEndTime(Date.now());\n        }\n    };\n\n    // 添加创建游戏的处理函数\n    const handleCreateGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            // 固定为4轮游戏，每轮20个硬币\n            const gameId = await gameService.createGame(playerCount, 4, 20);\n            if (gameId) {\n                // 加入游戏\n                const playerId = await gameService.joinGame(gameId, playerName);\n                \n                // 更新状态\n                setGameId(gameId);\n                setPlayerId(playerId);\n                \n                // 创建WebSocket连接\n                const ws = new WebSocketService(\n                    gameId,\n                    playerName,\n                    handleGameUpdate\n                );\n                setWsService(ws);\n                \n                // 获取初始游戏状态\n                const initialGameState = await gameService.getGameState(gameId);\n                setGame(initialGameState);\n                \n                // 设置开始时间\n                setStartTime(Date.now());\n                \n                console.log('Game created successfully:', { gameId, playerId });\n            }\n        } catch (err) {\n            console.error('Error creating game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to create game');\n        }\n    };\n\n    // 添加加入游戏的处理函数\n    const handleJoinGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            if (joinGameId) {\n                // 检查游戏是否存在\n                const exists = await gameService.checkGameExists(joinGameId);\n                if (!exists) {\n                    setError('Game not found');\n                    return;\n                }\n                \n                // 加入游戏\n                const playerId = await gameService.joinGame(joinGameId, playerName);\n                \n                // 更新状态\n                setGameId(joinGameId);\n                setPlayerId(playerId);\n                \n                // 创建WebSocket连接\n                const ws = new WebSocketService(\n                    joinGameId,\n                    playerName,\n                    handleGameUpdate\n                );\n                setWsService(ws);\n                \n                // 获取游戏状态\n                const gameState = await gameService.getGameState(joinGameId);\n                setGame(gameState);\n                \n                // 设置开始时间\n                setStartTime(Date.now());\n                \n                console.log('Joined game successfully:', { gameId: joinGameId, playerId });\n            }\n        } catch (err) {\n            console.error('Error joining game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to join game');\n        }\n    };\n\n    // 添加开始游戏的处理函数\n    const handleStartGame = async () => {\n        if (!gameId) return;\n        \n        try {\n            await gameService.startGame(gameId);\n            const currentTime = Date.now();\n            setStartTime(currentTime);\n            setBatchStartTimes(prev => ({\n                ...prev,\n                1: { 1: currentTime }\n            }));\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Failed to start game');\n        }\n    };\n\n    // 修改handleCompleteSubBatch函数，确保永久翻转的硬币状态不会丢失\n    const handleCompleteSubBatch = async (batchNum: number, subBatchIndex: number) => {\n        if (!game || !playerId || !wsService) return;\n        \n        try {\n            if (!canExecuteBatch(batchNum, subBatchIndex)) {\n                setError('Please complete previous batches first');\n                return;\n            }\n\n            const subBatchTasks = game.tasks.filter(t => \n                t.batch_number === batchNum && \n                t.sub_batch_number === subBatchIndex &&\n                t.assigned_to === playerId\n            );\n\n            const buttonKey = `${playerId}-${batchNum}-${subBatchIndex}`;\n            setCompletedSubBatches(prev => {\n                const newSet = new Set(Array.from(prev));\n                newSet.add(buttonKey);\n                return newSet;\n            });\n\n            const permanentFlips = permanentFlippedCoins[playerId] || [];\n            const currentFlips = flippedCoins[playerId] || [];\n            const allFlips = Array.from(new Set([...permanentFlips, ...currentFlips]));\n\n            for (const task of subBatchTasks) {\n                await wsService.completeTask(task.id);\n            }\n\n            setFlippedCoins(prev => ({\n                ...prev,\n                [playerId]: allFlips\n            }));\n        } catch (error) {\n            console.error('Error completing sub-batch:', error);\n            setError('Failed to complete sub-batch');\n        }\n    };\n\n    return (\n        <Container>\n            {!gameId ? (\n                renderMainMenu()\n            ) : game ? (\n                renderGame()\n            ) : (\n                <CircularProgress />\n            )}\n            \n            {error && (\n                <Alert severity=\"error\" sx={{ mt: 2 }}>\n                    {error}\n                </Alert>\n            )}\n        </Container>\n    );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}