{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\n\n// 定义重试策略\nconst RETRY_DELAYS = [1000, 2000, 3000, 5000, 8000]; // 递增的重试延迟\n\nexport const gameService = {\n  createGame: async (playerCount, maxBatches, tasksPerBatch) => {\n    console.log('Creating game with params:', {\n      playerCount,\n      maxBatches,\n      tasksPerBatch\n    });\n    const response = await axios.post(`${API_URL}/games/create`, null, {\n      params: {\n        player_count: playerCount,\n        max_batches: maxBatches,\n        tasks_per_batch: tasksPerBatch\n      }\n    });\n    console.log('Game created:', response.data);\n    return response.data.game_id;\n  },\n  checkGameExists: async gameId => {\n    console.log('Checking if game exists:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n    console.log('Game exists response:', response.data);\n    return response.data.exists;\n  },\n  joinGame: async (gameId, playerName) => {\n    console.log('Joining game:', {\n      gameId,\n      playerName\n    });\n    const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n      params: {\n        player_name: playerName\n      }\n    });\n    console.log('Join game response:', response.data);\n    return response.data.player_id;\n  },\n  startGame: async gameId => {\n    console.log('Starting game:', gameId);\n    await axios.post(`${API_URL}/games/${gameId}/start`);\n    console.log('Game started');\n  },\n  getGameState: async gameId => {\n    console.log('Getting game state:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}`);\n    console.log('Game state:', response.data);\n    return response.data;\n  }\n};\nexport class WebSocketService {\n  constructor(gameId, playerId, onGameUpdate) {\n    this.ws = null;\n    this.gameId = void 0;\n    this.playerId = void 0;\n    this.onGameUpdate = void 0;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.messageQueue = [];\n    this.isConnecting = false;\n    this.pingInterval = null;\n    this.lastPongTime = Date.now();\n    this.gameId = gameId;\n    this.playerId = playerId;\n    this.onGameUpdate = onGameUpdate;\n    console.log('WebSocket service initialized:', {\n      gameId,\n      playerId\n    });\n\n    // 添加页面卸载时的清理\n    window.addEventListener('beforeunload', () => {\n      this.cleanup();\n    });\n  }\n  async connect() {\n    if (this.isConnecting) {\n      console.log('Connection attempt already in progress');\n      return;\n    }\n    this.isConnecting = true;\n    console.log('Connecting WebSocket...');\n    try {\n      this.ws = new WebSocket(`${WS_URL}/ws/${this.playerId}`);\n      this.ws.onmessage = this.handleMessage.bind(this);\n      this.ws.onopen = this.handleOpen.bind(this);\n      this.ws.onclose = this.handleClose.bind(this);\n      this.ws.onerror = this.handleError.bind(this);\n    } catch (error) {\n      console.error('Error creating WebSocket:', error);\n      this.handleReconnect();\n    } finally {\n      this.isConnecting = false;\n    }\n  }\n  handleMessage(event) {\n    try {\n      const message = JSON.parse(event.data);\n      console.log('WebSocket message received:', message);\n      switch (message.type) {\n        case 'game_update':\n        case 'game_started':\n          console.log('Updating game state:', message.data);\n          this.onGameUpdate(message.data);\n          break;\n        case 'pong':\n          this.lastPongTime = Date.now();\n          break;\n        case 'connection_status':\n          console.log('Connection status:', message.status);\n          if (message.status === 'connected') {\n            this.processMessageQueue();\n          }\n          break;\n        case 'error':\n          console.error('Server error:', message.message);\n          break;\n        default:\n          console.log('Unknown message type:', message.type);\n      }\n    } catch (error) {\n      console.error('Error processing message:', error);\n    }\n  }\n  handleOpen() {\n    console.log('WebSocket connection opened');\n    this.reconnectAttempts = 0;\n    this.startPingInterval();\n    this.getGameState();\n    this.processMessageQueue();\n  }\n  handleClose(event) {\n    console.log('WebSocket connection closed:', event.code, event.reason);\n    this.cleanup();\n    this.handleReconnect();\n  }\n  handleError(error) {\n    console.error('WebSocket error:', error);\n    this.cleanup();\n  }\n  startPingInterval() {\n    this.pingInterval = setInterval(() => {\n      var _this$ws;\n      if (((_this$ws = this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.readyState) === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({\n          type: 'ping'\n        }));\n\n        // 检查是否超时\n        const now = Date.now();\n        if (now - this.lastPongTime > 10000) {\n          // 10秒超时\n          console.error('WebSocket connection timeout');\n          this.cleanup();\n          this.connect();\n        }\n      }\n    }, 5000); // 每5秒发送一次ping\n  }\n  cleanup() {\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n      this.pingInterval = null;\n    }\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  async getGameState() {\n    try {\n      const gameState = await gameService.getGameState(this.gameId);\n      this.onGameUpdate(gameState);\n    } catch (error) {\n      console.error('Error getting game state:', error);\n    }\n  }\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      const delay = RETRY_DELAYS[this.reconnectAttempts] || RETRY_DELAYS[RETRY_DELAYS.length - 1];\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts}) in ${delay}ms...`);\n      setTimeout(() => this.connect(), delay);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n  queueMessage(message) {\n    this.messageQueue.push(message);\n    console.log('Message queued:', message);\n    this.processMessageQueue();\n  }\n  async processMessageQueue() {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      console.log('WebSocket not ready, skipping message queue processing');\n      return;\n    }\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue[0];\n      try {\n        await this.sendMessage(message);\n        this.messageQueue.shift(); // 移除已发送的消息\n      } catch (error) {\n        console.error('Error sending queued message:', error);\n        message.attempts++;\n        if (message.attempts >= message.maxAttempts) {\n          console.error('Max attempts reached for message:', message);\n          this.messageQueue.shift(); // 移除失败的消息\n        }\n        break; // 停止处理队列\n      }\n    }\n  }\n  async sendMessage(message) {\n    return new Promise((resolve, reject) => {\n      if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n        reject(new Error('WebSocket not connected'));\n        return;\n      }\n      try {\n        this.ws.send(JSON.stringify(message.data));\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  completeTask(taskId) {\n    const message = {\n      type: 'complete_task',\n      game_id: this.gameId,\n      task_id: taskId\n    };\n    this.queueMessage({\n      type: 'complete_task',\n      data: message,\n      attempts: 0,\n      maxAttempts: 3\n    });\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      console.log('WebSocket not connected, attempting to reconnect');\n      this.connect();\n    }\n  }\n  disconnect() {\n    console.log('Disconnecting WebSocket');\n    this.cleanup();\n  }\n}","map":{"version":3,"names":["axios","API_URL","WS_URL","RETRY_DELAYS","gameService","createGame","playerCount","maxBatches","tasksPerBatch","console","log","response","post","params","player_count","max_batches","tasks_per_batch","data","game_id","checkGameExists","gameId","get","exists","joinGame","playerName","player_name","player_id","startGame","getGameState","WebSocketService","constructor","playerId","onGameUpdate","ws","reconnectAttempts","maxReconnectAttempts","messageQueue","isConnecting","pingInterval","lastPongTime","Date","now","window","addEventListener","cleanup","connect","WebSocket","onmessage","handleMessage","bind","onopen","handleOpen","onclose","handleClose","onerror","handleError","error","handleReconnect","event","message","JSON","parse","type","status","processMessageQueue","startPingInterval","code","reason","setInterval","_this$ws","readyState","OPEN","send","stringify","clearInterval","close","gameState","delay","length","setTimeout","queueMessage","push","sendMessage","shift","attempts","maxAttempts","Promise","resolve","reject","Error","completeTask","taskId","task_id","disconnect"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\n\n// 定义重试策略\nconst RETRY_DELAYS = [1000, 2000, 3000, 5000, 8000]; // 递增的重试延迟\n\ninterface QueuedMessage {\n    type: string;\n    data: any;\n    attempts: number;\n    maxAttempts: number;\n}\n\nexport const gameService = {\n    createGame: async (playerCount: number, maxBatches: number, tasksPerBatch: number): Promise<string> => {\n        console.log('Creating game with params:', { playerCount, maxBatches, tasksPerBatch });\n        const response = await axios.post(`${API_URL}/games/create`, null, {\n            params: { player_count: playerCount, max_batches: maxBatches, tasks_per_batch: tasksPerBatch }\n        });\n        console.log('Game created:', response.data);\n        return response.data.game_id;\n    },\n\n    checkGameExists: async (gameId: string): Promise<boolean> => {\n        console.log('Checking if game exists:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n        console.log('Game exists response:', response.data);\n        return response.data.exists;\n    },\n\n    joinGame: async (gameId: string, playerName: string): Promise<string> => {\n        console.log('Joining game:', { gameId, playerName });\n        const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n            params: { player_name: playerName }\n        });\n        console.log('Join game response:', response.data);\n        return response.data.player_id;\n    },\n\n    startGame: async (gameId: string): Promise<void> => {\n        console.log('Starting game:', gameId);\n        await axios.post(`${API_URL}/games/${gameId}/start`);\n        console.log('Game started');\n    },\n\n    getGameState: async (gameId: string): Promise<Game> => {\n        console.log('Getting game state:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}`);\n        console.log('Game state:', response.data);\n        return response.data;\n    }\n};\n\nexport class WebSocketService {\n    private ws: WebSocket | null = null;\n    private gameId: string;\n    private playerId: string;\n    private onGameUpdate: (game: Game) => void;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = 5;\n    private messageQueue: QueuedMessage[] = [];\n    private isConnecting: boolean = false;\n    private pingInterval: NodeJS.Timeout | null = null;\n    private lastPongTime: number = Date.now();\n\n    constructor(gameId: string, playerId: string, onGameUpdate: (game: Game) => void) {\n        this.gameId = gameId;\n        this.playerId = playerId;\n        this.onGameUpdate = onGameUpdate;\n        console.log('WebSocket service initialized:', { gameId, playerId });\n        \n        // 添加页面卸载时的清理\n        window.addEventListener('beforeunload', () => {\n            this.cleanup();\n        });\n    }\n\n    async connect() {\n        if (this.isConnecting) {\n            console.log('Connection attempt already in progress');\n            return;\n        }\n\n        this.isConnecting = true;\n        console.log('Connecting WebSocket...');\n\n        try {\n            this.ws = new WebSocket(`${WS_URL}/ws/${this.playerId}`);\n            \n            this.ws.onmessage = this.handleMessage.bind(this);\n            this.ws.onopen = this.handleOpen.bind(this);\n            this.ws.onclose = this.handleClose.bind(this);\n            this.ws.onerror = this.handleError.bind(this);\n        } catch (error) {\n            console.error('Error creating WebSocket:', error);\n            this.handleReconnect();\n        } finally {\n            this.isConnecting = false;\n        }\n    }\n\n    private handleMessage(event: MessageEvent) {\n        try {\n            const message = JSON.parse(event.data);\n            console.log('WebSocket message received:', message);\n            \n            switch (message.type) {\n                case 'game_update':\n                case 'game_started':\n                    console.log('Updating game state:', message.data);\n                    this.onGameUpdate(message.data);\n                    break;\n                case 'pong':\n                    this.lastPongTime = Date.now();\n                    break;\n                case 'connection_status':\n                    console.log('Connection status:', message.status);\n                    if (message.status === 'connected') {\n                        this.processMessageQueue();\n                    }\n                    break;\n                case 'error':\n                    console.error('Server error:', message.message);\n                    break;\n                default:\n                    console.log('Unknown message type:', message.type);\n            }\n        } catch (error) {\n            console.error('Error processing message:', error);\n        }\n    }\n\n    private handleOpen() {\n        console.log('WebSocket connection opened');\n        this.reconnectAttempts = 0;\n        this.startPingInterval();\n        this.getGameState();\n        this.processMessageQueue();\n    }\n\n    private handleClose(event: CloseEvent) {\n        console.log('WebSocket connection closed:', event.code, event.reason);\n        this.cleanup();\n        this.handleReconnect();\n    }\n\n    private handleError(error: Event) {\n        console.error('WebSocket error:', error);\n        this.cleanup();\n    }\n\n    private startPingInterval() {\n        this.pingInterval = setInterval(() => {\n            if (this.ws?.readyState === WebSocket.OPEN) {\n                this.ws.send(JSON.stringify({ type: 'ping' }));\n                \n                // 检查是否超时\n                const now = Date.now();\n                if (now - this.lastPongTime > 10000) { // 10秒超时\n                    console.error('WebSocket connection timeout');\n                    this.cleanup();\n                    this.connect();\n                }\n            }\n        }, 5000); // 每5秒发送一次ping\n    }\n\n    private cleanup() {\n        if (this.pingInterval) {\n            clearInterval(this.pingInterval);\n            this.pingInterval = null;\n        }\n        \n        if (this.ws) {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n\n    private async getGameState() {\n        try {\n            const gameState = await gameService.getGameState(this.gameId);\n            this.onGameUpdate(gameState);\n        } catch (error) {\n            console.error('Error getting game state:', error);\n        }\n    }\n\n    private handleReconnect() {\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            const delay = RETRY_DELAYS[this.reconnectAttempts] || RETRY_DELAYS[RETRY_DELAYS.length - 1];\n            this.reconnectAttempts++;\n            console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts}) in ${delay}ms...`);\n            setTimeout(() => this.connect(), delay);\n        } else {\n            console.error('Max reconnection attempts reached');\n        }\n    }\n\n    private queueMessage(message: QueuedMessage) {\n        this.messageQueue.push(message);\n        console.log('Message queued:', message);\n        this.processMessageQueue();\n    }\n\n    private async processMessageQueue() {\n        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n            console.log('WebSocket not ready, skipping message queue processing');\n            return;\n        }\n\n        while (this.messageQueue.length > 0) {\n            const message = this.messageQueue[0];\n            \n            try {\n                await this.sendMessage(message);\n                this.messageQueue.shift(); // 移除已发送的消息\n            } catch (error) {\n                console.error('Error sending queued message:', error);\n                message.attempts++;\n                \n                if (message.attempts >= message.maxAttempts) {\n                    console.error('Max attempts reached for message:', message);\n                    this.messageQueue.shift(); // 移除失败的消息\n                }\n                \n                break; // 停止处理队列\n            }\n        }\n    }\n\n    private async sendMessage(message: QueuedMessage): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n                reject(new Error('WebSocket not connected'));\n                return;\n            }\n\n            try {\n                this.ws.send(JSON.stringify(message.data));\n                resolve();\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    completeTask(taskId: string) {\n        const message = {\n            type: 'complete_task',\n            game_id: this.gameId,\n            task_id: taskId\n        };\n\n        this.queueMessage({\n            type: 'complete_task',\n            data: message,\n            attempts: 0,\n            maxAttempts: 3\n        });\n\n        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n            console.log('WebSocket not connected, attempting to reconnect');\n            this.connect();\n        }\n    }\n\n    disconnect() {\n        console.log('Disconnecting WebSocket');\n        this.cleanup();\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}