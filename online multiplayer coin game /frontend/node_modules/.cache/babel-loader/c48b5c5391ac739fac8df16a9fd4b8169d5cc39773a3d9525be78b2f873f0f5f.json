{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Tabs, Tab, Alert, Chip, keyframes } from '@mui/material';\nimport { TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Game = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  var _game$players$, _game$players, _game$players2, _game$players3;\n  const [gameId, setGameId] = useState(initialGameId);\n  const [game, setGame] = useState(null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerId, setPlayerId] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n  const [playerCount, setPlayerCount] = useState(2);\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, updatedGame => {\n        console.log('Game state updated:', updatedGame);\n        setGame(updatedGame);\n      });\n      service.connect();\n      setWsService(service);\n\n      // Cleanup function\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  const handleCreateGame = async () => {\n    if (!playerName) {\n      setError('Please enter your name first');\n      return;\n    }\n    try {\n      const newGameId = await gameService.createGame(playerCount, maxBatches, coinsPerBatch);\n      setGameId(newGameId);\n\n      // Automatically join the game as the creator\n      const newPlayerId = await gameService.joinGame(newGameId, playerName);\n      setPlayerId(newPlayerId);\n\n      // Get initial game state\n      const gameState = await gameService.getGameState(newGameId);\n      setGame(gameState);\n\n      // Reset all input fields\n      setPlayerName('');\n      setPlayerCount(2);\n      setMaxBatches(3);\n      setCoinsPerBatch(2);\n      setJoinGameId('');\n      setError(null);\n    } catch (error) {\n      setError('Failed to create game. Please try again.');\n      console.error('Error creating game:', error);\n    }\n  };\n  const handleJoinGame = async () => {\n    if (!playerName) {\n      setError('Please enter player name');\n      return;\n    }\n    const targetGameId = gameId || joinGameId;\n    if (!targetGameId) {\n      setError('Please enter game ID');\n      return;\n    }\n    try {\n      const exists = await gameService.checkGameExists(targetGameId);\n      if (!exists) {\n        setError('Game not found');\n        return;\n      }\n      const newPlayerId = await gameService.joinGame(targetGameId, playerName);\n      setPlayerId(newPlayerId);\n      setGameId(targetGameId);\n      setShowJoinDialog(false);\n      const gameState = await gameService.getGameState(targetGameId);\n      setGame(gameState);\n\n      // Reset all input fields\n      setPlayerName('');\n      setPlayerCount(2);\n      setMaxBatches(3);\n      setCoinsPerBatch(2);\n      setJoinGameId('');\n      setError(null);\n    } catch (error) {\n      setError('Failed to join game. Please try again.');\n      console.error('Error joining game:', error);\n    }\n  };\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      setError(null);\n    } catch (error) {\n      setError('Failed to start game. Please try again.');\n      console.error('Error starting game:', error);\n    }\n  };\n  const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        100% {\n            transform: rotateY(1800deg);\n        }\n    `;\n  const renderCoin = (type, isFlipping, isSmall = false, onClick) => /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: isSmall ? 40 : 80,\n      height: isSmall ? 40 : 80,\n      borderRadius: '50%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: type === TaskType.HEADS ? '#FFD700' : '#DAA520',\n      border: `${isSmall ? 2 : 4}px solid #B8860B`,\n      color: '#704214',\n      fontWeight: 'bold',\n      fontSize: isSmall ? '0.9rem' : '1.2rem',\n      animation: isFlipping ? `${flipAnimation} 1s ease-in-out` : 'none',\n      perspective: 1000,\n      mb: isSmall ? 0 : 2,\n      position: 'relative',\n      cursor: onClick ? 'pointer' : 'default',\n      transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n      '&:hover': onClick ? {\n        transform: 'scale(1.05)',\n        boxShadow: '0 4px 8px rgba(0,0,0,0.2)'\n      } : {},\n      '&:active': onClick ? {\n        transform: 'scale(0.95)'\n      } : {},\n      '&::after': {\n        content: '\"\"',\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        borderRadius: '50%',\n        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n        pointerEvents: 'none'\n      }\n    },\n    onClick: onClick,\n    children: type === TaskType.HEADS ? 'H' : 'T'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n  const [flippingCoins, setFlippingCoins] = useState({});\n  const handleCompleteTask = taskId => {\n    if (wsService) {\n      setFlippingCoins(prev => ({\n        ...prev,\n        [taskId]: true\n      }));\n      setTimeout(() => {\n        wsService.completeTask(taskId);\n        setFlippingCoins(prev => ({\n          ...prev,\n          [taskId]: false\n        }));\n      }, 1000);\n    }\n  };\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n  const renderTask = (task, playerName) => /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      mb: 2,\n      backgroundColor: 'background.paper',\n      position: 'relative',\n      overflow: 'visible'\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      sx: {\n        pb: '16px !important',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [renderCoin(task.type, flippingCoins[task.id] || false, false, task.status === TaskStatus.PENDING && task.assigned_to === playerId && !flippingCoins[task.id] ? () => handleCompleteTask(task.id) : undefined), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          width: '100%',\n          mb: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'primary.main'\n          },\n          children: task.type === TaskType.HEADS ? 'Flip to Heads' : 'Flip to Tails'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          label: task.status,\n          size: \"small\",\n          sx: {\n            backgroundColor: getTaskStatusColor(task.status),\n            color: 'white',\n            fontWeight: 500\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          children: [\"Batch: \", task.batch_number]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, this)\n  }, `${task.id}-${playerName}-${task.batch_number}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 9\n  }, this);\n  const renderPlayer = player => {\n    var _player$completed_tas;\n    const currentBatchTarget = player.current_tasks.length > 0 ? player.current_tasks[0].type : (_player$completed_tas = player.completed_tasks.find(t => t.batch_number === player.current_batch)) === null || _player$completed_tas === void 0 ? void 0 : _player$completed_tas.type;\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 6,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          height: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                color: 'primary.main'\n              },\n              children: player.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              label: player.status,\n              size: \"small\",\n              color: getPlayerStatusColor(player.status),\n              sx: {\n                fontWeight: 500\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            sx: {\n              mb: 3\n            },\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: 2,\n                  mb: 2,\n                  backgroundColor: 'rgba(33, 150, 243, 0.1)',\n                  p: 2,\n                  borderRadius: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  sx: {\n                    fontWeight: 500\n                  },\n                  children: [\"Current Batch: \", player.current_batch, \" / \", game === null || game === void 0 ? void 0 : game.max_batches]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 316,\n                  columnNumber: 37\n                }, this), currentBatchTarget && /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: 1\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body1\",\n                    sx: {\n                      fontWeight: 500\n                    },\n                    children: \"Target:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 321,\n                    columnNumber: 45\n                  }, this), renderCoin(currentBatchTarget, false, true)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: \"Current Tasks\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: player.current_tasks.length\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: \"Completed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: player.completed_tasks.length\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 3\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              sx: {\n                color: 'primary.main',\n                fontWeight: 500,\n                mb: 2\n              },\n              children: \"Current Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 29\n            }, this), player.current_tasks.map(task => renderTask(task, player.name))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 25\n          }, this), player.completed_tasks.length > 0 && game && player.order === game.players.length - 1 && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 3\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              sx: {\n                color: 'primary.main',\n                fontWeight: 500,\n                mb: 2\n              },\n              children: \"Completed Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 33\n            }, this), player.completed_tasks.map(task => renderTask(task, player.name))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }, this)\n    }, `player-${player.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }, this);\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n  const formatTime = milliseconds => {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed! \\uD83C\\uDF89\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTime(totalTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }, this);\n  };\n  if (!gameId || !playerId) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Tabs, {\n        value: activeTab,\n        onChange: handleTabChange,\n        sx: {\n          mb: 3,\n          borderBottom: 1,\n          borderColor: 'divider'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Join Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 21\n      }, this), activeTab === 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Your Name\",\n            value: playerName,\n            onChange: e => setPlayerName(e.target.value),\n            required: true,\n            autoComplete: \"off\",\n            sx: {\n              backgroundColor: 'white'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Number of Players\",\n            type: \"number\",\n            value: playerCount,\n            onChange: e => setPlayerCount(Number(e.target.value)),\n            inputProps: {\n              min: 2,\n              max: 10\n            },\n            autoComplete: \"off\",\n            sx: {\n              backgroundColor: 'white'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Number of Batches\",\n            type: \"number\",\n            value: maxBatches,\n            onChange: e => setMaxBatches(Number(e.target.value)),\n            inputProps: {\n              min: 1,\n              max: 10\n            },\n            autoComplete: \"off\",\n            sx: {\n              backgroundColor: 'white'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Coins per Batch\",\n            type: \"number\",\n            value: coinsPerBatch,\n            onChange: e => setCoinsPerBatch(Number(e.target.value)),\n            inputProps: {\n              min: 1,\n              max: 10\n            },\n            autoComplete: \"off\",\n            sx: {\n              backgroundColor: 'white'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: handleCreateGame,\n            disabled: !playerName,\n            sx: {\n              mt: 2\n            },\n            children: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Game ID\",\n            value: joinGameId,\n            onChange: e => setJoinGameId(e.target.value.toUpperCase()),\n            autoComplete: \"off\",\n            sx: {\n              backgroundColor: 'white'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Player Name\",\n            value: playerName,\n            onChange: e => setPlayerName(e.target.value),\n            autoComplete: \"off\",\n            sx: {\n              backgroundColor: 'white'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: handleJoinGame,\n            sx: {\n              mt: 2\n            },\n            children: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3,\n      backgroundColor: 'background.default',\n      minHeight: '100vh'\n    },\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 17\n    }, this), game && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 1,\n              color: 'primary.main'\n            },\n            children: [\"Game ID: \", game.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              color: 'text.primary'\n            },\n            children: [\"Game Status: \", game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 25\n        }, this), game.status === 'in_progress' && startTime && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'text.secondary'\n          },\n          children: [\"Time: \", formatTime(Date.now() - startTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 21\n      }, this), game.status === 'waiting' && playerId === ((_game$players$ = game.players[0]) === null || _game$players$ === void 0 ? void 0 : _game$players$.id) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartGame,\n        sx: {\n          mb: 3\n        },\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 25\n      }, this), game.status === 'in_progress' && ((_game$players = game.players[game.players.length - 1]) === null || _game$players === void 0 ? void 0 : _game$players.id) === playerId && ((_game$players2 = game.players[game.players.length - 1]) === null || _game$players2 === void 0 ? void 0 : _game$players2.completed_tasks.length) > 0 && !((_game$players3 = game.players[game.players.length - 1]) !== null && _game$players3 !== void 0 && _game$players3.current_tasks.length) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"success\",\n        onClick: handleGameComplete,\n        sx: {\n          mb: 3\n        },\n        children: \"Complete Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: game.players.map(renderPlayer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), renderCompletionDialog()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 550,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"7E063MXzlJ3wQVUdgny/vERzU64=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","keyframes","TaskStatus","PlayerStatus","TaskType","gameService","WebSocketService","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","gameId","initialGameId","_s","_game$players$","_game$players","_game$players2","_game$players3","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","service","updatedGame","console","log","connect","disconnect","status","Date","now","handleCreateGame","newGameId","createGame","newPlayerId","joinGame","gameState","getGameState","handleJoinGame","targetGameId","exists","checkGameExists","handleStartGame","startGame","flipAnimation","renderCoin","type","isFlipping","isSmall","onClick","sx","width","height","borderRadius","display","alignItems","justifyContent","backgroundColor","HEADS","border","color","fontWeight","fontSize","animation","perspective","mb","position","cursor","transition","transform","boxShadow","content","top","left","right","bottom","background","pointerEvents","children","fileName","_jsxFileName","lineNumber","columnNumber","flippingCoins","setFlippingCoins","handleCompleteTask","taskId","prev","setTimeout","completeTask","getPlayerStatusColor","ACTIVE","WAITING","IDLE","getTaskStatusColor","COMPLETED","IN_PROGRESS","PENDING","renderTask","task","overflow","pb","flexDirection","id","assigned_to","undefined","variant","label","size","batch_number","renderPlayer","player","_player$completed_tas","currentBatchTarget","current_tasks","length","completed_tasks","find","t","current_batch","item","xs","md","name","container","spacing","gap","p","max_batches","mt","map","order","players","handleTabChange","_","newValue","handleGameComplete","formatTime","milliseconds","seconds","Math","floor","minutes","remainingSeconds","toString","padStart","renderCompletionDialog","totalTime","open","onClose","PaperProps","textAlign","py","window","location","reload","minHeight","value","onChange","borderBottom","borderColor","severity","fullWidth","e","target","required","autoComplete","Number","inputProps","min","max","disabled","toUpperCase","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes\n} from '@mui/material';\nimport { Game as GameType, Player, Task, TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\n\ninterface GameProps {\n    gameId?: string;\n}\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | undefined>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, (updatedGame) => {\n                console.log('Game state updated:', updatedGame);\n                setGame(updatedGame);\n            });\n            service.connect();\n            setWsService(service);\n\n            // Cleanup function\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    const handleCreateGame = async () => {\n        if (!playerName) {\n            setError('Please enter your name first');\n            return;\n        }\n\n        try {\n            const newGameId = await gameService.createGame(playerCount, maxBatches, coinsPerBatch);\n            setGameId(newGameId);\n            \n            // Automatically join the game as the creator\n            const newPlayerId = await gameService.joinGame(newGameId, playerName);\n            setPlayerId(newPlayerId);\n            \n            // Get initial game state\n            const gameState = await gameService.getGameState(newGameId);\n            setGame(gameState);\n            \n            // Reset all input fields\n            setPlayerName('');\n            setPlayerCount(2);\n            setMaxBatches(3);\n            setCoinsPerBatch(2);\n            setJoinGameId('');\n            setError(null);\n        } catch (error) {\n            setError('Failed to create game. Please try again.');\n            console.error('Error creating game:', error);\n        }\n    };\n\n    const handleJoinGame = async () => {\n        if (!playerName) {\n            setError('Please enter player name');\n            return;\n        }\n\n        const targetGameId = gameId || joinGameId;\n        if (!targetGameId) {\n            setError('Please enter game ID');\n            return;\n        }\n\n        try {\n            const exists = await gameService.checkGameExists(targetGameId);\n            if (!exists) {\n                setError('Game not found');\n                return;\n            }\n\n            const newPlayerId = await gameService.joinGame(targetGameId, playerName);\n            setPlayerId(newPlayerId);\n            setGameId(targetGameId);\n            setShowJoinDialog(false);\n            const gameState = await gameService.getGameState(targetGameId);\n            setGame(gameState);\n            \n            // Reset all input fields\n            setPlayerName('');\n            setPlayerCount(2);\n            setMaxBatches(3);\n            setCoinsPerBatch(2);\n            setJoinGameId('');\n            setError(null);\n        } catch (error) {\n            setError('Failed to join game. Please try again.');\n            console.error('Error joining game:', error);\n        }\n    };\n\n    const handleStartGame = async () => {\n        if (!gameId) return;\n\n        try {\n            await gameService.startGame(gameId);\n            setError(null);\n        } catch (error) {\n            setError('Failed to start game. Please try again.');\n            console.error('Error starting game:', error);\n        }\n    };\n\n    const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        100% {\n            transform: rotateY(1800deg);\n        }\n    `;\n\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void) => (\n        <Box\n            sx={{\n                width: isSmall ? 40 : 80,\n                height: isSmall ? 40 : 80,\n                borderRadius: '50%',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                backgroundColor: type === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                border: `${isSmall ? 2 : 4}px solid #B8860B`,\n                color: '#704214',\n                fontWeight: 'bold',\n                fontSize: isSmall ? '0.9rem' : '1.2rem',\n                animation: isFlipping ? `${flipAnimation} 1s ease-in-out` : 'none',\n                perspective: 1000,\n                mb: isSmall ? 0 : 2,\n                position: 'relative',\n                cursor: onClick ? 'pointer' : 'default',\n                transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n                '&:hover': onClick ? {\n                    transform: 'scale(1.05)',\n                    boxShadow: '0 4px 8px rgba(0,0,0,0.2)'\n                } : {},\n                '&:active': onClick ? {\n                    transform: 'scale(0.95)'\n                } : {},\n                '&::after': {\n                    content: '\"\"',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                    borderRadius: '50%',\n                    background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                    pointerEvents: 'none'\n                }\n            }}\n            onClick={onClick}\n        >\n            {type === TaskType.HEADS ? 'H' : 'T'}\n        </Box>\n    );\n\n    const [flippingCoins, setFlippingCoins] = useState<{[key: string]: boolean}>({});\n\n    const handleCompleteTask = (taskId: string) => {\n        if (wsService) {\n            setFlippingCoins(prev => ({ ...prev, [taskId]: true }));\n            setTimeout(() => {\n                wsService.completeTask(taskId);\n                setFlippingCoins(prev => ({ ...prev, [taskId]: false }));\n            }, 1000);\n        }\n    };\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    const renderTask = (task: Task, playerName: string) => (\n        <Card \n            key={`${task.id}-${playerName}-${task.batch_number}`} \n            sx={{ \n                mb: 2,\n                backgroundColor: 'background.paper',\n                position: 'relative',\n                overflow: 'visible'\n            }}\n        >\n            <CardContent sx={{ \n                pb: '16px !important',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n            }}>\n                {renderCoin(\n                    task.type, \n                    flippingCoins[task.id] || false,\n                    false,\n                    task.status === TaskStatus.PENDING && task.assigned_to === playerId && !flippingCoins[task.id]\n                        ? () => handleCompleteTask(task.id)\n                        : undefined\n                )}\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%', mb: 1 }}>\n                    <Typography variant=\"h6\" sx={{ color: 'primary.main' }}>\n                        {task.type === TaskType.HEADS ? 'Flip to Heads' : 'Flip to Tails'}\n                    </Typography>\n                    <Chip\n                        label={task.status}\n                        size=\"small\"\n                        sx={{\n                            backgroundColor: getTaskStatusColor(task.status),\n                            color: 'white',\n                            fontWeight: 500,\n                        }}\n                    />\n                </Box>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                        Batch: {task.batch_number}\n                    </Typography>\n                </Box>\n            </CardContent>\n        </Card>\n    );\n\n    const renderPlayer = (player: Player) => {\n        const currentBatchTarget = player.current_tasks.length > 0 \n            ? player.current_tasks[0].type \n            : player.completed_tasks.find(t => t.batch_number === player.current_batch)?.type;\n\n        return (\n            <Grid item xs={12} md={6} key={`player-${player.id}`}>\n                <Card sx={{ height: '100%' }}>\n                    <CardContent>\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                            <Typography variant=\"h6\" sx={{ color: 'primary.main' }}>{player.name}</Typography>\n                            <Chip\n                                label={player.status}\n                                size=\"small\"\n                                color={getPlayerStatusColor(player.status)}\n                                sx={{ fontWeight: 500 }}\n                            />\n                        </Box>\n                        <Grid container spacing={2} sx={{ mb: 3 }}>\n                            <Grid item xs={12}>\n                                <Box sx={{ \n                                    display: 'flex', \n                                    alignItems: 'center', \n                                    gap: 2, \n                                    mb: 2,\n                                    backgroundColor: 'rgba(33, 150, 243, 0.1)',\n                                    p: 2,\n                                    borderRadius: 2\n                                }}>\n                                    <Typography variant=\"body1\" sx={{ fontWeight: 500 }}>\n                                        Current Batch: {player.current_batch} / {game?.max_batches}\n                                    </Typography>\n                                    {currentBatchTarget && (\n                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                                            <Typography variant=\"body1\" sx={{ fontWeight: 500 }}>\n                                                Target:\n                                            </Typography>\n                                            {renderCoin(currentBatchTarget, false, true)}\n                                        </Box>\n                                    )}\n                                </Box>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Typography variant=\"body2\" color=\"textSecondary\">Current Tasks</Typography>\n                                <Typography variant=\"h6\">{player.current_tasks.length}</Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Typography variant=\"body2\" color=\"textSecondary\">Completed</Typography>\n                                <Typography variant=\"h6\">{player.completed_tasks.length}</Typography>\n                            </Grid>\n                        </Grid>\n                        <Box sx={{ mt: 3 }}>\n                            <Typography variant=\"subtitle1\" sx={{ color: 'primary.main', fontWeight: 500, mb: 2 }}>\n                                Current Tasks\n                            </Typography>\n                            {player.current_tasks.map(task => renderTask(task, player.name))}\n                        </Box>\n                        {player.completed_tasks.length > 0 && game && player.order === game.players.length - 1 && (\n                            <Box sx={{ mt: 3 }}>\n                                <Typography variant=\"subtitle1\" sx={{ color: 'primary.main', fontWeight: 500, mb: 2 }}>\n                                    Completed Tasks\n                                </Typography>\n                                {player.completed_tasks.map(task => renderTask(task, player.name))}\n                            </Box>\n                        )}\n                    </CardContent>\n                </Card>\n            </Grid>\n        );\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    const formatTime = (milliseconds: number) => {\n        const seconds = Math.floor(milliseconds / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed! 🎉\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTime(totalTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    if (!gameId || !playerId) {\n        return (\n            <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n                <Tabs \n                    value={activeTab} \n                    onChange={handleTabChange} \n                    sx={{ \n                        mb: 3,\n                        borderBottom: 1,\n                        borderColor: 'divider'\n                    }}\n                >\n                    <Tab label=\"Create Game\" />\n                    <Tab label=\"Join Game\" />\n                </Tabs>\n\n                {error && (\n                    <Alert severity=\"error\" sx={{ mb: 2 }}>\n                        {error}\n                    </Alert>\n                )}\n\n                {activeTab === 0 ? (\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Your Name\"\n                                value={playerName}\n                                onChange={(e) => setPlayerName(e.target.value)}\n                                required\n                                autoComplete=\"off\"\n                                sx={{ backgroundColor: 'white' }}\n                            />\n                        </Grid>\n                        <Grid item xs={12} md={4}>\n                            <TextField\n                                fullWidth\n                                label=\"Number of Players\"\n                                type=\"number\"\n                                value={playerCount}\n                                onChange={(e) => setPlayerCount(Number(e.target.value))}\n                                inputProps={{ min: 2, max: 10 }}\n                                autoComplete=\"off\"\n                                sx={{ backgroundColor: 'white' }}\n                            />\n                        </Grid>\n                        <Grid item xs={12} md={4}>\n                            <TextField\n                                fullWidth\n                                label=\"Number of Batches\"\n                                type=\"number\"\n                                value={maxBatches}\n                                onChange={(e) => setMaxBatches(Number(e.target.value))}\n                                inputProps={{ min: 1, max: 10 }}\n                                autoComplete=\"off\"\n                                sx={{ backgroundColor: 'white' }}\n                            />\n                        </Grid>\n                        <Grid item xs={12} md={4}>\n                            <TextField\n                                fullWidth\n                                label=\"Coins per Batch\"\n                                type=\"number\"\n                                value={coinsPerBatch}\n                                onChange={(e) => setCoinsPerBatch(Number(e.target.value))}\n                                inputProps={{ min: 1, max: 10 }}\n                                autoComplete=\"off\"\n                                sx={{ backgroundColor: 'white' }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button \n                                variant=\"contained\" \n                                onClick={handleCreateGame}\n                                disabled={!playerName}\n                                sx={{ mt: 2 }}\n                            >\n                                Create Game\n                            </Button>\n                        </Grid>\n                    </Grid>\n                ) : (\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} md={6}>\n                            <TextField\n                                fullWidth\n                                label=\"Game ID\"\n                                value={joinGameId}\n                                onChange={(e) => setJoinGameId(e.target.value.toUpperCase())}\n                                autoComplete=\"off\"\n                                sx={{ backgroundColor: 'white' }}\n                            />\n                        </Grid>\n                        <Grid item xs={12} md={6}>\n                            <TextField\n                                fullWidth\n                                label=\"Player Name\"\n                                value={playerName}\n                                onChange={(e) => setPlayerName(e.target.value)}\n                                autoComplete=\"off\"\n                                sx={{ backgroundColor: 'white' }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button \n                                variant=\"contained\" \n                                onClick={handleJoinGame}\n                                sx={{ mt: 2 }}\n                            >\n                                Join Game\n                            </Button>\n                        </Grid>\n                    </Grid>\n                )}\n            </Box>\n        );\n    }\n\n    return (\n        <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n            {error && (\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\n                    {error}\n                </Alert>\n            )}\n\n            {game && (\n                <>\n                    <Box sx={{ \n                        display: 'flex', \n                        justifyContent: 'space-between', \n                        alignItems: 'center',\n                        mb: 3\n                    }}>\n                        <Box>\n                            <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                                Game ID: {game.id}\n                            </Typography>\n                            <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                                Game Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                            </Typography>\n                        </Box>\n                        {game.status === 'in_progress' && startTime && (\n                            <Typography variant=\"h6\" sx={{ color: 'text.secondary' }}>\n                                Time: {formatTime(Date.now() - startTime)}\n                            </Typography>\n                        )}\n                    </Box>\n\n                    {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleStartGame}\n                            sx={{ mb: 3 }}\n                        >\n                            Start Game\n                        </Button>\n                    )}\n\n                    {game.status === 'in_progress' && \n                     game.players[game.players.length - 1]?.id === playerId &&\n                     game.players[game.players.length - 1]?.completed_tasks.length > 0 &&\n                     !game.players[game.players.length - 1]?.current_tasks.length &&\n                     (\n                        <Button\n                            variant=\"contained\"\n                            color=\"success\"\n                            onClick={handleGameComplete}\n                            sx={{ mb: 3 }}\n                        >\n                            Complete Game\n                        </Button>\n                    )}\n\n                    <Grid container spacing={3}>\n                        {game.players.map(renderPlayer)}\n                    </Grid>\n                </>\n            )}\n            {renderCompletionDialog()}\n        </Box>\n    );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}