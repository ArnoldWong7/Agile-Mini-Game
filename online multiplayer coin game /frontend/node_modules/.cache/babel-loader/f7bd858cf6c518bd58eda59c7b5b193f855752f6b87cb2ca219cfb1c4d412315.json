{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Tabs, Tab, Alert, Chip, keyframes, Stack, TableContainer, Table, TableHead, TableBody, TableCell, TableRow, Paper } from '@mui/material';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport { TaskType, TaskStatus, PlayerStatus } from '../types';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Game = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  var _game$players$;\n  const [gameId, setGameId] = useState(initialGameId);\n  const [game, setGame] = useState(null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerId, setPlayerId] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n  const [playerCount, setPlayerCount] = useState(2);\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showResultPage, setShowResultPage] = useState(false);\n  const [batchCompletionTimes, setBatchCompletionTimes] = useState({});\n  const [batchStartTimes, setBatchStartTimes] = useState({});\n  const [batchFlipStates, setBatchFlipStates] = useState({});\n\n  // 添加状态来跟踪硬币的翻转状态和批次完成状态\n  const [flippedCoins, setFlippedCoins] = useState([]);\n  const [pendingBatchCompletion, setPendingBatchCompletion] = useState({});\n\n  // 添加翻转动画状态\n\n  const [flipStates, setFlipStates] = useState({});\n\n  // 添加游戏状态更新处理函数\n  const handleGameUpdate = useCallback(updatedGame => {\n    console.log('Game state updated:', updatedGame);\n    setGame(updatedGame);\n\n    // 如果游戏状态变为completed，记录结束时间\n    if (updatedGame.status === 'completed' && !endTime) {\n      setEndTime(Date.now());\n    }\n  }, [endTime]);\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, handleGameUpdate);\n      service.connect();\n      setWsService(service);\n\n      // Cleanup function\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId, handleGameUpdate]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  useEffect(() => {\n    let timerInterval = null;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && startTime) {\n      timerInterval = setInterval(() => {\n        setCurrentTime(Date.now() - startTime);\n      }, 1000);\n    }\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'completed' && startTime && !endTime) {\n      setEndTime(Date.now());\n      setShowResultPage(true);\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime, endTime]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && game.players) {\n      const newStartTimes = {\n        ...batchStartTimes\n      };\n      const newCompletionTimes = {\n        ...batchCompletionTimes\n      };\n      game.players.forEach(player => {\n        if (!newStartTimes[player.id]) {\n          newStartTimes[player.id] = {};\n        }\n        if (!newCompletionTimes[player.id]) {\n          newCompletionTimes[player.id] = {};\n        }\n\n        // 使用后端提供的批次开始时间\n        if (player.batch_start_time) {\n          Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n            newStartTimes[player.id][Number(batchNum)] = startTime;\n          });\n        }\n\n        // Calculate completion times for each batch\n        for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n          var _newStartTimes$player;\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const startedAt = (_newStartTimes$player = newStartTimes[player.id]) === null || _newStartTimes$player === void 0 ? void 0 : _newStartTimes$player[batchNum];\n          if (startedAt && batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[player.id][batchNum]) {\n            newCompletionTimes[player.id][batchNum] = Date.now() - startedAt;\n          }\n        }\n      });\n      setBatchStartTimes(newStartTimes);\n      setBatchCompletionTimes(newCompletionTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players]);\n\n  // 修改创建游戏的函数\n  const handleCreateGame = async () => {\n    try {\n      // 固定4个批次，分别是20、10、5、2个硬币\n      const gameId = await gameService.createGame(playerCount, 4, [20, 10, 5, 2]);\n      setGameId(gameId);\n      const playerId = await gameService.joinGame(gameId, playerName);\n      setPlayerId(playerId);\n\n      // 创建WebSocket连接\n      const ws = new WebSocketService(gameId, playerId, handleGameUpdate);\n      setWsService(ws);\n      ws.connect();\n      setShowJoinDialog(false);\n    } catch (error) {\n      console.error('Error creating game:', error);\n      setError('Failed to create game');\n    }\n  };\n  const handleJoinGame = async () => {\n    if (!playerName) {\n      setError('Please enter player name');\n      return;\n    }\n    const targetGameId = gameId || joinGameId;\n    if (!targetGameId) {\n      setError('Please enter game ID');\n      return;\n    }\n    try {\n      const exists = await gameService.checkGameExists(targetGameId);\n      if (!exists) {\n        setError('Game not found');\n        return;\n      }\n      const newPlayerId = await gameService.joinGame(targetGameId, playerName);\n      setPlayerId(newPlayerId);\n      setGameId(targetGameId);\n      setShowJoinDialog(false);\n      const gameState = await gameService.getGameState(targetGameId);\n      setGame(gameState);\n\n      // Reset all input fields\n      setPlayerName('');\n      setPlayerCount(2);\n      setMaxBatches(3);\n      setCoinsPerBatch(2);\n      setJoinGameId('');\n      setError(null);\n    } catch (error) {\n      setError('Failed to join game. Please try again.');\n      console.error('Error joining game:', error);\n    }\n  };\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      setError(null);\n    } catch (error) {\n      setError('Failed to start game. Please try again.');\n      console.error('Error starting game:', error);\n    }\n  };\n  const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n  // 添加一个专门用于渲染目标硬币的函数\n  const renderTargetCoin = type => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: {\n          xs: '20px',\n          sm: '32px'\n        },\n        height: {\n          xs: '20px',\n          sm: '32px'\n        },\n        borderRadius: '50%',\n        border: theme => ({\n          xs: `1px solid ${theme.palette.primary.main}`,\n          sm: `2px solid ${theme.palette.primary.main}`\n        }),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: theme => theme.palette.background.paper,\n        color: theme => theme.palette.text.primary,\n        fontSize: {\n          xs: '0.7rem',\n          sm: '0.9rem'\n        },\n        fontWeight: 'bold',\n        marginBottom: {\n          xs: 0,\n          sm: 1\n        },\n        marginRight: 1\n      },\n      children: type === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 检查批次是否所有硬币都已翻转\n  const isBatchAllFlipped = (batchNum, playerId) => {\n    const batchTasks = game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === playerId);\n    return (batchTasks === null || batchTasks === void 0 ? void 0 : batchTasks.every(t => flippedCoins.includes(t.id))) || false;\n  };\n\n  // 处理硬币翻转\n  const handleCoinFlip = taskId => {\n    const task = game === null || game === void 0 ? void 0 : game.tasks.find(t => t.id === taskId);\n    if (!task || !game) return;\n\n    // 如果硬币已经翻转，不做任何操作\n    if (flippedCoins.includes(taskId)) return;\n\n    // 开始翻转动画\n    setFlipStates(prev => ({\n      ...prev,\n      [taskId]: {\n        isFlipping: true,\n        showOpposite: false\n      }\n    }));\n\n    // 动画完成后记录翻转状态\n    setTimeout(() => {\n      setFlipStates(prev => ({\n        ...prev,\n        [taskId]: {\n          isFlipping: false,\n          showOpposite: true\n        }\n      }));\n\n      // 记录硬币已翻转\n      setFlippedCoins(prev => [...prev, taskId]);\n\n      // 更新待完成的批次\n      setPendingBatchCompletion(prev => {\n        const newState = {\n          ...prev\n        };\n        if (!newState[task.batch_number]) {\n          newState[task.batch_number] = [];\n        }\n        if (!newState[task.batch_number].includes(taskId)) {\n          newState[task.batch_number] = [...newState[task.batch_number], taskId];\n        }\n        return newState;\n      });\n\n      // 检查是否所有硬币都已翻转\n      if (task.assigned_to && isBatchAllFlipped(task.batch_number, task.assigned_to)) {\n        handleCompleteBatch(task.batch_number);\n      }\n    }, 600);\n  };\n\n  // 处理批次完成\n  const handleCompleteBatch = batchNum => {\n    const pendingTasks = pendingBatchCompletion[batchNum] || [];\n    if (pendingTasks.length === 0) return;\n\n    // 发送所有任务完成的请求\n    pendingTasks.forEach(taskId => {\n      if (wsService) {\n        wsService.completeTask(taskId);\n      }\n    });\n\n    // 清理这个批次的待完成状态\n    setPendingBatchCompletion(prev => {\n      const newState = {\n        ...prev\n      };\n      delete newState[batchNum];\n      return newState;\n    });\n  };\n\n  // 修改渲染硬币的函数\n  const renderCoin = (type, isFlipping, isSmall = false, onClick, taskId) => {\n    const flipState = taskId ? flipStates[taskId] : undefined;\n    const isFlipped = taskId ? flippedCoins.includes(taskId) : false;\n\n    // 决定显示哪一面\n    const displayType = isFlipped ? type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS : type;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: isSmall ? 20 : 32,\n        height: isSmall ? 20 : 32,\n        borderRadius: '50%',\n        backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n        border: `${isSmall ? 1 : 2}px solid #B8860B`,\n        color: '#704214',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 'bold',\n        fontSize: isSmall ? '0.6rem' : '0.8rem',\n        perspective: 1000,\n        mb: isSmall ? 0 : 1,\n        position: 'relative',\n        cursor: onClick ? 'pointer' : 'default',\n        transition: 'transform 0.6s',\n        transformStyle: 'preserve-3d',\n        transform: flipState !== null && flipState !== void 0 && flipState.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n        '&:hover': onClick ? {\n          transform: 'scale(1.05)',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n        } : {},\n        '&:active': onClick ? {\n          transform: 'scale(0.95)'\n        } : {},\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          borderRadius: '50%',\n          background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n          pointerEvents: 'none'\n        }\n      },\n      onClick: onClick,\n      children: displayType === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 监听游戏状态变化\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks) {\n      // 检查是否有新的批次开始\n      game.players.forEach(player => {\n        const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n        const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n\n        // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n        if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n          // 清理上一个批次的翻转状态\n          const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n          const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n          setFlippedCoins(prev => prev.filter(id => !prevBatchTaskIds.includes(id)));\n        }\n      });\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks]);\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n\n  // 渲染任务行\n  const renderTaskRow = tasks => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: 1,\n        mb: 2\n      },\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: renderCoin(task.type, false, false, task.assigned_to === playerId && !flippedCoins.includes(task.id) ? () => handleCoinFlip(task.id) : undefined, task.id)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染玩家卡片\n  const renderPlayer = player => {\n    var _currentBatchTasks$;\n    const currentBatchTasks = (game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === player.current_batch && t.assigned_to === player.id)) || [];\n    const completedTasks = (game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.status === TaskStatus.COMPLETED && t.assigned_to === player.id)) || [];\n\n    // 获取当前批次的目标类型\n    const currentBatchTarget = (_currentBatchTasks$ = currentBatchTasks[0]) === null || _currentBatchTasks$ === void 0 ? void 0 : _currentBatchTasks$.type;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: player.status,\n            color: player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\",\n            size: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2,\n            bgcolor: 'background.default',\n            p: 2,\n            borderRadius: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              mb: 1\n            },\n            children: [\"Current Batch: \", player.current_batch, \" / \", game === null || game === void 0 ? void 0 : game.max_batches, currentBatchTarget && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                mt: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  mr: 1\n                },\n                children: \"Target:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 544,\n                columnNumber: 37\n              }, this), renderCoin(currentBatchTarget, false, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              color: \"text.secondary\",\n              children: \"Current Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 29\n            }, this), renderTaskRow(currentBatchTasks)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 25\n          }, this), completedTasks.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              color: \"text.secondary\",\n              children: \"Completed Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 33\n            }, this), renderTaskRow(completedTasks)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 29\n          }, this), player.id === playerId && isBatchAllFlipped(player.current_batch, player.id) && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => handleCompleteBatch(player.current_batch),\n            sx: {\n              mt: 2\n            },\n            children: \"Complete This Batch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 17\n      }, this)\n    }, player.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 13\n    }, this);\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n\n  // 添加一个辅助函数来处理毫秒到时间的转换\n  const formatTimeFromMs = ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTimeFromMs(totalTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteGame = () => {\n    setShowResultPage(true);\n  };\n  const handleReturnToMain = () => {\n    window.location.reload();\n  };\n  const renderResultPage = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 600,\n          width: '100%',\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            mb: 3,\n            color: 'primary.main'\n          },\n          children: \"Game Complete! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            mb: 4\n          },\n          children: [\"Total Time: \", formatTimeFromMs(totalTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMain,\n          size: \"large\",\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 13\n    }, this);\n  };\n  const renderStatistics = () => {\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mb: 2,\n          color: 'primary.main'\n        },\n        children: \"Game Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 17\n      }, this), Array.from({\n        length: game.max_batches\n      }, (_, i) => i + 1).map(batchNum => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: [\"Batch \", batchNum]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          sx: {\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Player\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 720,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 721,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 722,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 719,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [game.players.map(player => {\n                var _player$batch_start_t, _player$batch_complet, _player$batch_start_t2;\n                const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n                const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                const hasStarted = ((_player$batch_start_t = player.batch_start_time) === null || _player$batch_start_t === void 0 ? void 0 : _player$batch_start_t[batchNum]) != null;\n                const completionTime = (_player$batch_complet = player.batch_completion_time) === null || _player$batch_complet === void 0 ? void 0 : _player$batch_complet[batchNum];\n                const startTime = (_player$batch_start_t2 = player.batch_start_time) === null || _player$batch_start_t2 === void 0 ? void 0 : _player$batch_start_t2[batchNum];\n\n                // 计算当前时间（如果批次已开始但未完成）\n                let displayTime = '-';\n                if (completionTime) {\n                  displayTime = formatTimeFromMs(completionTime);\n                } else if (hasStarted && startTime) {\n                  const currentTime = Date.now() - startTime;\n                  displayTime = formatTimeFromMs(currentTime);\n                }\n                let status = 'Pending';\n                if (isCompleted) {\n                  status = 'Completed';\n                } else if (hasStarted) {\n                  status = 'In Progress';\n                }\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: player.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 754,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: displayTime\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 755,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: /*#__PURE__*/_jsxDEV(Chip, {\n                      label: status,\n                      size: \"small\",\n                      color: isCompleted ? 'success' : hasStarted ? 'primary' : 'default'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 757,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 756,\n                    columnNumber: 49\n                  }, this)]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 753,\n                  columnNumber: 45\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(TableRow, {\n                sx: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                },\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 767,\n                    columnNumber: 52\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 767,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: formatTimeFromMs(game.players.reduce((sum, p) => {\n                      var _p$batch_completion_t;\n                      return sum + (((_p$batch_completion_t = p.batch_completion_time) === null || _p$batch_completion_t === void 0 ? void 0 : _p$batch_completion_t[batchNum]) || 0);\n                    }, 0))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 769,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 768,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 776,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 766,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 25\n        }, this)]\n      }, batchNum, true, {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 13\n    }, this);\n  };\n  if (showResultPage) {\n    return renderResultPage();\n  }\n  if (!gameId || !playerId) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          mb: 4,\n          mt: 4,\n          background: 'linear-gradient(45deg, #2196f3 30%, #21CBF3 90%)',\n          p: 3,\n          borderRadius: 2,\n          boxShadow: '0 3px 5px 2px rgba(33, 150, 243, .3)',\n          color: 'white',\n          width: '100%',\n          maxWidth: 800\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: \"Online Multiplayer Coin Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 813,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          children: \"Flip coins with your friends in this multiplayer game!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 816,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 801,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: '100%',\n          maxWidth: 800,\n          backgroundColor: 'white',\n          borderRadius: 2,\n          boxShadow: '0 3px 10px rgba(0,0,0,0.1)',\n          p: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tabs, {\n          value: activeTab,\n          onChange: handleTabChange,\n          sx: {\n            mb: 3,\n            borderBottom: 1,\n            borderColor: 'divider'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 838,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 839,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 829,\n          columnNumber: 21\n        }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          sx: {\n            mb: 2\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 843,\n          columnNumber: 25\n        }, this), activeTab === 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Your Name\",\n              value: playerName,\n              onChange: e => setPlayerName(e.target.value),\n              required: true,\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 851,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 850,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Number of Players\",\n              type: \"number\",\n              value: playerCount,\n              onChange: e => setPlayerCount(Math.max(2, Math.min(5, parseInt(e.target.value) || 2))),\n              inputProps: {\n                min: 2,\n                max: 5\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 862,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 861,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleCreateGame,\n              disabled: !playerName || playerCount < 2,\n              sx: {\n                mt: 2\n              },\n              size: \"large\",\n              children: \"Create Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 874,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 873,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Game ID\",\n              value: joinGameId,\n              onChange: e => setJoinGameId(e.target.value.toUpperCase()),\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 888,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 887,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Player Name\",\n              value: playerName,\n              onChange: e => setPlayerName(e.target.value),\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 898,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 897,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleJoinGame,\n              sx: {\n                mt: 2\n              },\n              size: \"large\",\n              children: \"Join Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 908,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 907,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 886,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 821,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 793,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3,\n      backgroundColor: 'background.default',\n      minHeight: '100vh'\n    },\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 927,\n      columnNumber: 17\n    }, this), game && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 1,\n              color: 'primary.main'\n            },\n            children: [\"Game ID: \", game.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 941,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              color: 'text.primary'\n            },\n            children: [\"Game Status: \", game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 944,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 25\n        }, this), (game.status === 'in_progress' || game.status === 'completed') && startTime && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'text.secondary'\n          },\n          children: [\"Time: \", formatTimeFromMs(game.status === 'completed' && endTime ? endTime - startTime : currentTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 949,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 934,\n        columnNumber: 21\n      }, this), game.status === 'waiting' && playerId === ((_game$players$ = game.players[0]) === null || _game$players$ === void 0 ? void 0 : _game$players$.id) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartGame,\n        sx: {\n          mb: 3\n        },\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 956,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 3,\n            children: game.players.map(renderPlayer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 968,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 967,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: renderStatistics()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 974,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 925,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"tM1yrJKaGDSM6I5gE0WSGvmWpbo=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","keyframes","Stack","TableContainer","Table","TableHead","TableBody","TableCell","TableRow","Paper","gameService","WebSocketService","TaskType","TaskStatus","PlayerStatus","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","gameId","initialGameId","_s","_game$players$","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","currentTime","setCurrentTime","showResultPage","setShowResultPage","batchCompletionTimes","setBatchCompletionTimes","batchStartTimes","setBatchStartTimes","batchFlipStates","setBatchFlipStates","flippedCoins","setFlippedCoins","pendingBatchCompletion","setPendingBatchCompletion","flipStates","setFlipStates","handleGameUpdate","updatedGame","console","log","status","Date","now","service","connect","disconnect","timerInterval","setInterval","clearInterval","tasks","players","newStartTimes","newCompletionTimes","forEach","player","id","batch_start_time","Object","entries","batchNum","Number","max_batches","_newStartTimes$player","batchTasks","filter","t","batch_number","assigned_to","startedAt","length","every","COMPLETED","handleCreateGame","createGame","joinGame","ws","handleJoinGame","targetGameId","exists","checkGameExists","newPlayerId","gameState","getGameState","handleStartGame","startGame","flipAnimation","renderTargetCoin","type","sx","width","xs","sm","height","borderRadius","border","theme","palette","primary","main","display","alignItems","justifyContent","backgroundColor","background","paper","color","text","fontSize","fontWeight","marginBottom","marginRight","children","HEADS","fileName","_jsxFileName","lineNumber","columnNumber","isBatchAllFlipped","includes","handleCoinFlip","taskId","task","find","prev","isFlipping","showOpposite","setTimeout","newState","handleCompleteBatch","pendingTasks","completeTask","renderCoin","isSmall","onClick","flipState","undefined","isFlipped","displayType","TAILS","perspective","mb","position","cursor","transition","transformStyle","transform","boxShadow","content","top","left","right","bottom","pointerEvents","playerTasks","currentBatchTasks","current_batch","PENDING","prevBatchTasks","prevBatchTaskIds","map","getPlayerStatusColor","ACTIVE","WAITING","IDLE","getTaskStatusColor","IN_PROGRESS","renderTaskRow","flexWrap","gap","renderPlayer","_currentBatchTasks$","completedTasks","currentBatchTarget","variant","name","label","size","bgcolor","p","mt","mr","handleTabChange","_","newValue","handleGameComplete","formatTimeFromMs","ms","totalSeconds","Math","floor","minutes","seconds","toString","padStart","renderCompletionDialog","totalTime","open","onClose","PaperProps","textAlign","flexDirection","py","window","location","reload","handleCompleteGame","handleReturnToMain","renderResultPage","minHeight","maxWidth","renderStatistics","Array","from","i","component","align","_player$batch_start_t","_player$batch_complet","_player$batch_start_t2","isCompleted","hasStarted","completionTime","batch_completion_time","displayTime","reduce","sum","_p$batch_completion_t","value","onChange","borderBottom","borderColor","severity","container","spacing","item","fullWidth","e","target","required","autoComplete","md","max","min","parseInt","inputProps","disabled","toUpperCase","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes,\n    Stack,\n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableCell,\n    TableRow,\n    Paper\n} from '@mui/material';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport type { Game as GameType } from '../types';\nimport { TaskType, TaskStatus, PlayerStatus } from '../types';\n\ninterface GameProps {\n    gameId?: string;\n}\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | null>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n    const [batchCompletionTimes, setBatchCompletionTimes] = useState<{\n        [playerId: string]: {\n            [batchNumber: number]: number;\n        };\n    }>({});\n    const [batchStartTimes, setBatchStartTimes] = useState<{\n        [playerId: string]: {\n            [batchNum: number]: number;\n        };\n    }>({});\n    const [batchFlipStates, setBatchFlipStates] = useState<{\n        [batchNum: number]: {\n            [taskId: string]: boolean;  // true means flipped\n        };\n    }>({});\n\n    // 添加状态来跟踪硬币的翻转状态和批次完成状态\n    const [flippedCoins, setFlippedCoins] = useState<string[]>([]);\n    const [pendingBatchCompletion, setPendingBatchCompletion] = useState<{\n        [batchNum: number]: string[];  // batchNum -> taskIds\n    }>({});\n\n    // 添加翻转动画状态\n    interface FlipState {\n        isFlipping: boolean;\n        showOpposite: boolean;\n    }\n    const [flipStates, setFlipStates] = useState<{\n        [key: string]: FlipState;\n    }>({});\n\n    // 添加游戏状态更新处理函数\n    const handleGameUpdate = useCallback((updatedGame: GameType) => {\n        console.log('Game state updated:', updatedGame);\n        setGame(updatedGame);\n        \n        // 如果游戏状态变为completed，记录结束时间\n        if (updatedGame.status === 'completed' && !endTime) {\n            setEndTime(Date.now());\n        }\n    }, [endTime]);\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, handleGameUpdate);\n            service.connect();\n            setWsService(service);\n\n            // Cleanup function\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId, handleGameUpdate]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && startTime) {\n            timerInterval = setInterval(() => {\n                setCurrentTime(Date.now() - startTime);\n            }, 1000);\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, startTime, endTime]);\n\n    useEffect(() => {\n        if (game?.tasks && game.players) {\n            const newStartTimes = { ...batchStartTimes };\n            const newCompletionTimes = { ...batchCompletionTimes };\n\n            game.players.forEach(player => {\n                if (!newStartTimes[player.id]) {\n                    newStartTimes[player.id] = {};\n                }\n                if (!newCompletionTimes[player.id]) {\n                    newCompletionTimes[player.id] = {};\n                }\n\n                // 使用后端提供的批次开始时间\n                if (player.batch_start_time) {\n                    Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n                        newStartTimes[player.id][Number(batchNum)] = startTime;\n                    });\n                }\n\n                // Calculate completion times for each batch\n                for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const startedAt = newStartTimes[player.id]?.[batchNum];\n                    if (startedAt && \n                        batchTasks.length > 0 && \n                        batchTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                        !newCompletionTimes[player.id][batchNum]) {\n                        newCompletionTimes[player.id][batchNum] = Date.now() - startedAt;\n                    }\n                }\n            });\n\n            setBatchStartTimes(newStartTimes);\n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.tasks, game?.players]);\n\n    // 修改创建游戏的函数\n    const handleCreateGame = async () => {\n        try {\n            // 固定4个批次，分别是20、10、5、2个硬币\n            const gameId = await gameService.createGame(playerCount, 4, [20, 10, 5, 2]);\n            setGameId(gameId);\n            const playerId = await gameService.joinGame(gameId, playerName);\n            setPlayerId(playerId);\n            \n            // 创建WebSocket连接\n            const ws = new WebSocketService(gameId, playerId, handleGameUpdate);\n            setWsService(ws);\n            ws.connect();\n            \n            setShowJoinDialog(false);\n        } catch (error) {\n            console.error('Error creating game:', error);\n            setError('Failed to create game');\n        }\n    };\n\n    const handleJoinGame = async () => {\n        if (!playerName) {\n            setError('Please enter player name');\n            return;\n        }\n\n        const targetGameId = gameId || joinGameId;\n        if (!targetGameId) {\n            setError('Please enter game ID');\n            return;\n        }\n\n        try {\n            const exists = await gameService.checkGameExists(targetGameId);\n            if (!exists) {\n                setError('Game not found');\n                return;\n            }\n\n            const newPlayerId = await gameService.joinGame(targetGameId, playerName);\n            setPlayerId(newPlayerId);\n            setGameId(targetGameId);\n            setShowJoinDialog(false);\n            const gameState = await gameService.getGameState(targetGameId);\n            setGame(gameState);\n            \n            // Reset all input fields\n            setPlayerName('');\n            setPlayerCount(2);\n            setMaxBatches(3);\n            setCoinsPerBatch(2);\n            setJoinGameId('');\n            setError(null);\n        } catch (error) {\n            setError('Failed to join game. Please try again.');\n            console.error('Error joining game:', error);\n        }\n    };\n\n    const handleStartGame = async () => {\n        if (!gameId) return;\n\n        try {\n            await gameService.startGame(gameId);\n            setError(null);\n        } catch (error) {\n            setError('Failed to start game. Please try again.');\n            console.error('Error starting game:', error);\n        }\n    };\n\n    const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n    // 添加一个专门用于渲染目标硬币的函数\n    const renderTargetCoin = (type: TaskType) => {\n        return (\n            <Box\n                sx={{\n                    width: { xs: '20px', sm: '32px' },\n                    height: { xs: '20px', sm: '32px' },\n                    borderRadius: '50%',\n                    border: theme => ({\n                        xs: `1px solid ${theme.palette.primary.main}`,\n                        sm: `2px solid ${theme.palette.primary.main}`\n                    }),\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    backgroundColor: theme => theme.palette.background.paper,\n                    color: theme => theme.palette.text.primary,\n                    fontSize: { xs: '0.7rem', sm: '0.9rem' },\n                    fontWeight: 'bold',\n                    marginBottom: { xs: 0, sm: 1 },\n                    marginRight: 1\n                }}\n            >\n                {type === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 检查批次是否所有硬币都已翻转\n    const isBatchAllFlipped = (batchNum: number, playerId: string) => {\n        const batchTasks = game?.tasks.filter(t => \n            t.batch_number === batchNum && \n            t.assigned_to === playerId\n        );\n        return batchTasks?.every(t => flippedCoins.includes(t.id)) || false;\n    };\n\n    // 处理硬币翻转\n    const handleCoinFlip = (taskId: string) => {\n        const task = game?.tasks.find(t => t.id === taskId);\n        if (!task || !game) return;\n\n        // 如果硬币已经翻转，不做任何操作\n        if (flippedCoins.includes(taskId)) return;\n\n        // 开始翻转动画\n        setFlipStates(prev => ({\n            ...prev,\n            [taskId]: { \n                isFlipping: true,\n                showOpposite: false\n            }\n        }));\n\n        // 动画完成后记录翻转状态\n        setTimeout(() => {\n            setFlipStates(prev => ({\n                ...prev,\n                [taskId]: { \n                    isFlipping: false,\n                    showOpposite: true\n                }\n            }));\n            \n            // 记录硬币已翻转\n            setFlippedCoins(prev => [...prev, taskId]);\n\n            // 更新待完成的批次\n            setPendingBatchCompletion(prev => {\n                const newState = { ...prev };\n                if (!newState[task.batch_number]) {\n                    newState[task.batch_number] = [];\n                }\n                if (!newState[task.batch_number].includes(taskId)) {\n                    newState[task.batch_number] = [...newState[task.batch_number], taskId];\n                }\n                return newState;\n            });\n\n            // 检查是否所有硬币都已翻转\n            if (task.assigned_to && isBatchAllFlipped(task.batch_number, task.assigned_to)) {\n                handleCompleteBatch(task.batch_number);\n            }\n        }, 600);\n    };\n\n    // 处理批次完成\n    const handleCompleteBatch = (batchNum: number) => {\n        const pendingTasks = pendingBatchCompletion[batchNum] || [];\n        if (pendingTasks.length === 0) return;\n\n        // 发送所有任务完成的请求\n        pendingTasks.forEach(taskId => {\n            if (wsService) {\n                wsService.completeTask(taskId);\n            }\n        });\n\n        // 清理这个批次的待完成状态\n        setPendingBatchCompletion(prev => {\n            const newState = { ...prev };\n            delete newState[batchNum];\n            return newState;\n        });\n    };\n\n    // 修改渲染硬币的函数\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void, taskId?: string) => {\n        const flipState = taskId ? flipStates[taskId] : undefined;\n        const isFlipped = taskId ? flippedCoins.includes(taskId) : false;\n        \n        // 决定显示哪一面\n        const displayType = isFlipped\n            ? (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) \n            : type;\n\n        return (\n            <Box\n                sx={{\n                    width: isSmall ? 20 : 32,\n                    height: isSmall ? 20 : 32,\n                    borderRadius: '50%',\n                    backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                    border: `${isSmall ? 1 : 2}px solid #B8860B`,\n                    color: '#704214',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontWeight: 'bold',\n                    fontSize: isSmall ? '0.6rem' : '0.8rem',\n                    perspective: 1000,\n                    mb: isSmall ? 0 : 1,\n                    position: 'relative',\n                    cursor: onClick ? 'pointer' : 'default',\n                    transition: 'transform 0.6s',\n                    transformStyle: 'preserve-3d',\n                    transform: flipState?.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n                    '&:hover': onClick ? {\n                        transform: 'scale(1.05)',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                    } : {},\n                    '&:active': onClick ? {\n                        transform: 'scale(0.95)'\n                    } : {},\n                    '&::after': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        borderRadius: '50%',\n                        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                        pointerEvents: 'none'\n                    }\n                }}\n                onClick={onClick}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 监听游戏状态变化\n    useEffect(() => {\n        if (game?.tasks) {\n            // 检查是否有新的批次开始\n            game.players.forEach(player => {\n                const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n                const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n                \n                // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                    // 清理上一个批次的翻转状态\n                    const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n                    const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n                    setFlippedCoins(prev => prev.filter(id => !prevBatchTaskIds.includes(id)));\n                }\n            });\n        }\n    }, [game?.tasks]);\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    // 渲染任务行\n    const renderTaskRow = (tasks: Task[]) => {\n        return (\n            <Box sx={{ \n                display: 'flex', \n                flexWrap: 'wrap',\n                gap: 1,\n                mb: 2 \n            }}>\n                {tasks.map(task => (\n                    <Box\n                        key={task.id}\n                        sx={{\n                            display: 'flex',\n                            alignItems: 'center',\n                        }}>\n                        {renderCoin(\n                            task.type,\n                            false,\n                            false,\n                            task.assigned_to === playerId && !flippedCoins.includes(task.id)\n                                ? () => handleCoinFlip(task.id)\n                                : undefined,\n                            task.id\n                        )}\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    // 渲染玩家卡片\n    const renderPlayer = (player: Player) => {\n        const currentBatchTasks = game?.tasks.filter(t => \n            t.batch_number === player.current_batch && \n            t.assigned_to === player.id\n        ) || [];\n\n        const completedTasks = game?.tasks.filter(t =>\n            t.status === TaskStatus.COMPLETED &&\n            t.assigned_to === player.id\n        ) || [];\n\n        // 获取当前批次的目标类型\n        const currentBatchTarget = currentBatchTasks[0]?.type;\n\n        return (\n            <Card key={player.id} sx={{ mb: 2 }}>\n                <CardContent>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                        <Typography variant=\"h6\">\n                            {player.name}\n                        </Typography>\n                        <Chip \n                            label={player.status}\n                            color={player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\"}\n                            size=\"small\"\n                        />\n                    </Box>\n\n                    <Box sx={{ mb: 2, bgcolor: 'background.default', p: 2, borderRadius: 1 }}>\n                        <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n                            Current Batch: {player.current_batch} / {game?.max_batches}\n                            {currentBatchTarget && (\n                                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\n                                    <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                                        Target:\n                                    </Typography>\n                                    {renderCoin(currentBatchTarget, false, true)}\n                                </Box>\n                            )}\n                        </Typography>\n\n                        <Box sx={{ mb: 2 }}>\n                            <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                                Current Tasks\n                            </Typography>\n                            {renderTaskRow(currentBatchTasks)}\n                        </Box>\n\n                        {completedTasks.length > 0 && (\n                            <Box>\n                                <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                                    Completed Tasks\n                                </Typography>\n                                {renderTaskRow(completedTasks)}\n                            </Box>\n                        )}\n\n                        {player.id === playerId && isBatchAllFlipped(player.current_batch, player.id) && (\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => handleCompleteBatch(player.current_batch)}\n                                sx={{ mt: 2 }}\n                            >\n                                Complete This Batch\n                            </Button>\n                        )}\n                    </Box>\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    // 添加一个辅助函数来处理毫秒到时间的转换\n    const formatTimeFromMs = (ms: number) => {\n        const totalSeconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed!\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTimeFromMs(totalTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    const handleReturnToMain = () => {\n        window.location.reload();\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTimeFromMs(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMain}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    const renderStatistics = () => {\n        if (!game) return null;\n\n        return (\n            <Box sx={{ p: 2 }}>\n                <Typography variant=\"h6\" sx={{ mb: 2, color: 'primary.main' }}>\n                    Game Statistics\n                </Typography>\n                {Array.from({ length: game.max_batches }, (_, i) => i + 1).map(batchNum => (\n                    <Box key={batchNum} sx={{ mb: 3 }}>\n                        <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                            Batch {batchNum}\n                        </Typography>\n                        <TableContainer component={Paper} sx={{ mb: 2 }}>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Player</TableCell>\n                                        <TableCell align=\"right\">Time</TableCell>\n                                        <TableCell align=\"right\">Status</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {game.players.map(player => {\n                                        const batchTasks = game.tasks.filter(t => \n                                            t.batch_number === batchNum && \n                                            t.assigned_to === player.id\n                                        );\n                                        const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                                        const hasStarted = player.batch_start_time?.[batchNum] != null;\n                                        const completionTime = player.batch_completion_time?.[batchNum];\n                                        const startTime = player.batch_start_time?.[batchNum];\n                                        \n                                        // 计算当前时间（如果批次已开始但未完成）\n                                        let displayTime = '-';\n                                        if (completionTime) {\n                                            displayTime = formatTimeFromMs(completionTime);\n                                        } else if (hasStarted && startTime) {\n                                            const currentTime = Date.now() - startTime;\n                                            displayTime = formatTimeFromMs(currentTime);\n                                        }\n\n                                        let status = 'Pending';\n                                        if (isCompleted) {\n                                            status = 'Completed';\n                                        } else if (hasStarted) {\n                                            status = 'In Progress';\n                                        }\n\n                                        return (\n                                            <TableRow key={player.id}>\n                                                <TableCell>{player.name}</TableCell>\n                                                <TableCell align=\"right\">{displayTime}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Chip \n                                                        label={status}\n                                                        size=\"small\"\n                                                        color={isCompleted ? 'success' : (hasStarted ? 'primary' : 'default')}\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                    <TableRow sx={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}>\n                                        <TableCell><strong>Total</strong></TableCell>\n                                        <TableCell align=\"right\">\n                                            <strong>\n                                                {formatTimeFromMs(game.players.reduce((sum, p) => \n                                                    sum + (p.batch_completion_time?.[batchNum] || 0), \n                                                    0\n                                                ))}\n                                            </strong>\n                                        </TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    if (showResultPage) {\n        return renderResultPage();\n    }\n\n    if (!gameId || !playerId) {\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n            }}>\n                <Box sx={{ \n                    textAlign: 'center', \n                    mb: 4,\n                    mt: 4,\n                    background: 'linear-gradient(45deg, #2196f3 30%, #21CBF3 90%)',\n                    p: 3,\n                    borderRadius: 2,\n                    boxShadow: '0 3px 5px 2px rgba(33, 150, 243, .3)',\n                    color: 'white',\n                    width: '100%',\n                    maxWidth: 800\n                }}>\n                    <Typography variant=\"h3\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                        Online Multiplayer Coin Game\n                    </Typography>\n                    <Typography variant=\"subtitle1\">\n                        Flip coins with your friends in this multiplayer game!\n                    </Typography>\n                </Box>\n\n                <Box sx={{ \n                    width: '100%', \n                    maxWidth: 800,\n                    backgroundColor: 'white',\n                    borderRadius: 2,\n                    boxShadow: '0 3px 10px rgba(0,0,0,0.1)',\n                    p: 3\n                }}>\n                    <Tabs \n                        value={activeTab} \n                        onChange={handleTabChange} \n                        sx={{ \n                            mb: 3,\n                            borderBottom: 1,\n                            borderColor: 'divider'\n                        }}\n                    >\n                        <Tab label=\"Create Game\" />\n                        <Tab label=\"Join Game\" />\n                    </Tabs>\n\n                    {error && (\n                        <Alert severity=\"error\" sx={{ mb: 2 }}>\n                            {error}\n                        </Alert>\n                    )}\n\n                    {activeTab === 0 ? (\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Your Name\"\n                                    value={playerName}\n                                    onChange={(e) => setPlayerName(e.target.value)}\n                                    required\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Number of Players\"\n                                    type=\"number\"\n                                    value={playerCount}\n                                    onChange={(e) => setPlayerCount(Math.max(2, Math.min(5, parseInt(e.target.value) || 2)))}\n                                    inputProps={{ min: 2, max: 5 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button \n                                    variant=\"contained\" \n                                    onClick={handleCreateGame}\n                                    disabled={!playerName || playerCount < 2}\n                                    sx={{ mt: 2 }}\n                                    size=\"large\"\n                                >\n                                    Create Game\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    ) : (\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Game ID\"\n                                    value={joinGameId}\n                                    onChange={(e) => setJoinGameId(e.target.value.toUpperCase())}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Player Name\"\n                                    value={playerName}\n                                    onChange={(e) => setPlayerName(e.target.value)}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button \n                                    variant=\"contained\" \n                                    onClick={handleJoinGame}\n                                    sx={{ mt: 2 }}\n                                    size=\"large\"\n                                >\n                                    Join Game\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Box>\n            </Box>\n        );\n    }\n\n    return (\n        <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n            {error && (\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\n                    {error}\n                </Alert>\n            )}\n\n            {game && (\n                <>\n                    <Box sx={{ \n                        display: 'flex', \n                        justifyContent: 'space-between', \n                        alignItems: 'center',\n                        mb: 3\n                    }}>\n                        <Box>\n                            <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                                Game ID: {game.id}\n                            </Typography>\n                            <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                                Game Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                            </Typography>\n                        </Box>\n                        {(game.status === 'in_progress' || game.status === 'completed') && startTime && (\n                            <Typography variant=\"h6\" sx={{ color: 'text.secondary' }}>\n                                Time: {formatTimeFromMs(game.status === 'completed' && endTime ? endTime - startTime : currentTime)}\n                            </Typography>\n                        )}\n                    </Box>\n\n                    {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleStartGame}\n                            sx={{ mb: 3 }}\n                        >\n                            Start Game\n                        </Button>\n                    )}\n\n                    <Grid container spacing={3}>\n                        {/* Left column: Player cards */}\n                        <Grid item xs={12} md={7}>\n                            <Stack spacing={3}>\n                                {game.players.map(renderPlayer)}\n                            </Stack>\n                        </Grid>\n\n                        {/* Right column: Results and statistics */}\n                        <Grid item xs={12} md={5}>\n                            {renderStatistics()}\n                        </Grid>\n                    </Grid>\n                </>\n            )}\n        </Box>\n    );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}