{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer coin game 2/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Tabs, Tab, Alert, Chip, keyframes, Stack, TableContainer, Table, TableHead, TableBody, TableCell, TableRow, Paper, Container, CircularProgress } from '@mui/material';\nimport { TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Game = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  const [gameId, setGameId] = useState(initialGameId);\n  const [game, setGame] = useState(null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerId, setPlayerId] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n  const [playerCount, setPlayerCount] = useState(2);\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(20);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showResultPage, setShowResultPage] = useState(false);\n  const [batchCompletionTimes, setBatchCompletionTimes] = useState({});\n  const [batchStartTimes, setBatchStartTimes] = useState({});\n  const [batchFlipStates, setBatchFlipStates] = useState({});\n\n  // 添加状态来跟踪硬币的翻转状态和批次完成状态\n  const [flippedCoins, setFlippedCoins] = useState([]);\n  const [pendingBatchCompletion, setPendingBatchCompletion] = useState({});\n\n  // 添加翻转动画状态\n\n  const [flipStates, setFlipStates] = useState({});\n\n  // 修改计时器状态和开始时间状态\n  const [elapsedTime, setElapsedTime] = useState(0);\n\n  // 添加批次统计时间的状态\n  const [batchStats, setBatchStats] = useState({});\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, updatedGame => {\n        console.log('Game state updated:', updatedGame);\n        setGame(updatedGame);\n      });\n      service.connect();\n      setWsService(service);\n\n      // Cleanup function\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  useEffect(() => {\n    let timerInterval = null;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && startTime) {\n      timerInterval = setInterval(() => {\n        setCurrentTime(prev => Date.now() - startTime);\n      }, 1000);\n    }\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'completed' && startTime && !endTime) {\n      setEndTime(Date.now());\n      setShowResultPage(true);\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime, endTime]);\n  useEffect(() => {\n    let intervalId;\n    if (startTime && (game === null || game === void 0 ? void 0 : game.status) === 'in_progress') {\n      intervalId = setInterval(() => {\n        setElapsedTime(prev => Date.now() - startTime);\n      }, 1000);\n    }\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [startTime, game === null || game === void 0 ? void 0 : game.status]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && game.players) {\n      const newStartTimes = {\n        ...batchStartTimes\n      };\n      const newCompletionTimes = {\n        ...batchCompletionTimes\n      };\n      let hasChanges = false;\n      game.players.forEach(player => {\n        if (!newStartTimes[player.current_batch]) {\n          newStartTimes[player.current_batch] = {};\n          hasChanges = true;\n        }\n        if (!newCompletionTimes[player.current_batch]) {\n          newCompletionTimes[player.current_batch] = {};\n          hasChanges = true;\n        }\n\n        // 使用后端提供的批次开始时间\n        if (player.batch_start_time) {\n          Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n            if (newStartTimes[player.current_batch][Number(batchNum)] !== startTime) {\n              newStartTimes[player.current_batch][Number(batchNum)] = startTime;\n              hasChanges = true;\n            }\n          });\n        }\n\n        // Calculate completion times for each batch\n        for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n          var _newStartTimes$player;\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const startedAt = (_newStartTimes$player = newStartTimes[player.current_batch]) === null || _newStartTimes$player === void 0 ? void 0 : _newStartTimes$player[batchNum];\n          if (startedAt && batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[player.current_batch][player.id]) {\n            newCompletionTimes[player.current_batch][player.id] = Date.now() - startedAt;\n            hasChanges = true;\n          }\n        }\n      });\n\n      // 只在有变化时更新状态\n      if (hasChanges) {\n        setBatchStartTimes(newStartTimes);\n        setBatchCompletionTimes(newCompletionTimes);\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players, game === null || game === void 0 ? void 0 : game.max_batches]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks) {\n      let shouldUpdate = false;\n      const currentFlippedCoins = [...flippedCoins];\n\n      // 检查是否有新的批次开始\n      game.players.forEach(player => {\n        const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n        const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n\n        // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n        if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n          // 清理上一个批次的翻转状态\n          const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n          const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n          const newFlippedCoins = currentFlippedCoins.filter(id => !prevBatchTaskIds.includes(id));\n          if (newFlippedCoins.length !== currentFlippedCoins.length) {\n            currentFlippedCoins.length = 0;\n            currentFlippedCoins.push(...newFlippedCoins);\n            shouldUpdate = true;\n          }\n        }\n      });\n\n      // 只在有变化时更新状态\n      if (shouldUpdate) {\n        setFlippedCoins(currentFlippedCoins);\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks]);\n\n  // 添加错误处理函数\n  const handleGameUpdate = updatedGame => {\n    setGame(updatedGame);\n    if (updatedGame.status === 'completed' && !endTime) {\n      setEndTime(Date.now());\n    }\n  };\n  const handleCreateGame = async e => {\n    e.preventDefault();\n    try {\n      setError(null);\n      // 创建游戏\n      const gameId = await gameService.createGame(playerCount, 4, 0);\n      if (gameId) {\n        // 加入游戏\n        const playerId = await gameService.joinGame(gameId, playerName);\n\n        // 更新状态\n        setGameId(gameId);\n        setPlayerId(playerId);\n\n        // 创建WebSocket连接\n        const ws = new WebSocketService(gameId, playerName, handleGameUpdate);\n        setWsService(ws);\n\n        // 获取初始游戏状态\n        const initialGameState = await gameService.getGameState(gameId);\n        setGame(initialGameState);\n\n        // 设置开始时间\n        setStartTime(Date.now());\n        console.log('Game created successfully:', {\n          gameId,\n          playerId\n        });\n      }\n    } catch (err) {\n      console.error('Error creating game:', err);\n      setError(err instanceof Error ? err.message : 'Failed to create game');\n    }\n  };\n  const handleJoinGame = async e => {\n    e.preventDefault();\n    try {\n      setError(null);\n      if (joinGameId) {\n        // 检查游戏是否存在\n        const exists = await gameService.checkGameExists(joinGameId);\n        if (!exists) {\n          setError('Game not found');\n          return;\n        }\n\n        // 加入游戏\n        const playerId = await gameService.joinGame(joinGameId, playerName);\n\n        // 更新状态\n        setGameId(joinGameId);\n        setPlayerId(playerId);\n\n        // 创建WebSocket连接\n        const ws = new WebSocketService(joinGameId, playerName, handleGameUpdate);\n        setWsService(ws);\n\n        // 获取游戏状态\n        const gameState = await gameService.getGameState(joinGameId);\n        setGame(gameState);\n\n        // 设置开始时间\n        setStartTime(Date.now());\n        console.log('Joined game successfully:', {\n          gameId: joinGameId,\n          playerId\n        });\n      }\n    } catch (err) {\n      console.error('Error joining game:', err);\n      setError(err instanceof Error ? err.message : 'Failed to join game');\n    }\n  };\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      const currentTime = Date.now();\n      setStartTime(currentTime);\n      setBatchStartTimes(prev => ({\n        ...prev,\n        1: {\n          1: currentTime\n        }\n      }));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to start game');\n    }\n  };\n  const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n  // 添加一个专门用于渲染目标硬币的函数\n  const renderTargetCoin = type => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: {\n          xs: '20px',\n          sm: '32px'\n        },\n        height: {\n          xs: '20px',\n          sm: '32px'\n        },\n        borderRadius: '50%',\n        border: theme => ({\n          xs: `1px solid ${theme.palette.primary.main}`,\n          sm: `2px solid ${theme.palette.primary.main}`\n        }),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: theme => theme.palette.background.paper,\n        color: theme => theme.palette.text.primary,\n        fontSize: {\n          xs: '0.7rem',\n          sm: '0.9rem'\n        },\n        fontWeight: 'bold',\n        marginBottom: {\n          xs: 0,\n          sm: 1\n        },\n        marginRight: 1\n      },\n      children: type === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 检查批次是否所有硬币都已翻转\n  const isBatchAllFlipped = (batchNum, playerId) => {\n    const batchTasks = game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === playerId);\n    return (batchTasks === null || batchTasks === void 0 ? void 0 : batchTasks.every(t => flippedCoins.includes(t.id))) || false;\n  };\n\n  // 处理硬币翻转\n  const handleCoinFlip = async coinId => {\n    if (!game || !playerId) return;\n\n    // 检查是否是当前玩家的回合\n    const currentPlayer = game.players.find(p => p.id === playerId);\n    if ((currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.status) !== PlayerStatus.ACTIVE) return;\n\n    // 获取当前任务信息\n    const currentTask = game.tasks.find(t => t.id === coinId);\n    if (!currentTask) return;\n\n    // 获取当前子批次需要翻转的硬币数量\n    const currentBatch = currentPlayer.current_batch;\n    const currentSubBatch = currentTask.sub_batch_number;\n    const requiredCoins = getRequiredCoinsForBatch(currentBatch, currentSubBatch);\n\n    // 计算当前子批次已翻转的硬币数量\n    const currentSubBatchFlips = flippedCoins.filter(id => game.tasks.find(t => t.id === id && t.batch_number === currentBatch && t.sub_batch_number === currentSubBatch && t.assigned_to === playerId)).length;\n    if (currentSubBatchFlips >= requiredCoins) return;\n    try {\n      // 更新本地状态\n      setFlippedCoins(prev => [...prev, coinId]);\n\n      // 更新翻转动画状态\n      setFlipStates(prev => ({\n        ...prev,\n        [coinId]: {\n          isFlipping: true,\n          showOpposite: true\n        }\n      }));\n\n      // 发送翻转请求到服务器\n      await gameService.flipCoin(game.id, coinId);\n    } catch (error) {\n      console.error('Error flipping coin:', error);\n      // 如果失败，回滚本地状态\n      setFlippedCoins(prev => prev.filter(id => id !== coinId));\n      setFlipStates(prev => {\n        const newState = {\n          ...prev\n        };\n        delete newState[coinId];\n        return newState;\n      });\n    }\n  };\n\n  // 处理批次完成\n  const handleCompleteBatch = batchNum => {\n    const pendingTasks = pendingBatchCompletion[batchNum] || [];\n    if (pendingTasks.length === 0) return;\n\n    // 发送所有任务完成的请求\n    pendingTasks.forEach(taskId => {\n      if (wsService) {\n        wsService.completeTask(taskId);\n      }\n    });\n\n    // 清理这个批次的待完成状态\n    setPendingBatchCompletion(prev => {\n      const newState = {\n        ...prev\n      };\n      delete newState[batchNum];\n      return newState;\n    });\n  };\n\n  // 修改渲染硬币的函数\n  const renderCoin = (type, isFlipping, isSmall = false, onClick, taskId) => {\n    const flipState = taskId ? flipStates[taskId] : undefined;\n    const isFlipped = taskId ? flippedCoins.includes(taskId) : false;\n\n    // 决定显示哪一面\n    const displayType = isFlipped ? type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS : type;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: isSmall ? 20 : 32,\n        height: isSmall ? 20 : 32,\n        borderRadius: '50%',\n        backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n        border: `${isSmall ? 1 : 2}px solid #B8860B`,\n        color: '#704214',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 'bold',\n        fontSize: isSmall ? '0.6rem' : '0.8rem',\n        perspective: 1000,\n        mb: isSmall ? 0 : 1,\n        position: 'relative',\n        cursor: onClick ? 'pointer' : 'default',\n        transition: 'transform 0.6s',\n        transformStyle: 'preserve-3d',\n        transform: flipState !== null && flipState !== void 0 && flipState.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n        '&:hover': onClick ? {\n          transform: 'scale(1.05)',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n        } : {},\n        '&:active': onClick ? {\n          transform: 'scale(0.95)'\n        } : {},\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          borderRadius: '50%',\n          background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n          pointerEvents: 'none'\n        }\n      },\n      onClick: onClick,\n      children: displayType === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 监听游戏状态变化\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks) {\n      // 检查是否有新的批次开始\n      game.players.forEach(player => {\n        const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n        const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n\n        // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n        if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n          // 清理上一个批次的翻转状态\n          const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n          const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n          setFlippedCoins(prev => prev.filter(id => !prevBatchTaskIds.includes(id)));\n        }\n      });\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks]);\n\n  // 获取每轮需要翻转的硬币数量\n  const getRequiredCoinsForBatch = (batchNum, subBatchNum) => {\n    var _batchConfigs$batchNu;\n    const batchConfigs = {\n      1: {\n        1: 20\n      },\n      // 第1轮：1个子批次，20个硬币\n      2: {\n        1: 10,\n        2: 10\n      },\n      // 第2轮：2个子批次，每个10个硬币\n      3: {\n        1: 5,\n        2: 5,\n        3: 5,\n        4: 5\n      },\n      // 第3轮：4个子批次，每个5个硬币\n      4: {\n        1: 2,\n        2: 2,\n        3: 2,\n        4: 2,\n        5: 2,\n        6: 2,\n        7: 2,\n        8: 2,\n        9: 2,\n        10: 2\n      } // 第4轮：10个子批次，每个2个硬币\n    };\n    if (subBatchNum === undefined) {\n      return Object.values(batchConfigs[batchNum] || {}).reduce((sum, count) => sum + count, 0);\n    }\n    return ((_batchConfigs$batchNu = batchConfigs[batchNum]) === null || _batchConfigs$batchNu === void 0 ? void 0 : _batchConfigs$batchNu[subBatchNum]) || 0;\n  };\n\n  // 获取批次的子批次数量\n  const getSubBatchCount = batchNum => {\n    const subBatchCounts = {\n      1: 1,\n      // 第1轮：1个子批次\n      2: 2,\n      // 第2轮：2个子批次\n      3: 4,\n      // 第3轮：4个子批次\n      4: 10 // 第4轮：10个子批次\n    };\n    return subBatchCounts[batchNum] || 1;\n  };\n\n  // 渲染任务行\n  const renderTaskRow = (tasks, batchNum, playerStatus) => {\n    var _tasks$;\n    if (playerStatus === PlayerStatus.WAITING) {\n      return /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: \"Waiting for your turn...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 17\n      }, this);\n    }\n    const subBatchCount = getSubBatchCount(batchNum);\n    const currentBatchTarget = ((_tasks$ = tasks[0]) === null || _tasks$ === void 0 ? void 0 : _tasks$.type) || TaskType.HEADS;\n\n    // 按子批次分组任务\n    const tasksBySubBatch = {};\n    tasks.forEach(task => {\n      if (!tasksBySubBatch[task.sub_batch_number]) {\n        tasksBySubBatch[task.sub_batch_number] = [];\n      }\n      tasksBySubBatch[task.sub_batch_number].push(task);\n    });\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [Array.from({\n        length: subBatchCount\n      }, (_, i) => i + 1).map(subBatchNum => {\n        var _subBatchTasks$;\n        const subBatchTasks = tasksBySubBatch[subBatchNum] || [];\n        const requiredCoins = getRequiredCoinsForBatch(batchNum, subBatchNum);\n        const currentSubBatchFlips = subBatchTasks.filter(t => flippedCoins.includes(t.id)).length;\n        const isCurrentSubBatchComplete = currentSubBatchFlips >= requiredCoins;\n        const canFlipInSubBatch = !isCurrentSubBatchComplete && (!((_subBatchTasks$ = subBatchTasks[0]) !== null && _subBatchTasks$ !== void 0 && _subBatchTasks$.status) || subBatchTasks[0].status === TaskStatus.PENDING);\n\n        // 检查之前的子批次是否都已完成\n        const previousSubBatchesComplete = Array.from({\n          length: subBatchNum - 1\n        }, (_, i) => i + 1).every(prevSubBatch => {\n          const prevTasks = tasksBySubBatch[prevSubBatch] || [];\n          return prevTasks.every(t => t.status === TaskStatus.COMPLETED);\n        });\n        return /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              mb: 1\n            },\n            children: [\"Sub-batch \", subBatchNum, \"/\", subBatchCount, \" (\", requiredCoins, \" coins)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 1,\n              opacity: !previousSubBatchesComplete ? 0.5 : 1\n            },\n            children: subBatchTasks.map(task => {\n              const isFlipped = flippedCoins.includes(task.id);\n              const canFlip = !isFlipped && playerStatus === PlayerStatus.ACTIVE && canFlipInSubBatch && previousSubBatchesComplete;\n              return /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  width: 32,\n                  height: 32,\n                  borderRadius: '50%',\n                  backgroundColor: isFlipped ? '#DAA520' : '#FFD700',\n                  border: '2px solid #B8860B',\n                  color: '#704214',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  fontWeight: 'bold',\n                  fontSize: '0.8rem',\n                  cursor: canFlip ? 'pointer' : 'default',\n                  opacity: canFlip ? 1 : 0.7,\n                  transition: 'all 0.3s',\n                  '&:hover': canFlip ? {\n                    transform: 'scale(1.1)',\n                    boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                  } : {}\n                },\n                onClick: canFlip ? () => handleCoinFlip(task.id) : undefined,\n                children: isFlipped ? 'T' : 'H'\n              }, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 634,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 29\n          }, this), isCurrentSubBatchComplete && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"success.main\",\n            sx: {\n              mt: 1\n            },\n            children: \"Sub-batch completed!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 33\n          }, this)]\n        }, subBatchNum, true, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 25\n        }, this);\n      }), tasks.every(t => t.status === TaskStatus.COMPLETED) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => handleCompleteBatch(batchNum),\n        sx: {\n          mt: 2,\n          width: '100%'\n        },\n        children: [\"Complete Round \", batchNum]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染玩家卡片\n  const renderPlayer = player => {\n    var _currentBatchTasks$;\n    const currentBatchTasks = (game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === player.current_batch && t.assigned_to === player.id)) || [];\n    const currentBatchTarget = (_currentBatchTasks$ = currentBatchTasks[0]) === null || _currentBatchTasks$ === void 0 ? void 0 : _currentBatchTasks$.type;\n    const requiredCoins = getRequiredCoinsForBatch(player.current_batch);\n    const currentFlippedCount = currentBatchTasks.filter(t => flippedCoins.includes(t.id)).length;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: player.status,\n            color: player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\",\n            size: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2,\n            bgcolor: 'background.default',\n            p: 2,\n            borderRadius: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              mb: 1\n            },\n            children: [\"Current Round: \", player.current_batch, \" / \", game === null || game === void 0 ? void 0 : game.max_batches, currentBatchTarget && player.status === PlayerStatus.ACTIVE && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                mt: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  mr: 1\n                },\n                children: \"Required flips:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 715,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  ml: 2\n                },\n                children: requiredCoins\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 718,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 714,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: renderTaskRow(currentBatchTasks, player.current_batch, player.status)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 17\n      }, this)\n    }, player.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 697,\n      columnNumber: 13\n    }, this);\n  };\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(20);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n\n  // 添加一个辅助函数来处理毫秒到时间的转换\n  const formatTimeFromMs = ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 799,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTimeFromMs(endTime - startTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 819,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 818,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteGame = () => {\n    setShowResultPage(true);\n  };\n\n  // 修改返回主菜单的处理函数\n  const handleReturnToMainMenu = () => {\n    // 清除游戏状态\n    setGameId('');\n    setGame(null);\n    setWsService(null);\n    setStartTime(null);\n    setEndTime(null);\n    // 清除输入记录\n    setPlayerName('');\n    setPlayerCount(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const renderResultPage = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 600,\n          width: '100%',\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            mb: 3,\n            color: 'primary.main'\n          },\n          children: \"Game Complete! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 872,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            mb: 4\n          },\n          children: [\"Total Time: \", formatTimeFromMs(totalTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 875,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMainMenu,\n          size: \"large\",\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 857,\n      columnNumber: 13\n    }, this);\n  };\n  const renderStatistics = () => {\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mb: 2,\n          color: 'primary.main'\n        },\n        children: \"Game Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 895,\n        columnNumber: 17\n      }, this), Array.from({\n        length: game.max_batches\n      }, (_, i) => i + 1).map(batchNum => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: [\"Round \", batchNum]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 900,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          sx: {\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Player\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 907,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 908,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 909,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 906,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 905,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [game.players.map(player => {\n                var _player$batch_start_t, _player$batch_complet, _player$batch_start_t2;\n                const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n                const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                const hasStarted = ((_player$batch_start_t = player.batch_start_time) === null || _player$batch_start_t === void 0 ? void 0 : _player$batch_start_t[batchNum]) != null;\n                const completionTime = (_player$batch_complet = player.batch_completion_time) === null || _player$batch_complet === void 0 ? void 0 : _player$batch_complet[batchNum];\n                const startTime = (_player$batch_start_t2 = player.batch_start_time) === null || _player$batch_start_t2 === void 0 ? void 0 : _player$batch_start_t2[batchNum];\n\n                // 计算当前时间（如果批次已开始但未完成）\n                let displayTime = '-';\n                if (completionTime) {\n                  displayTime = formatTimeFromMs(completionTime);\n                } else if (hasStarted && startTime) {\n                  const currentTime = Date.now() - startTime;\n                  displayTime = formatTimeFromMs(currentTime);\n                }\n                let status = 'Pending';\n                if (isCompleted) {\n                  status = 'Completed';\n                } else if (hasStarted || batchTasks.length > 0 && player.status === PlayerStatus.ACTIVE) {\n                  status = 'In Progress';\n                }\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: player.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 941,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: displayTime\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 942,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: /*#__PURE__*/_jsxDEV(Chip, {\n                      label: status,\n                      size: \"small\",\n                      color: isCompleted ? 'success' : hasStarted ? 'primary' : 'default'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 944,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 943,\n                    columnNumber: 49\n                  }, this)]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 940,\n                  columnNumber: 45\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(TableRow, {\n                sx: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                },\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 954,\n                    columnNumber: 52\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 954,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: formatTimeFromMs(game.players.reduce((sum, p) => {\n                      var _p$batch_completion_t;\n                      return sum + (((_p$batch_completion_t = p.batch_completion_time) === null || _p$batch_completion_t === void 0 ? void 0 : _p$batch_completion_t[batchNum]) || 0);\n                    }, 0))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 956,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 955,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 963,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 953,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 912,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 904,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 25\n        }, this)]\n      }, batchNum, true, {\n        fileName: _jsxFileName,\n        lineNumber: 899,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 894,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 使用useMemo来记忆计算结果\n  const getTasksForBatch = React.useMemo(() => {\n    if (!(game !== null && game !== void 0 && game.tasks)) return {};\n    const tasksByBatch = {};\n    game.tasks.forEach(task => {\n      if (!tasksByBatch[task.batch_number]) {\n        tasksByBatch[task.batch_number] = [];\n      }\n      tasksByBatch[task.batch_number].push(task);\n    });\n    return tasksByBatch;\n  }, [game === null || game === void 0 ? void 0 : game.tasks]);\n\n  // 使用useMemo来记忆玩家任务\n  const getPlayerTasks = React.useMemo(() => {\n    if (!(game !== null && game !== void 0 && game.tasks) || !(game !== null && game !== void 0 && game.players)) return {};\n    const playerTasks = {};\n    game.players.forEach(player => {\n      playerTasks[player.id] = game.tasks.filter(t => t.assigned_to === player.id);\n    });\n    return playerTasks;\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players]);\n  useEffect(() => {\n    if (!(game !== null && game !== void 0 && game.tasks) || !startTime) return;\n    const newStats = {\n      ...batchStats\n    };\n\n    // 遍历每个批次\n    for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n      if (!newStats[batchNum]) {\n        newStats[batchNum] = {};\n      }\n\n      // 遍历每个玩家\n      game.players.forEach(player => {\n        const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n        const completedTasks = batchTasks.filter(t => t.status === TaskStatus.COMPLETED);\n\n        // 如果这个批次的所有任务都完成了，记录完成时间\n        if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n          // 只在第一次完成时记录时间\n          if (!newStats[batchNum][player.id]) {\n            newStats[batchNum][player.id] = {\n              completionTime: elapsedTime,\n              tasksCompleted: completedTasks.length,\n              totalTasks: batchTasks.length\n            };\n          }\n        } else if (batchTasks.length > 0) {\n          // 更新进行中的任务状态\n          newStats[batchNum][player.id] = {\n            completionTime: 0,\n            tasksCompleted: completedTasks.length,\n            totalTasks: batchTasks.length\n          };\n        }\n      });\n    }\n    setBatchStats(newStats);\n  }, [game === null || game === void 0 ? void 0 : game.tasks, startTime, elapsedTime]);\n  useEffect(() => {\n    if (!(game !== null && game !== void 0 && game.tasks) || !startTime) return;\n    const newCompletionTimes = {\n      ...batchCompletionTimes\n    };\n    const newStartTimes = {\n      ...batchStartTimes\n    };\n    let hasChanges = false;\n    Object.entries(getTasksForBatch).forEach(([batchNum, tasks]) => {\n      const batchNumber = parseInt(batchNum);\n      if (!newStartTimes[batchNumber]) {\n        newStartTimes[batchNumber] = {};\n        hasChanges = true;\n      }\n      if (!newCompletionTimes[batchNumber]) {\n        newCompletionTimes[batchNumber] = {};\n        hasChanges = true;\n      }\n      game.players.forEach(player => {\n        const playerTasks = tasks.filter(t => t.assigned_to === player.id);\n        if (playerTasks.length > 0 && playerTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[batchNumber][player.id]) {\n          var _newStartTimes$batchN;\n          const batchStartTime = ((_newStartTimes$batchN = newStartTimes[batchNumber]) === null || _newStartTimes$batchN === void 0 ? void 0 : _newStartTimes$batchN[batchNumber]) || startTime;\n          newCompletionTimes[batchNumber][player.id] = Date.now() - batchStartTime;\n          hasChanges = true;\n        }\n      });\n    });\n\n    // 只在有变化时更新状态\n    if (hasChanges) {\n      setBatchStartTimes(newStartTimes);\n      setBatchCompletionTimes(newCompletionTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.players, getTasksForBatch, startTime]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && startTime) {\n      const newStats = {\n        ...batchStats\n      };\n\n      // 遍历每个批次\n      for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n        if (!newStats[batchNum]) {\n          newStats[batchNum] = {};\n        }\n\n        // 遍历每个玩家\n        game.players.forEach(player => {\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const completedTasks = batchTasks.filter(t => t.status === TaskStatus.COMPLETED);\n\n          // 如果这个批次的所有任务都完成了，记录完成时间\n          if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n            // 只在第一次完成时记录时间\n            if (!newStats[batchNum][player.id]) {\n              newStats[batchNum][player.id] = {\n                completionTime: elapsedTime,\n                tasksCompleted: completedTasks.length,\n                totalTasks: batchTasks.length\n              };\n            }\n          } else if (batchTasks.length > 0) {\n            // 更新进行中的任务状态\n            newStats[batchNum][player.id] = {\n              completionTime: 0,\n              tasksCompleted: completedTasks.length,\n              totalTasks: batchTasks.length\n            };\n          }\n        });\n      }\n      setBatchStats(newStats);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, startTime, elapsedTime]);\n\n  // 修改统计页面中的完成时间显示\n  const renderBatchStatistics = (batchNum, player) => {\n    var _batchStats$batchNum;\n    const stats = (_batchStats$batchNum = batchStats[batchNum]) === null || _batchStats$batchNum === void 0 ? void 0 : _batchStats$batchNum[player.id];\n    return /*#__PURE__*/_jsxDEV(TableRow, {\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        children: player.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        children: stats !== null && stats !== void 0 && stats.completionTime ? formatTimeFromMs(stats.completionTime) : '-'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        children: [stats === null || stats === void 0 ? void 0 : stats.tasksCompleted, \"/\", (stats === null || stats === void 0 ? void 0 : stats.totalTasks) || 0]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1136,\n        columnNumber: 17\n      }, this)]\n    }, player.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1131,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染主菜单\n  const renderMainMenu = () => /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 600,\n      width: '100%',\n      mx: 'auto',\n      mt: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n        p: 4,\n        borderTopLeftRadius: 8,\n        borderTopRightRadius: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        sx: {\n          fontWeight: 'bold',\n          background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent',\n          textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n          textAlign: 'center',\n          mb: 1\n        },\n        children: \"Online Multiplayer Coin Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"text.secondary\",\n        align: \"center\",\n        children: \"Flip coins with your friends in this multiplayer game!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        background: '#ffffff',\n        p: 4,\n        borderBottomLeftRadius: 8,\n        borderBottomRightRadius: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Tabs, {\n        value: activeTab,\n        onChange: (e, newValue) => {\n          setActiveTab(newValue);\n          // 切换标签时也清除输入\n          setPlayerName('');\n          setPlayerCount(2);\n          setJoinGameId('');\n          setError(null);\n        },\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"CREATE GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1189,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"JOIN GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1190,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1181,\n        columnNumber: 17\n      }, this), activeTab === 0 ?\n      /*#__PURE__*/\n      // Create game form\n      _jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleCreateGame,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Name\",\n          required: true,\n          value: playerName,\n          onChange: e => setPlayerName(e.target.value),\n          sx: {\n            mb: 2\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1196,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Number of Players\",\n          type: \"number\",\n          required: true,\n          value: playerCount,\n          onChange: e => setPlayerCount(Number(e.target.value)),\n          inputProps: {\n            min: 2,\n            max: 5\n          },\n          helperText: \"Minimum 2, maximum 5 players\",\n          sx: {\n            mb: 3\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1205,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: !playerName || playerCount < 2 || playerCount > 5,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1217,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1195,\n        columnNumber: 21\n      }, this) :\n      /*#__PURE__*/\n      // Join game form\n      _jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleJoinGame,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Name\",\n          required: true,\n          value: playerName,\n          onChange: e => setPlayerName(e.target.value),\n          sx: {\n            mb: 2\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1229,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Game Code\",\n          required: true,\n          value: joinGameId,\n          onChange: e => setJoinGameId(e.target.value),\n          sx: {\n            mb: 3\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1238,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: !playerName || !joinGameId,\n          children: \"Join Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1247,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1228,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1175,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1145,\n    columnNumber: 9\n  }, this);\n  const renderGame = () => {\n    var _game$players$;\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 1,\n              color: 'primary.main'\n            },\n            children: [\"Game ID: \", game.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1274,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              color: 'text.primary'\n            },\n            children: [\"Status: \", game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1277,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1273,\n          columnNumber: 21\n        }, this), (game.status === 'in_progress' || game.status === 'completed') && startTime && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'text.secondary'\n          },\n          children: [\"Time: \", formatTimeFromMs(elapsedTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1282,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1267,\n        columnNumber: 17\n      }, this), game.status === 'waiting' && playerId === ((_game$players$ = game.players[0]) === null || _game$players$ === void 0 ? void 0 : _game$players$.id) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartGame,\n        sx: {\n          mb: 3\n        },\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1290,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 3,\n            children: game.players.map(renderPlayer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1303,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1302,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: renderStatistics()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1309,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1300,\n        columnNumber: 17\n      }, this), game.status === 'completed' && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4,\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMainMenu,\n          sx: {\n            minWidth: 200,\n            borderRadius: 2\n          },\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1317,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1316,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1265,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [!gameId ? renderMainMenu() : game ? renderGame() : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1340,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mt: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1344,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1334,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"gvXz0vBA1Y5g79o/yx1rmaQsLS4=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","keyframes","Stack","TableContainer","Table","TableHead","TableBody","TableCell","TableRow","Paper","Container","CircularProgress","TaskStatus","PlayerStatus","TaskType","gameService","WebSocketService","jsxDEV","_jsxDEV","Game","gameId","initialGameId","_s","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","currentTime","setCurrentTime","showResultPage","setShowResultPage","batchCompletionTimes","setBatchCompletionTimes","batchStartTimes","setBatchStartTimes","batchFlipStates","setBatchFlipStates","flippedCoins","setFlippedCoins","pendingBatchCompletion","setPendingBatchCompletion","flipStates","setFlipStates","elapsedTime","setElapsedTime","batchStats","setBatchStats","service","updatedGame","console","log","connect","disconnect","status","Date","now","timerInterval","setInterval","prev","clearInterval","intervalId","tasks","players","newStartTimes","newCompletionTimes","hasChanges","forEach","player","current_batch","batch_start_time","Object","entries","batchNum","Number","max_batches","_newStartTimes$player","batchTasks","filter","t","batch_number","assigned_to","id","startedAt","length","every","COMPLETED","shouldUpdate","currentFlippedCoins","playerTasks","currentBatchTasks","PENDING","prevBatchTasks","prevBatchTaskIds","map","newFlippedCoins","includes","push","handleGameUpdate","handleCreateGame","e","preventDefault","createGame","joinGame","ws","initialGameState","getGameState","err","Error","message","handleJoinGame","exists","checkGameExists","gameState","handleStartGame","startGame","flipAnimation","renderTargetCoin","type","sx","width","xs","sm","height","borderRadius","border","theme","palette","primary","main","display","alignItems","justifyContent","backgroundColor","background","paper","color","text","fontSize","fontWeight","marginBottom","marginRight","children","HEADS","fileName","_jsxFileName","lineNumber","columnNumber","isBatchAllFlipped","handleCoinFlip","coinId","currentPlayer","find","p","ACTIVE","currentTask","currentBatch","currentSubBatch","sub_batch_number","requiredCoins","getRequiredCoinsForBatch","currentSubBatchFlips","isFlipping","showOpposite","flipCoin","newState","handleCompleteBatch","pendingTasks","taskId","completeTask","renderCoin","isSmall","onClick","flipState","undefined","isFlipped","displayType","TAILS","perspective","mb","position","cursor","transition","transformStyle","transform","boxShadow","content","top","left","right","bottom","pointerEvents","subBatchNum","_batchConfigs$batchNu","batchConfigs","values","reduce","sum","count","getSubBatchCount","subBatchCounts","renderTaskRow","playerStatus","_tasks$","WAITING","variant","subBatchCount","currentBatchTarget","tasksBySubBatch","task","Array","from","_","i","_subBatchTasks$","subBatchTasks","isCurrentSubBatchComplete","canFlipInSubBatch","previousSubBatchesComplete","prevSubBatch","prevTasks","flexWrap","gap","opacity","canFlip","mt","renderPlayer","_currentBatchTasks$","currentFlippedCount","name","label","size","bgcolor","mr","ml","getPlayerStatusColor","IDLE","getTaskStatusColor","IN_PROGRESS","handleTabChange","newValue","handleGameComplete","formatTimeFromMs","ms","totalSeconds","Math","floor","minutes","seconds","toString","padStart","renderCompletionDialog","totalTime","open","onClose","PaperProps","textAlign","flexDirection","py","window","location","reload","handleCompleteGame","handleReturnToMainMenu","renderResultPage","minHeight","maxWidth","renderStatistics","component","align","_player$batch_start_t","_player$batch_complet","_player$batch_start_t2","isCompleted","hasStarted","completionTime","batch_completion_time","displayTime","_p$batch_completion_t","getTasksForBatch","useMemo","tasksByBatch","getPlayerTasks","newStats","completedTasks","tasksCompleted","totalTasks","batchNumber","parseInt","_newStartTimes$batchN","batchStartTime","renderBatchStatistics","_batchStats$batchNum","stats","renderMainMenu","mx","borderTopLeftRadius","borderTopRightRadius","WebkitBackgroundClip","WebkitTextFillColor","textShadow","borderBottomLeftRadius","borderBottomRightRadius","value","onChange","onSubmit","fullWidth","required","target","autoComplete","inputProps","min","max","helperText","disabled","renderGame","_game$players$","container","spacing","item","md","minWidth","severity","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game 2/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes,\n    Stack,\n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableCell,\n    TableRow,\n    Paper,\n    Container,\n    CircularProgress\n} from '@mui/material';\nimport { Game as GameType, Player, Task, TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\n\ninterface GameProps {\n    gameId?: string;\n}\n\ntype TabType = 0 | 1;\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | undefined>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(20);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState<TabType>(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n    const [batchCompletionTimes, setBatchCompletionTimes] = useState<{[key: number]: {[key: string]: number}}>({});\n    const [batchStartTimes, setBatchStartTimes] = useState<{[key: number]: {[key: number]: number}}>({});\n    const [batchFlipStates, setBatchFlipStates] = useState<{\n        [batchNum: number]: {\n            [taskId: string]: boolean;  // true means flipped\n        };\n    }>({});\n\n    // 添加状态来跟踪硬币的翻转状态和批次完成状态\n    const [flippedCoins, setFlippedCoins] = useState<string[]>([]);\n    const [pendingBatchCompletion, setPendingBatchCompletion] = useState<{\n        [batchNum: number]: string[];  // batchNum -> taskIds\n    }>({});\n\n    // 添加翻转动画状态\n    interface FlipState {\n        isFlipping: boolean;\n        showOpposite: boolean;\n    }\n    const [flipStates, setFlipStates] = useState<{\n        [key: string]: FlipState;\n    }>({});\n\n    // 修改计时器状态和开始时间状态\n    const [elapsedTime, setElapsedTime] = useState<number>(0);\n\n    // 添加批次统计时间的状态\n    const [batchStats, setBatchStats] = useState<{\n        [batchNum: number]: {\n            [playerId: string]: {\n                completionTime: number;\n                tasksCompleted: number;\n                totalTasks: number;\n            }\n        }\n    }>({});\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, (updatedGame) => {\n                console.log('Game state updated:', updatedGame);\n                setGame(updatedGame);\n            });\n            service.connect();\n            setWsService(service);\n\n            // Cleanup function\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && startTime) {\n            timerInterval = setInterval(() => {\n                setCurrentTime(prev => Date.now() - startTime);\n            }, 1000);\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, startTime, endTime]);\n\n    useEffect(() => {\n        let intervalId: NodeJS.Timeout;\n        \n        if (startTime && game?.status === 'in_progress') {\n            intervalId = setInterval(() => {\n                setElapsedTime(prev => Date.now() - startTime);\n            }, 1000);\n        }\n        \n        return () => {\n            if (intervalId) {\n                clearInterval(intervalId);\n            }\n        };\n    }, [startTime, game?.status]);\n\n    useEffect(() => {\n        if (game?.tasks && game.players) {\n            const newStartTimes = { ...batchStartTimes };\n            const newCompletionTimes = { ...batchCompletionTimes };\n            let hasChanges = false;\n\n            game.players.forEach(player => {\n                if (!newStartTimes[player.current_batch]) {\n                    newStartTimes[player.current_batch] = {};\n                    hasChanges = true;\n                }\n                if (!newCompletionTimes[player.current_batch]) {\n                    newCompletionTimes[player.current_batch] = {};\n                    hasChanges = true;\n                }\n\n                // 使用后端提供的批次开始时间\n                if (player.batch_start_time) {\n                    Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n                        if (newStartTimes[player.current_batch][Number(batchNum)] !== startTime) {\n                            newStartTimes[player.current_batch][Number(batchNum)] = startTime;\n                            hasChanges = true;\n                        }\n                    });\n                }\n\n                // Calculate completion times for each batch\n                for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const startedAt = newStartTimes[player.current_batch]?.[batchNum];\n                    if (startedAt && \n                        batchTasks.length > 0 && \n                        batchTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                        !newCompletionTimes[player.current_batch][player.id]) {\n                        newCompletionTimes[player.current_batch][player.id] = Date.now() - startedAt;\n                        hasChanges = true;\n                    }\n                }\n            });\n\n            // 只在有变化时更新状态\n            if (hasChanges) {\n                setBatchStartTimes(newStartTimes);\n                setBatchCompletionTimes(newCompletionTimes);\n            }\n        }\n    }, [game?.tasks, game?.players, game?.max_batches]);\n\n    useEffect(() => {\n        if (game?.tasks) {\n            let shouldUpdate = false;\n            const currentFlippedCoins = [...flippedCoins];\n\n            // 检查是否有新的批次开始\n            game.players.forEach(player => {\n                const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n                const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n                \n                // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                    // 清理上一个批次的翻转状态\n                    const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n                    const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n                    const newFlippedCoins = currentFlippedCoins.filter(id => !prevBatchTaskIds.includes(id));\n                    if (newFlippedCoins.length !== currentFlippedCoins.length) {\n                        currentFlippedCoins.length = 0;\n                        currentFlippedCoins.push(...newFlippedCoins);\n                        shouldUpdate = true;\n                    }\n                }\n            });\n\n            // 只在有变化时更新状态\n            if (shouldUpdate) {\n                setFlippedCoins(currentFlippedCoins);\n            }\n        }\n    }, [game?.tasks]);\n\n    // 添加错误处理函数\n    const handleGameUpdate = (updatedGame: GameType) => {\n        setGame(updatedGame);\n        if (updatedGame.status === 'completed' && !endTime) {\n            setEndTime(Date.now());\n        }\n    };\n\n    const handleCreateGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            // 创建游戏\n            const gameId = await gameService.createGame(playerCount, 4, 0);\n            if (gameId) {\n                // 加入游戏\n                const playerId = await gameService.joinGame(gameId, playerName);\n                \n                // 更新状态\n                setGameId(gameId);\n                setPlayerId(playerId);\n                \n                // 创建WebSocket连接\n                const ws = new WebSocketService(\n                    gameId,\n                    playerName,\n                    handleGameUpdate\n                );\n                setWsService(ws);\n                \n                // 获取初始游戏状态\n                const initialGameState = await gameService.getGameState(gameId);\n                setGame(initialGameState);\n                \n                // 设置开始时间\n                setStartTime(Date.now());\n                \n                console.log('Game created successfully:', { gameId, playerId });\n            }\n        } catch (err) {\n            console.error('Error creating game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to create game');\n        }\n    };\n\n    const handleJoinGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            if (joinGameId) {\n                // 检查游戏是否存在\n                const exists = await gameService.checkGameExists(joinGameId);\n                if (!exists) {\n                    setError('Game not found');\n                    return;\n                }\n                \n                // 加入游戏\n                const playerId = await gameService.joinGame(joinGameId, playerName);\n                \n                // 更新状态\n                setGameId(joinGameId);\n                setPlayerId(playerId);\n                \n                // 创建WebSocket连接\n                const ws = new WebSocketService(\n                    joinGameId,\n                    playerName,\n                    handleGameUpdate\n                );\n                setWsService(ws);\n                \n                // 获取游戏状态\n                const gameState = await gameService.getGameState(joinGameId);\n                setGame(gameState);\n                \n                // 设置开始时间\n                setStartTime(Date.now());\n                \n                console.log('Joined game successfully:', { gameId: joinGameId, playerId });\n            }\n        } catch (err) {\n            console.error('Error joining game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to join game');\n        }\n    };\n\n    const handleStartGame = async () => {\n        if (!gameId) return;\n        \n        try {\n            await gameService.startGame(gameId);\n            const currentTime = Date.now();\n            setStartTime(currentTime);\n            setBatchStartTimes(prev => ({\n                ...prev,\n                1: { 1: currentTime }\n            }));\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Failed to start game');\n        }\n    };\n\n    const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n    // 添加一个专门用于渲染目标硬币的函数\n    const renderTargetCoin = (type: TaskType) => {\n        return (\n            <Box\n                sx={{\n                    width: { xs: '20px', sm: '32px' },\n                    height: { xs: '20px', sm: '32px' },\n                    borderRadius: '50%',\n                    border: theme => ({\n                        xs: `1px solid ${theme.palette.primary.main}`,\n                        sm: `2px solid ${theme.palette.primary.main}`\n                    }),\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    backgroundColor: theme => theme.palette.background.paper,\n                    color: theme => theme.palette.text.primary,\n                    fontSize: { xs: '0.7rem', sm: '0.9rem' },\n                    fontWeight: 'bold',\n                    marginBottom: { xs: 0, sm: 1 },\n                    marginRight: 1\n                }}\n            >\n                {type === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 检查批次是否所有硬币都已翻转\n    const isBatchAllFlipped = (batchNum: number, playerId: string) => {\n        const batchTasks = game?.tasks.filter(t => \n            t.batch_number === batchNum && \n            t.assigned_to === playerId\n        );\n        return batchTasks?.every(t => flippedCoins.includes(t.id)) || false;\n    };\n\n    // 处理硬币翻转\n    const handleCoinFlip = async (coinId: string) => {\n        if (!game || !playerId) return;\n        \n        // 检查是否是当前玩家的回合\n        const currentPlayer = game.players.find(p => p.id === playerId);\n        if (currentPlayer?.status !== PlayerStatus.ACTIVE) return;\n        \n        // 获取当前任务信息\n        const currentTask = game.tasks.find(t => t.id === coinId);\n        if (!currentTask) return;\n\n        // 获取当前子批次需要翻转的硬币数量\n        const currentBatch = currentPlayer.current_batch;\n        const currentSubBatch = currentTask.sub_batch_number;\n        const requiredCoins = getRequiredCoinsForBatch(currentBatch, currentSubBatch);\n        \n        // 计算当前子批次已翻转的硬币数量\n        const currentSubBatchFlips = flippedCoins.filter(id => \n            game.tasks.find(t => \n                t.id === id && \n                t.batch_number === currentBatch && \n                t.sub_batch_number === currentSubBatch &&\n                t.assigned_to === playerId\n            )\n        ).length;\n        \n        if (currentSubBatchFlips >= requiredCoins) return;\n        \n        try {\n            // 更新本地状态\n            setFlippedCoins(prev => [...prev, coinId]);\n            \n            // 更新翻转动画状态\n            setFlipStates(prev => ({\n                ...prev,\n                [coinId]: {\n                    isFlipping: true,\n                    showOpposite: true\n                }\n            }));\n\n            // 发送翻转请求到服务器\n            await gameService.flipCoin(game.id, coinId);\n        } catch (error) {\n            console.error('Error flipping coin:', error);\n            // 如果失败，回滚本地状态\n            setFlippedCoins(prev => prev.filter(id => id !== coinId));\n            setFlipStates(prev => {\n                const newState = { ...prev };\n                delete newState[coinId];\n                return newState;\n            });\n        }\n    };\n\n    // 处理批次完成\n    const handleCompleteBatch = (batchNum: number) => {\n        const pendingTasks = pendingBatchCompletion[batchNum] || [];\n        if (pendingTasks.length === 0) return;\n\n        // 发送所有任务完成的请求\n        pendingTasks.forEach(taskId => {\n            if (wsService) {\n                wsService.completeTask(taskId);\n            }\n        });\n\n        // 清理这个批次的待完成状态\n        setPendingBatchCompletion(prev => {\n            const newState = { ...prev };\n            delete newState[batchNum];\n            return newState;\n        });\n    };\n\n    // 修改渲染硬币的函数\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void, taskId?: string) => {\n        const flipState = taskId ? flipStates[taskId] : undefined;\n        const isFlipped = taskId ? flippedCoins.includes(taskId) : false;\n        \n        // 决定显示哪一面\n        const displayType = isFlipped\n            ? (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) \n            : type;\n\n        return (\n            <Box\n                sx={{\n                    width: isSmall ? 20 : 32,\n                    height: isSmall ? 20 : 32,\n                    borderRadius: '50%',\n                    backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                    border: `${isSmall ? 1 : 2}px solid #B8860B`,\n                    color: '#704214',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontWeight: 'bold',\n                    fontSize: isSmall ? '0.6rem' : '0.8rem',\n                    perspective: 1000,\n                    mb: isSmall ? 0 : 1,\n                    position: 'relative',\n                    cursor: onClick ? 'pointer' : 'default',\n                    transition: 'transform 0.6s',\n                    transformStyle: 'preserve-3d',\n                    transform: flipState?.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n                    '&:hover': onClick ? {\n                        transform: 'scale(1.05)',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                    } : {},\n                    '&:active': onClick ? {\n                        transform: 'scale(0.95)'\n                    } : {},\n                    '&::after': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        borderRadius: '50%',\n                        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                        pointerEvents: 'none'\n                    }\n                }}\n                onClick={onClick}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 监听游戏状态变化\n    useEffect(() => {\n        if (game?.tasks) {\n            // 检查是否有新的批次开始\n            game.players.forEach(player => {\n                const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n                const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n                \n                // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                    // 清理上一个批次的翻转状态\n                    const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n                    const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n                    setFlippedCoins(prev => prev.filter(id => !prevBatchTaskIds.includes(id)));\n                }\n            });\n        }\n    }, [game?.tasks]);\n\n    // 获取每轮需要翻转的硬币数量\n    const getRequiredCoinsForBatch = (batchNum: number, subBatchNum?: number): number => {\n        const batchConfigs: Record<number, Record<number, number>> = {\n            1: { 1: 20 },  // 第1轮：1个子批次，20个硬币\n            2: { 1: 10, 2: 10 },  // 第2轮：2个子批次，每个10个硬币\n            3: { 1: 5, 2: 5, 3: 5, 4: 5 },  // 第3轮：4个子批次，每个5个硬币\n            4: { 1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2, 10: 2 }  // 第4轮：10个子批次，每个2个硬币\n        };\n\n        if (subBatchNum === undefined) {\n            return Object.values(batchConfigs[batchNum] || {}).reduce((sum: number, count: number) => sum + count, 0);\n        }\n        return batchConfigs[batchNum]?.[subBatchNum] || 0;\n    };\n\n    // 获取批次的子批次数量\n    const getSubBatchCount = (batchNum: number): number => {\n        const subBatchCounts: Record<number, number> = {\n            1: 1,  // 第1轮：1个子批次\n            2: 2,  // 第2轮：2个子批次\n            3: 4,  // 第3轮：4个子批次\n            4: 10  // 第4轮：10个子批次\n        };\n        return subBatchCounts[batchNum] || 1;\n    };\n\n    // 渲染任务行\n    const renderTaskRow = (tasks: Task[], batchNum: number, playerStatus: PlayerStatus) => {\n        if (playerStatus === PlayerStatus.WAITING) {\n            return (\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                    Waiting for your turn...\n                </Typography>\n            );\n        }\n\n        const subBatchCount = getSubBatchCount(batchNum);\n        const currentBatchTarget = tasks[0]?.type || TaskType.HEADS;\n        \n        // 按子批次分组任务\n        const tasksBySubBatch: { [key: number]: Task[] } = {};\n        tasks.forEach(task => {\n            if (!tasksBySubBatch[task.sub_batch_number]) {\n                tasksBySubBatch[task.sub_batch_number] = [];\n            }\n            tasksBySubBatch[task.sub_batch_number].push(task);\n        });\n\n        return (\n            <Box>\n                {Array.from({ length: subBatchCount }, (_, i) => i + 1).map(subBatchNum => {\n                    const subBatchTasks = tasksBySubBatch[subBatchNum] || [];\n                    const requiredCoins = getRequiredCoinsForBatch(batchNum, subBatchNum);\n                    const currentSubBatchFlips = subBatchTasks.filter(t => flippedCoins.includes(t.id)).length;\n                    const isCurrentSubBatchComplete = currentSubBatchFlips >= requiredCoins;\n                    const canFlipInSubBatch = !isCurrentSubBatchComplete && \n                        (!subBatchTasks[0]?.status || subBatchTasks[0].status === TaskStatus.PENDING);\n\n                    // 检查之前的子批次是否都已完成\n                    const previousSubBatchesComplete = Array.from({ length: subBatchNum - 1 }, (_, i) => i + 1)\n                        .every(prevSubBatch => {\n                            const prevTasks = tasksBySubBatch[prevSubBatch] || [];\n                            return prevTasks.every(t => t.status === TaskStatus.COMPLETED);\n                        });\n\n                    return (\n                        <Box key={subBatchNum} sx={{ mb: 2 }}>\n                            <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n                                Sub-batch {subBatchNum}/{subBatchCount} ({requiredCoins} coins)\n                            </Typography>\n                            <Box sx={{ \n                                display: 'flex', \n                                flexWrap: 'wrap',\n                                gap: 1,\n                                opacity: !previousSubBatchesComplete ? 0.5 : 1\n                            }}>\n                                {subBatchTasks.map((task) => {\n                                    const isFlipped = flippedCoins.includes(task.id);\n                                    const canFlip = !isFlipped && \n                                                  playerStatus === PlayerStatus.ACTIVE && \n                                                  canFlipInSubBatch &&\n                                                  previousSubBatchesComplete;\n\n                                    return (\n                                        <Box\n                                            key={task.id}\n                                            sx={{\n                                                width: 32,\n                                                height: 32,\n                                                borderRadius: '50%',\n                                                backgroundColor: isFlipped ? '#DAA520' : '#FFD700',\n                                                border: '2px solid #B8860B',\n                                                color: '#704214',\n                                                display: 'flex',\n                                                alignItems: 'center',\n                                                justifyContent: 'center',\n                                                fontWeight: 'bold',\n                                                fontSize: '0.8rem',\n                                                cursor: canFlip ? 'pointer' : 'default',\n                                                opacity: canFlip ? 1 : 0.7,\n                                                transition: 'all 0.3s',\n                                                '&:hover': canFlip ? {\n                                                    transform: 'scale(1.1)',\n                                                    boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                                                } : {}\n                                            }}\n                                            onClick={canFlip ? () => handleCoinFlip(task.id) : undefined}\n                                        >\n                                            {isFlipped ? 'T' : 'H'}\n                                        </Box>\n                                    );\n                                })}\n                            </Box>\n                            {isCurrentSubBatchComplete && (\n                                <Typography variant=\"body2\" color=\"success.main\" sx={{ mt: 1 }}>\n                                    Sub-batch completed!\n                                </Typography>\n                            )}\n                        </Box>\n                    );\n                })}\n                {tasks.every(t => t.status === TaskStatus.COMPLETED) && (\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => handleCompleteBatch(batchNum)}\n                        sx={{ mt: 2, width: '100%' }}\n                    >\n                        Complete Round {batchNum}\n                    </Button>\n                )}\n            </Box>\n        );\n    };\n\n    // 渲染玩家卡片\n    const renderPlayer = (player: Player) => {\n        const currentBatchTasks = game?.tasks.filter(t => \n            t.batch_number === player.current_batch && \n            t.assigned_to === player.id\n        ) || [];\n\n        const currentBatchTarget = currentBatchTasks[0]?.type;\n        const requiredCoins = getRequiredCoinsForBatch(player.current_batch);\n        const currentFlippedCount = currentBatchTasks.filter(t => flippedCoins.includes(t.id)).length;\n\n        return (\n            <Card key={player.id} sx={{ mb: 2 }}>\n                <CardContent>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                        <Typography variant=\"h6\">\n                            {player.name}\n                        </Typography>\n                        <Chip \n                            label={player.status}\n                            color={player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\"}\n                            size=\"small\"\n                        />\n                    </Box>\n\n                    <Box sx={{ mb: 2, bgcolor: 'background.default', p: 2, borderRadius: 1 }}>\n                        <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n                            Current Round: {player.current_batch} / {game?.max_batches}\n                            {currentBatchTarget && player.status === PlayerStatus.ACTIVE && (\n                                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\n                                    <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                                        Required flips:\n                                    </Typography>\n                                    <Typography variant=\"body2\" sx={{ ml: 2 }}>\n                                        {requiredCoins}\n                                    </Typography>\n                                </Box>\n                            )}\n                        </Typography>\n\n                        <Box sx={{ mb: 2 }}>\n                            {renderTaskRow(currentBatchTasks, player.current_batch, player.status)}\n                        </Box>\n                    </Box>\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue as TabType);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(20);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    // 添加一个辅助函数来处理毫秒到时间的转换\n    const formatTimeFromMs = (ms: number) => {\n        const totalSeconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed!\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTimeFromMs(endTime - startTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    // 修改返回主菜单的处理函数\n    const handleReturnToMainMenu = () => {\n        // 清除游戏状态\n        setGameId('');\n        setGame(null);\n        setWsService(null);\n        setStartTime(null);\n        setEndTime(null);\n        // 清除输入记录\n        setPlayerName('');\n        setPlayerCount(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTimeFromMs(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMainMenu}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    const renderStatistics = () => {\n        if (!game) return null;\n\n        return (\n            <Box sx={{ p: 2 }}>\n                <Typography variant=\"h6\" sx={{ mb: 2, color: 'primary.main' }}>\n                    Game Statistics\n                </Typography>\n                {Array.from({ length: game.max_batches }, (_, i) => i + 1).map(batchNum => (\n                    <Box key={batchNum} sx={{ mb: 3 }}>\n                        <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                            Round {batchNum}\n                        </Typography>\n                        <TableContainer component={Paper} sx={{ mb: 2 }}>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Player</TableCell>\n                                        <TableCell align=\"right\">Time</TableCell>\n                                        <TableCell align=\"right\">Status</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {game.players.map(player => {\n                                        const batchTasks = game.tasks.filter(t => \n                                            t.batch_number === batchNum && \n                                            t.assigned_to === player.id\n                                        );\n                                        const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                                        const hasStarted = player.batch_start_time?.[batchNum] != null;\n                                        const completionTime = player.batch_completion_time?.[batchNum];\n                                        const startTime = player.batch_start_time?.[batchNum];\n                                        \n                                        // 计算当前时间（如果批次已开始但未完成）\n                                        let displayTime = '-';\n                                        if (completionTime) {\n                                            displayTime = formatTimeFromMs(completionTime);\n                                        } else if (hasStarted && startTime) {\n                                            const currentTime = Date.now() - startTime;\n                                            displayTime = formatTimeFromMs(currentTime);\n                                        }\n\n                                        let status = 'Pending';\n                                        if (isCompleted) {\n                                            status = 'Completed';\n                                        } else if (hasStarted || (batchTasks.length > 0 && player.status === PlayerStatus.ACTIVE)) {\n                                            status = 'In Progress';\n                                        }\n\n                                        return (\n                                            <TableRow key={player.id}>\n                                                <TableCell>{player.name}</TableCell>\n                                                <TableCell align=\"right\">{displayTime}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Chip \n                                                        label={status}\n                                                        size=\"small\"\n                                                        color={isCompleted ? 'success' : (hasStarted ? 'primary' : 'default')}\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                    <TableRow sx={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}>\n                                        <TableCell><strong>Total</strong></TableCell>\n                                        <TableCell align=\"right\">\n                                            <strong>\n                                                {formatTimeFromMs(game.players.reduce((sum, p) => \n                                                    sum + (p.batch_completion_time?.[batchNum] || 0), \n                                                    0\n                                                ))}\n                                            </strong>\n                                        </TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    // 使用useMemo来记忆计算结果\n    const getTasksForBatch = React.useMemo(() => {\n        if (!game?.tasks) return {};\n        const tasksByBatch: { [key: number]: Task[] } = {};\n        game.tasks.forEach(task => {\n            if (!tasksByBatch[task.batch_number]) {\n                tasksByBatch[task.batch_number] = [];\n            }\n            tasksByBatch[task.batch_number].push(task);\n        });\n        return tasksByBatch;\n    }, [game?.tasks]);\n\n    // 使用useMemo来记忆玩家任务\n    const getPlayerTasks = React.useMemo(() => {\n        if (!game?.tasks || !game?.players) return {};\n        const playerTasks: { [key: string]: Task[] } = {};\n        game.players.forEach(player => {\n            playerTasks[player.id] = game.tasks.filter(t => t.assigned_to === player.id);\n        });\n        return playerTasks;\n    }, [game?.tasks, game?.players]);\n\n    useEffect(() => {\n        if (!game?.tasks || !startTime) return;\n\n        const newStats = { ...batchStats };\n        \n        // 遍历每个批次\n        for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n            if (!newStats[batchNum]) {\n                newStats[batchNum] = {};\n            }\n            \n            // 遍历每个玩家\n            game.players.forEach(player => {\n                const batchTasks = game.tasks.filter(t => \n                    t.batch_number === batchNum && \n                    t.assigned_to === player.id\n                );\n                \n                const completedTasks = batchTasks.filter(t => \n                    t.status === TaskStatus.COMPLETED\n                );\n                \n                // 如果这个批次的所有任务都完成了，记录完成时间\n                if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n                    // 只在第一次完成时记录时间\n                    if (!newStats[batchNum][player.id]) {\n                        newStats[batchNum][player.id] = {\n                            completionTime: elapsedTime,\n                            tasksCompleted: completedTasks.length,\n                            totalTasks: batchTasks.length\n                        };\n                    }\n                } else if (batchTasks.length > 0) {\n                    // 更新进行中的任务状态\n                    newStats[batchNum][player.id] = {\n                        completionTime: 0,\n                        tasksCompleted: completedTasks.length,\n                        totalTasks: batchTasks.length\n                    };\n                }\n            });\n        }\n        \n        setBatchStats(newStats);\n    }, [game?.tasks, startTime, elapsedTime]);\n\n    useEffect(() => {\n        if (!game?.tasks || !startTime) return;\n\n        const newCompletionTimes = { ...batchCompletionTimes };\n        const newStartTimes = { ...batchStartTimes };\n        let hasChanges = false;\n\n        Object.entries(getTasksForBatch).forEach(([batchNum, tasks]) => {\n            const batchNumber = parseInt(batchNum);\n            if (!newStartTimes[batchNumber]) {\n                newStartTimes[batchNumber] = {};\n                hasChanges = true;\n            }\n            if (!newCompletionTimes[batchNumber]) {\n                newCompletionTimes[batchNumber] = {};\n                hasChanges = true;\n            }\n\n            game.players.forEach(player => {\n                const playerTasks = tasks.filter(t => t.assigned_to === player.id);\n                if (playerTasks.length > 0 && \n                    playerTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                    !newCompletionTimes[batchNumber][player.id]) {\n                    const batchStartTime = newStartTimes[batchNumber]?.[batchNumber] || startTime;\n                    newCompletionTimes[batchNumber][player.id] = Date.now() - batchStartTime;\n                    hasChanges = true;\n                }\n            });\n        });\n\n        // 只在有变化时更新状态\n        if (hasChanges) {\n            setBatchStartTimes(newStartTimes);\n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.players, getTasksForBatch, startTime]);\n\n    useEffect(() => {\n        if (game?.tasks && startTime) {\n            const newStats = { ...batchStats };\n            \n            // 遍历每个批次\n            for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n                if (!newStats[batchNum]) {\n                    newStats[batchNum] = {};\n                }\n                \n                // 遍历每个玩家\n                game.players.forEach(player => {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const completedTasks = batchTasks.filter(t => \n                        t.status === TaskStatus.COMPLETED\n                    );\n                    \n                    // 如果这个批次的所有任务都完成了，记录完成时间\n                    if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n                        // 只在第一次完成时记录时间\n                        if (!newStats[batchNum][player.id]) {\n                            newStats[batchNum][player.id] = {\n                                completionTime: elapsedTime,\n                                tasksCompleted: completedTasks.length,\n                                totalTasks: batchTasks.length\n                            };\n                        }\n                    } else if (batchTasks.length > 0) {\n                        // 更新进行中的任务状态\n                        newStats[batchNum][player.id] = {\n                            completionTime: 0,\n                            tasksCompleted: completedTasks.length,\n                            totalTasks: batchTasks.length\n                        };\n                    }\n                });\n            }\n            \n            setBatchStats(newStats);\n        }\n    }, [game?.tasks, startTime, elapsedTime]);\n\n    // 修改统计页面中的完成时间显示\n    const renderBatchStatistics = (batchNum: number, player: Player) => {\n        const stats = batchStats[batchNum]?.[player.id];\n        \n        return (\n            <TableRow key={player.id}>\n                <TableCell>{player.name}</TableCell>\n                <TableCell align=\"right\">\n                    {stats?.completionTime ? formatTimeFromMs(stats.completionTime) : '-'}\n                </TableCell>\n                <TableCell align=\"right\">\n                    {stats?.tasksCompleted}/{stats?.totalTasks || 0}\n                </TableCell>\n            </TableRow>\n        );\n    };\n\n    // 渲染主菜单\n    const renderMainMenu = () => (\n        <Card sx={{\n            maxWidth: 600,\n            width: '100%',\n            mx: 'auto',\n            mt: 4\n        }}>\n            {/* Top section with title and subtitle */}\n            <Box sx={{\n                background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n                p: 4,\n                borderTopLeftRadius: 8,\n                borderTopRightRadius: 8\n            }}>\n                <Typography variant=\"h3\" sx={{\n                    fontWeight: 'bold',\n                    background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n                    WebkitBackgroundClip: 'text',\n                    WebkitTextFillColor: 'transparent',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n                    textAlign: 'center',\n                    mb: 1\n                }}>\n                    Online Multiplayer Coin Game\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"text.secondary\" align=\"center\">\n                    Flip coins with your friends in this multiplayer game!\n                </Typography>\n            </Box>\n\n            {/* Bottom section with form */}\n            <Box sx={{\n                background: '#ffffff',\n                p: 4,\n                borderBottomLeftRadius: 8,\n                borderBottomRightRadius: 8\n            }}>\n                <Tabs value={activeTab} onChange={(e, newValue) => {\n                    setActiveTab(newValue as TabType);\n                    // 切换标签时也清除输入\n                    setPlayerName('');\n                    setPlayerCount(2);\n                    setJoinGameId('');\n                    setError(null);\n                }} sx={{ mb: 3 }}>\n                    <Tab label=\"CREATE GAME\" />\n                    <Tab label=\"JOIN GAME\" />\n                </Tabs>\n\n                {activeTab === 0 ? (\n                    // Create game form\n                    <Box component=\"form\" onSubmit={handleCreateGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Number of Players\"\n                            type=\"number\"\n                            required\n                            value={playerCount}\n                            onChange={(e) => setPlayerCount(Number(e.target.value))}\n                            inputProps={{ min: 2, max: 5 }}\n                            helperText=\"Minimum 2, maximum 5 players\"\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || playerCount < 2 || playerCount > 5}\n                        >\n                            Create Game\n                        </Button>\n                    </Box>\n                ) : (\n                    // Join game form\n                    <Box component=\"form\" onSubmit={handleJoinGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Game Code\"\n                            required\n                            value={joinGameId}\n                            onChange={(e) => setJoinGameId(e.target.value)}\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || !joinGameId}\n                        >\n                            Join Game\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        </Card>\n    );\n\n    const renderGame = () => {\n        if (!game) return null;\n        \n        return (\n            <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n                {/* 游戏头部信息 */}\n                <Box sx={{ \n                    display: 'flex', \n                    justifyContent: 'space-between', \n                    alignItems: 'center',\n                    mb: 3\n                }}>\n                    <Box>\n                        <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                            Game ID: {game.id}\n                        </Typography>\n                        <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                            Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                        </Typography>\n                    </Box>\n                    {(game.status === 'in_progress' || game.status === 'completed') && startTime && (\n                        <Typography variant=\"h6\" sx={{ color: 'text.secondary' }}>\n                            Time: {formatTimeFromMs(elapsedTime)}\n                        </Typography>\n                    )}\n                </Box>\n\n                {/* 开始游戏按钮 */}\n                {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleStartGame}\n                        sx={{ mb: 3 }}\n                    >\n                        Start Game\n                    </Button>\n                )}\n\n                {/* 游戏内容 */}\n                <Grid container spacing={3}>\n                    {/* Left column: Player cards */}\n                    <Grid item xs={12} md={7}>\n                        <Stack spacing={3}>\n                            {game.players.map(renderPlayer)}\n                        </Stack>\n                    </Grid>\n\n                    {/* Right column: Results and statistics */}\n                    <Grid item xs={12} md={5}>\n                        {renderStatistics()}\n                    </Grid>\n                </Grid>\n\n                {/* 返回主菜单按钮 - 只在游戏完成时显示 */}\n                {game.status === 'completed' && (\n                    <Box sx={{ mt: 4, textAlign: 'center' }}>\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleReturnToMainMenu}\n                            sx={{\n                                minWidth: 200,\n                                borderRadius: 2\n                            }}\n                        >\n                            Return to Main Menu\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        );\n    };\n\n    return (\n        <Container>\n            {!gameId ? (\n                renderMainMenu()\n            ) : game ? (\n                renderGame()\n            ) : (\n                <CircularProgress />\n            )}\n            \n            {error && (\n                <Alert severity=\"error\" sx={{ mt: 2 }}>\n                    {error}\n                </Alert>\n            )}\n        </Container>\n    );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}