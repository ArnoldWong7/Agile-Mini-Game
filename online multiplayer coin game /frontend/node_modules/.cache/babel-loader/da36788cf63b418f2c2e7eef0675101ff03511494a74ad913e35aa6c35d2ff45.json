{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000';\nexport const gameService = {\n  createGame: async (playerCount, maxBatches, tasksPerBatch) => {\n    console.log('Creating game with params:', {\n      playerCount,\n      maxBatches,\n      tasksPerBatch\n    });\n    const response = await axios.post(`${API_URL}/games/create`, null, {\n      params: {\n        player_count: playerCount,\n        max_batches: maxBatches,\n        tasks_per_batch: tasksPerBatch\n      }\n    });\n    console.log('Game created:', response.data);\n    return response.data.game_id;\n  },\n  checkGameExists: async gameId => {\n    console.log('Checking if game exists:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n    console.log('Game exists response:', response.data);\n    return response.data.exists;\n  },\n  joinGame: async (gameId, playerName) => {\n    console.log('Joining game:', {\n      gameId,\n      playerName\n    });\n    const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n      params: {\n        player_name: playerName\n      }\n    });\n    console.log('Join game response:', response.data);\n    return response.data.player_id;\n  },\n  startGame: async gameId => {\n    console.log('Starting game:', gameId);\n    await axios.post(`${API_URL}/games/${gameId}/start`);\n    console.log('Game started');\n  },\n  getGameState: async gameId => {\n    console.log('Getting game state:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}`);\n    console.log('Game state:', response.data);\n    return response.data;\n  }\n};\nexport class WebSocketService {\n  constructor(gameId, playerId, onGameUpdate, onMessage) {\n    this.ws = null;\n    this.gameId = void 0;\n    this.playerId = void 0;\n    this.onGameUpdate = void 0;\n    this.onMessage = void 0;\n    this.gameId = gameId;\n    this.playerId = playerId;\n    this.onGameUpdate = onGameUpdate;\n    this.onMessage = onMessage;\n    console.log('WebSocket service initialized:', {\n      gameId,\n      playerId\n    });\n  }\n  connect() {\n    console.log('Connecting WebSocket...');\n    this.ws = new WebSocket(`ws://localhost:8000/ws/${this.playerId}`);\n    this.ws.onmessage = event => {\n      const message = JSON.parse(event.data);\n      console.log('WebSocket message received:', message);\n      if (message.type === 'game_update' || message.type === 'game_started') {\n        this.onGameUpdate(message.data);\n      } else {\n        this.onMessage(message);\n      }\n    };\n    this.ws.onopen = () => {\n      console.log('WebSocket connection opened');\n    };\n    this.ws.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n    this.ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  completeTask(taskId) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      const message = {\n        type: 'complete_task',\n        game_id: this.gameId,\n        task_id: taskId\n      };\n      console.log('Sending complete task message:', message);\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket not connected');\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      console.log('Disconnecting WebSocket');\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}","map":{"version":3,"names":["axios","API_URL","gameService","createGame","playerCount","maxBatches","tasksPerBatch","console","log","response","post","params","player_count","max_batches","tasks_per_batch","data","game_id","checkGameExists","gameId","get","exists","joinGame","playerName","player_name","player_id","startGame","getGameState","WebSocketService","constructor","playerId","onGameUpdate","onMessage","ws","connect","WebSocket","onmessage","event","message","JSON","parse","type","onopen","onclose","onerror","error","completeTask","taskId","readyState","OPEN","task_id","send","stringify","disconnect","close"],"sources":["/Users/huanghao/Desktop/online multiplayer task game/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\nconst API_URL = 'http://localhost:8000';\n\nexport const gameService = {\n    createGame: async (playerCount: number, maxBatches: number, tasksPerBatch: number): Promise<string> => {\n        console.log('Creating game with params:', { playerCount, maxBatches, tasksPerBatch });\n        const response = await axios.post(`${API_URL}/games/create`, null, {\n            params: { player_count: playerCount, max_batches: maxBatches, tasks_per_batch: tasksPerBatch }\n        });\n        console.log('Game created:', response.data);\n        return response.data.game_id;\n    },\n\n    checkGameExists: async (gameId: string): Promise<boolean> => {\n        console.log('Checking if game exists:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n        console.log('Game exists response:', response.data);\n        return response.data.exists;\n    },\n\n    joinGame: async (gameId: string, playerName: string): Promise<string> => {\n        console.log('Joining game:', { gameId, playerName });\n        const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n            params: { player_name: playerName }\n        });\n        console.log('Join game response:', response.data);\n        return response.data.player_id;\n    },\n\n    startGame: async (gameId: string): Promise<void> => {\n        console.log('Starting game:', gameId);\n        await axios.post(`${API_URL}/games/${gameId}/start`);\n        console.log('Game started');\n    },\n\n    getGameState: async (gameId: string): Promise<Game> => {\n        console.log('Getting game state:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}`);\n        console.log('Game state:', response.data);\n        return response.data;\n    }\n};\n\nexport class WebSocketService {\n    private ws: WebSocket | null = null;\n    private gameId: string;\n    private playerId: string;\n    private onGameUpdate: (game: Game) => void;\n    private onMessage: (message: WebSocketMessage) => void;\n\n    constructor(\n        gameId: string, \n        playerId: string, \n        onGameUpdate: (game: Game) => void,\n        onMessage: (message: WebSocketMessage) => void\n    ) {\n        this.gameId = gameId;\n        this.playerId = playerId;\n        this.onGameUpdate = onGameUpdate;\n        this.onMessage = onMessage;\n        console.log('WebSocket service initialized:', { gameId, playerId });\n    }\n\n    connect() {\n        console.log('Connecting WebSocket...');\n        this.ws = new WebSocket(`ws://localhost:8000/ws/${this.playerId}`);\n        \n        this.ws.onmessage = (event) => {\n            const message = JSON.parse(event.data);\n            console.log('WebSocket message received:', message);\n            if (message.type === 'game_update' || message.type === 'game_started') {\n                this.onGameUpdate(message.data);\n            } else {\n                this.onMessage(message);\n            }\n        };\n\n        this.ws.onopen = () => {\n            console.log('WebSocket connection opened');\n        };\n\n        this.ws.onclose = () => {\n            console.log('WebSocket connection closed');\n        };\n\n        this.ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n    }\n\n    completeTask(taskId: string) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            const message = {\n                type: 'complete_task',\n                game_id: this.gameId,\n                task_id: taskId\n            };\n            console.log('Sending complete task message:', message);\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.error('WebSocket not connected');\n        }\n    }\n\n    disconnect() {\n        if (this.ws) {\n            console.log('Disconnecting WebSocket');\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}