{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\nexport const gameService = {\n  createGame: async (playerCount, maxBatches = 4, tasksPerBatch = [20, 10, 5, 2]) => {\n    console.log('Creating game with params:', {\n      playerCount,\n      maxBatches,\n      tasksPerBatch\n    });\n    const response = await axios.post(`${API_URL}/games/create`, null, {\n      params: {\n        player_count: playerCount,\n        max_batches: maxBatches,\n        tasks_per_batch: tasksPerBatch\n      }\n    });\n    console.log('Game created:', response.data);\n    return response.data.game_id;\n  },\n  checkGameExists: async gameId => {\n    console.log('Checking if game exists:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n    console.log('Game exists response:', response.data);\n    return response.data.exists;\n  },\n  joinGame: async (gameId, playerName) => {\n    console.log('Joining game:', {\n      gameId,\n      playerName\n    });\n    const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n      params: {\n        player_name: playerName\n      }\n    });\n    console.log('Join game response:', response.data);\n    return response.data.player_id;\n  },\n  startGame: async gameId => {\n    console.log('Starting game:', gameId);\n    await axios.post(`${API_URL}/games/${gameId}/start`);\n    console.log('Game started');\n  },\n  getGameState: async gameId => {\n    console.log('Getting game state:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}`);\n    console.log('Game state:', response.data);\n    return response.data;\n  }\n};\nexport class WebSocketService {\n  constructor(gameId, playerId, onGameUpdate) {\n    this.ws = null;\n    this.gameId = void 0;\n    this.playerId = void 0;\n    this.onGameUpdate = void 0;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.gameId = gameId;\n    this.playerId = playerId;\n    this.onGameUpdate = onGameUpdate;\n    console.log('WebSocket service initialized:', {\n      gameId,\n      playerId\n    });\n  }\n  async connect() {\n    console.log('Connecting to WebSocket...');\n    const ws = new WebSocket(`${WS_URL}/ws/${this.gameId}/${this.playerId}`);\n    ws.onopen = () => {\n      console.log('WebSocket connection opened');\n      this.ws = ws;\n      this.reconnectAttempts = 0;\n      // 连接成功后立即获取游戏状态\n      this.getGameState();\n    };\n    ws.onclose = () => {\n      console.log('WebSocket connection closed');\n      this.handleReconnect();\n    };\n    ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    ws.onmessage = async event => {\n      try {\n        const message = JSON.parse(event.data);\n        console.log('WebSocket message received:', message);\n        if (message.type === 'game_update' || message.type === 'player_joined' || message.type === 'game_started') {\n          // 对于任何可能改变游戏状态的消息，都重新获取完整的游戏状态\n          const gameState = await gameService.getGameState(this.gameId);\n          console.log('Updated game state:', gameState);\n          this.onGameUpdate(gameState);\n        }\n      } catch (error) {\n        console.error('Error processing WebSocket message:', error);\n      }\n    };\n  }\n  async getGameState() {\n    try {\n      console.log('Getting initial game state...');\n      const gameState = await gameService.getGameState(this.gameId);\n      console.log('Initial game state:', gameState);\n      this.onGameUpdate(gameState);\n    } catch (error) {\n      console.error('Error getting game state:', error);\n    }\n  }\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      setTimeout(() => this.connect(), 1000 * this.reconnectAttempts);\n    }\n  }\n  completeTask(taskId) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      const message = {\n        type: 'complete_task',\n        task_id: taskId\n      };\n      console.log('Sending complete task message:', message);\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket not connected');\n    }\n  }\n  startGame() {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      const message = {\n        type: 'start_game'\n      };\n      console.log('Sending start game message:', message);\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket not connected');\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      console.log('Disconnecting WebSocket');\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}","map":{"version":3,"names":["axios","API_URL","WS_URL","gameService","createGame","playerCount","maxBatches","tasksPerBatch","console","log","response","post","params","player_count","max_batches","tasks_per_batch","data","game_id","checkGameExists","gameId","get","exists","joinGame","playerName","player_name","player_id","startGame","getGameState","WebSocketService","constructor","playerId","onGameUpdate","ws","reconnectAttempts","maxReconnectAttempts","connect","WebSocket","onopen","onclose","handleReconnect","onerror","error","onmessage","event","message","JSON","parse","type","gameState","setTimeout","completeTask","taskId","readyState","OPEN","task_id","send","stringify","disconnect","close"],"sources":["/Users/huanghao/Desktop/online multiplayer task game/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\n\nexport const gameService = {\n    createGame: async (playerCount: number, maxBatches: number = 4, tasksPerBatch: number[] = [20, 10, 5, 2]): Promise<string> => {\n        console.log('Creating game with params:', { playerCount, maxBatches, tasksPerBatch });\n        const response = await axios.post(`${API_URL}/games/create`, null, {\n            params: { \n                player_count: playerCount, \n                max_batches: maxBatches, \n                tasks_per_batch: tasksPerBatch \n            }\n        });\n        console.log('Game created:', response.data);\n        return response.data.game_id;\n    },\n\n    checkGameExists: async (gameId: string): Promise<boolean> => {\n        console.log('Checking if game exists:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n        console.log('Game exists response:', response.data);\n        return response.data.exists;\n    },\n\n    joinGame: async (gameId: string, playerName: string): Promise<string> => {\n        console.log('Joining game:', { gameId, playerName });\n        const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n            params: { player_name: playerName }\n        });\n        console.log('Join game response:', response.data);\n        return response.data.player_id;\n    },\n\n    startGame: async (gameId: string): Promise<void> => {\n        console.log('Starting game:', gameId);\n        await axios.post(`${API_URL}/games/${gameId}/start`);\n        console.log('Game started');\n    },\n\n    getGameState: async (gameId: string): Promise<Game> => {\n        console.log('Getting game state:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}`);\n        console.log('Game state:', response.data);\n        return response.data;\n    }\n};\n\nexport class WebSocketService {\n    private ws: WebSocket | null = null;\n    private gameId: string;\n    private playerId: string;\n    private onGameUpdate: (game: Game) => void;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = 5;\n\n    constructor(gameId: string, playerId: string, onGameUpdate: (game: Game) => void) {\n        this.gameId = gameId;\n        this.playerId = playerId;\n        this.onGameUpdate = onGameUpdate;\n        console.log('WebSocket service initialized:', { gameId, playerId });\n    }\n\n    async connect() {\n        console.log('Connecting to WebSocket...');\n        const ws = new WebSocket(`${WS_URL}/ws/${this.gameId}/${this.playerId}`);\n        \n        ws.onopen = () => {\n            console.log('WebSocket connection opened');\n            this.ws = ws;\n            this.reconnectAttempts = 0;\n            // 连接成功后立即获取游戏状态\n            this.getGameState();\n        };\n        \n        ws.onclose = () => {\n            console.log('WebSocket connection closed');\n            this.handleReconnect();\n        };\n        \n        ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n        \n        ws.onmessage = async (event) => {\n            try {\n                const message = JSON.parse(event.data);\n                console.log('WebSocket message received:', message);\n                \n                if (message.type === 'game_update' || message.type === 'player_joined' || message.type === 'game_started') {\n                    // 对于任何可能改变游戏状态的消息，都重新获取完整的游戏状态\n                    const gameState = await gameService.getGameState(this.gameId);\n                    console.log('Updated game state:', gameState);\n                    this.onGameUpdate(gameState);\n                }\n            } catch (error) {\n                console.error('Error processing WebSocket message:', error);\n            }\n        };\n    }\n\n    private async getGameState() {\n        try {\n            console.log('Getting initial game state...');\n            const gameState = await gameService.getGameState(this.gameId);\n            console.log('Initial game state:', gameState);\n            this.onGameUpdate(gameState);\n        } catch (error) {\n            console.error('Error getting game state:', error);\n        }\n    }\n\n    private handleReconnect() {\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.reconnectAttempts++;\n            console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n            setTimeout(() => this.connect(), 1000 * this.reconnectAttempts);\n        }\n    }\n\n    completeTask(taskId: string) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            const message = {\n                type: 'complete_task',\n                task_id: taskId\n            };\n            console.log('Sending complete task message:', message);\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.error('WebSocket not connected');\n        }\n    }\n\n    startGame() {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            const message = {\n                type: 'start_game'\n            };\n            console.log('Sending start game message:', message);\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.error('WebSocket not connected');\n        }\n    }\n\n    disconnect() {\n        if (this.ws) {\n            console.log('Disconnecting WebSocket');\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}