{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\nexport const gameService = {\n  createGame: async (playerCount, maxBatches, tasksPerBatch) => {\n    console.log('Creating game with params:', {\n      playerCount,\n      maxBatches,\n      tasksPerBatch\n    });\n    const response = await axios.post(`${API_URL}/games/create`, null, {\n      params: {\n        player_count: playerCount,\n        max_batches: maxBatches,\n        tasks_per_batch: tasksPerBatch\n      }\n    });\n    console.log('Game created:', response.data);\n    return response.data.game_id;\n  },\n  checkGameExists: async gameId => {\n    console.log('Checking if game exists:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n    console.log('Game exists response:', response.data);\n    return response.data.exists;\n  },\n  joinGame: async (gameId, playerName) => {\n    console.log('Joining game:', {\n      gameId,\n      playerName\n    });\n    const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n      params: {\n        player_name: playerName\n      }\n    });\n    console.log('Join game response:', response.data);\n    return response.data.player_id;\n  },\n  startGame: async gameId => {\n    console.log('Starting game:', gameId);\n    await axios.post(`${API_URL}/games/${gameId}/start`);\n    console.log('Game started');\n  },\n  getGameState: async gameId => {\n    console.log('Getting game state:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}`);\n    console.log('Game state:', response.data);\n    return response.data;\n  },\n  flipCoin: async (gameId, taskId) => {\n    console.log('Flipping coin:', {\n      gameId,\n      taskId\n    });\n    await axios.post(`${API_URL}/games/${gameId}/flip/${taskId}`);\n    console.log('Coin flipped');\n  }\n};\nexport class WebSocketService {\n  constructor(gameId, playerId, onGameUpdate) {\n    this.ws = null;\n    this.gameId = void 0;\n    this.playerId = void 0;\n    this.onGameUpdate = void 0;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.messageQueue = [];\n    this.isConnecting = false;\n    this.gameId = gameId;\n    this.playerId = playerId;\n    this.onGameUpdate = onGameUpdate;\n    console.log('WebSocket service initialized:', {\n      gameId,\n      playerId\n    });\n  }\n  connect() {\n    if (this.isConnecting || this.ws && this.ws.readyState === WebSocket.OPEN) {\n      console.log('WebSocket is already connecting or connected');\n      return;\n    }\n    this.isConnecting = true;\n    console.log('Connecting WebSocket...');\n    try {\n      this.ws = new WebSocket(`${WS_URL}/ws/${this.playerId}`);\n      this.ws.onmessage = event => {\n        try {\n          const message = JSON.parse(event.data);\n          console.log('WebSocket message received:', message);\n          if (message.type === 'game_update' || message.type === 'game_started') {\n            console.log('Updating game state:', message.data);\n            this.onGameUpdate(message.data);\n          }\n        } catch (error) {\n          console.error('Error processing WebSocket message:', error);\n        }\n      };\n      this.ws.onopen = () => {\n        console.log('WebSocket connection opened');\n        this.isConnecting = false;\n        this.reconnectAttempts = 0;\n        // Request initial game state\n        this.getGameState();\n        // Process any queued messages\n        this.processMessageQueue();\n      };\n      this.ws.onclose = () => {\n        console.log('WebSocket connection closed');\n        this.isConnecting = false;\n        this.ws = null;\n        this.handleReconnect();\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket error:', error);\n        this.isConnecting = false;\n        if (this.ws) {\n          this.ws.close();\n          this.ws = null;\n        }\n      };\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n      this.isConnecting = false;\n      this.handleReconnect();\n    }\n  }\n  async getGameState() {\n    try {\n      const gameState = await gameService.getGameState(this.gameId);\n      this.onGameUpdate(gameState);\n    } catch (error) {\n      console.error('Error getting game state:', error);\n    }\n  }\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 10000);\n      setTimeout(() => this.connect(), delay);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n  processMessageQueue() {\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift();\n      if (message) {\n        this.sendMessage(message);\n      }\n    }\n  }\n  sendMessage(message) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      console.log('Sending message:', message);\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.log('WebSocket not ready, queueing message:', message);\n      this.messageQueue.push(message);\n      this.connect();\n    }\n  }\n  completeTask(taskId) {\n    const message = {\n      type: 'complete_task',\n      game_id: this.gameId,\n      task_id: taskId\n    };\n    this.sendMessage(message);\n  }\n  disconnect() {\n    this.messageQueue = [];\n    if (this.ws) {\n      console.log('Disconnecting WebSocket');\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}","map":{"version":3,"names":["axios","API_URL","WS_URL","gameService","createGame","playerCount","maxBatches","tasksPerBatch","console","log","response","post","params","player_count","max_batches","tasks_per_batch","data","game_id","checkGameExists","gameId","get","exists","joinGame","playerName","player_name","player_id","startGame","getGameState","flipCoin","taskId","WebSocketService","constructor","playerId","onGameUpdate","ws","reconnectAttempts","maxReconnectAttempts","messageQueue","isConnecting","connect","readyState","WebSocket","OPEN","onmessage","event","message","JSON","parse","type","error","onopen","processMessageQueue","onclose","handleReconnect","onerror","close","gameState","delay","Math","min","pow","setTimeout","length","shift","sendMessage","send","stringify","push","completeTask","task_id","disconnect"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game 2/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\n const API_URL = 'http://172.20.10.4:8000';\n const WS_URL = 'ws://172.20.10.4:8000';\n\nexport const gameService = {\n    createGame: async (playerCount: number, maxBatches: number, tasksPerBatch: number): Promise<string> => {\n        console.log('Creating game with params:', { playerCount, maxBatches, tasksPerBatch });\n        const response = await axios.post(`${API_URL}/games/create`, null, {\n            params: { player_count: playerCount, max_batches: maxBatches, tasks_per_batch: tasksPerBatch }\n        });\n        console.log('Game created:', response.data);\n        return response.data.game_id;\n    },\n\n    checkGameExists: async (gameId: string): Promise<boolean> => {\n        console.log('Checking if game exists:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n        console.log('Game exists response:', response.data);\n        return response.data.exists;\n    },\n\n    joinGame: async (gameId: string, playerName: string): Promise<string> => {\n        console.log('Joining game:', { gameId, playerName });\n        const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n            params: { player_name: playerName }\n        });\n        console.log('Join game response:', response.data);\n        return response.data.player_id;\n    },\n\n    startGame: async (gameId: string): Promise<void> => {\n        console.log('Starting game:', gameId);\n        await axios.post(`${API_URL}/games/${gameId}/start`);\n        console.log('Game started');\n    },\n\n    getGameState: async (gameId: string): Promise<Game> => {\n        console.log('Getting game state:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}`);\n        console.log('Game state:', response.data);\n        return response.data;\n    },\n\n    flipCoin: async (gameId: string, taskId: string): Promise<void> => {\n        console.log('Flipping coin:', { gameId, taskId });\n        await axios.post(`${API_URL}/games/${gameId}/flip/${taskId}`);\n        console.log('Coin flipped');\n    },\n};\n\nexport class WebSocketService {\n    private ws: WebSocket | null = null;\n    private gameId: string;\n    private playerId: string;\n    private onGameUpdate: (game: Game) => void;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = 5;\n    private messageQueue: Array<{type: string, game_id: string, task_id: string}> = [];\n    private isConnecting: boolean = false;\n\n    constructor(gameId: string, playerId: string, onGameUpdate: (game: Game) => void) {\n        this.gameId = gameId;\n        this.playerId = playerId;\n        this.onGameUpdate = onGameUpdate;\n        console.log('WebSocket service initialized:', { gameId, playerId });\n    }\n\n    connect() {\n        if (this.isConnecting || (this.ws && this.ws.readyState === WebSocket.OPEN)) {\n            console.log('WebSocket is already connecting or connected');\n            return;\n        }\n\n        this.isConnecting = true;\n        console.log('Connecting WebSocket...');\n        \n        try {\n            this.ws = new WebSocket(`${WS_URL}/ws/${this.playerId}`);\n            \n            this.ws.onmessage = (event) => {\n                try {\n                    const message = JSON.parse(event.data);\n                    console.log('WebSocket message received:', message);\n                    \n                    if (message.type === 'game_update' || message.type === 'game_started') {\n                        console.log('Updating game state:', message.data);\n                        this.onGameUpdate(message.data);\n                    }\n                } catch (error) {\n                    console.error('Error processing WebSocket message:', error);\n                }\n            };\n\n            this.ws.onopen = () => {\n                console.log('WebSocket connection opened');\n                this.isConnecting = false;\n                this.reconnectAttempts = 0;\n                // Request initial game state\n                this.getGameState();\n                // Process any queued messages\n                this.processMessageQueue();\n            };\n\n            this.ws.onclose = () => {\n                console.log('WebSocket connection closed');\n                this.isConnecting = false;\n                this.ws = null;\n                this.handleReconnect();\n            };\n\n            this.ws.onerror = (error) => {\n                console.error('WebSocket error:', error);\n                this.isConnecting = false;\n                if (this.ws) {\n                    this.ws.close();\n                    this.ws = null;\n                }\n            };\n        } catch (error) {\n            console.error('Error creating WebSocket connection:', error);\n            this.isConnecting = false;\n            this.handleReconnect();\n        }\n    }\n\n    private async getGameState() {\n        try {\n            const gameState = await gameService.getGameState(this.gameId);\n            this.onGameUpdate(gameState);\n        } catch (error) {\n            console.error('Error getting game state:', error);\n        }\n    }\n\n    private handleReconnect() {\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.reconnectAttempts++;\n            console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n            const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 10000);\n            setTimeout(() => this.connect(), delay);\n        } else {\n            console.error('Max reconnection attempts reached');\n        }\n    }\n\n    private processMessageQueue() {\n        while (this.messageQueue.length > 0) {\n            const message = this.messageQueue.shift();\n            if (message) {\n                this.sendMessage(message);\n            }\n        }\n    }\n\n    private sendMessage(message: {type: string, game_id: string, task_id: string}) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            console.log('Sending message:', message);\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.log('WebSocket not ready, queueing message:', message);\n            this.messageQueue.push(message);\n            this.connect();\n        }\n    }\n\n    completeTask(taskId: string) {\n        const message = {\n            type: 'complete_task',\n            game_id: this.gameId,\n            task_id: taskId\n        };\n        this.sendMessage(message);\n    }\n\n    disconnect() {\n        this.messageQueue = [];\n        if (this.ws) {\n            console.log('Disconnecting WebSocket');\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}