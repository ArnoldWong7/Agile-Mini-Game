{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Tabs, Tab, Alert, Chip, Stack, TableContainer, Table, TableHead, TableBody, TableCell, TableRow, Paper, Container, CircularProgress, IconButton, List, ListItem, ListItemText } from '@mui/material';\nimport { TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport HelpIcon from '@mui/icons-material/Help';\n\n// 添加类型定义\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Game = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  const [gameId, setGameId] = useState(initialGameId);\n  const [game, setGame] = useState(null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerId, setPlayerId] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n  const [playerCount, setPlayerCount] = useState(2);\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(20);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showResultPage, setShowResultPage] = useState(false);\n  const [batchCompletionTimes, setBatchCompletionTimes] = useState({});\n  const [batchStartTimes, setBatchStartTimes] = useState({});\n  const [batchFlipStates, setBatchFlipStates] = useState({});\n  const [flipCoins, setFlipCoins] = useState([]);\n  const syncFlippedCoins = taskId => {\n    if (!flipCoins.includes(taskId)) {\n      setFlipCoins(prev => [...prev, taskId]);\n    }\n  };\n\n  // 修改翻转状态的类型定义，加入玩家ID\n  const [flippedCoins, setFlippedCoins] = useState({});\n  const [pendingBatchCompletion, setPendingBatchCompletion] = useState({});\n\n  // 添加翻转动画状态\n\n  const [flipStates, setFlipStates] = useState({});\n\n  // 添加翻转动画状态\n  const [flippingCoins, setFlippingCoins] = useState({});\n\n  // 修改计时器状态和开始时间状态\n  const [elapsedTime, setElapsedTime] = useState(0);\n\n  // 添加批次统计时间的状态\n  const [batchStats, setBatchStats] = useState({});\n\n  // 添加当前子批次的useEffect\n  const [currentSubBatch, setCurrentSubBatch] = useState(0);\n\n  // 添加已完成子批次的状态\n  const [completedSubBatches, setCompletedSubBatches] = useState(new Set());\n\n  // 添加永久翻转状态的记录\n  const [permanentFlippedCoins, setPermanentFlippedCoins] = useState({});\n  const [showHelpDialog, setShowHelpDialog] = useState(false);\n\n  // 添加一个新的state来跟踪每个批次的累计时间\n  const [batchElapsedTimes, setBatchElapsedTimes] = useState({});\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, updatedGame => {\n        console.log('Game state updated:', updatedGame);\n        setGame(updatedGame);\n      }, syncFlippedCoins);\n      service.connect();\n      setWsService(service);\n\n      // Cleanup function\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  useEffect(() => {\n    let timerInterval = null;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && playerId) {\n      timerInterval = setInterval(() => {\n        const currentPlayer = game.players.find(p => p.id === playerId);\n        if ((currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.status) === PlayerStatus.ACTIVE) {\n          const currentBatch = currentPlayer.current_batch;\n          const previousTime = (batchElapsedTimes[currentBatch] || {})[playerId] || 0;\n          const currentTime = Date.now();\n          const batchStartTime = (batchStartTimes[currentBatch] || {})[currentBatch];\n          if (batchStartTime) {\n            const newElapsed = currentTime - batchStartTime + previousTime;\n            setBatchElapsedTimes(prev => ({\n              ...prev,\n              [currentBatch]: {\n                ...(prev[currentBatch] || {}),\n                [playerId]: newElapsed\n              }\n            }));\n            setCurrentTime(newElapsed);\n          }\n        }\n      }, 1000);\n    }\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'completed' && startTime && !endTime) {\n      setEndTime(Date.now());\n      setShowResultPage(true);\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime, endTime, game === null || game === void 0 ? void 0 : game.players, playerId, batchStartTimes, batchElapsedTimes]);\n  useEffect(() => {\n    let intervalId;\n    if (startTime && (game === null || game === void 0 ? void 0 : game.status) === 'in_progress') {\n      intervalId = setInterval(() => {\n        setElapsedTime(prev => Date.now() - startTime);\n      }, 1000);\n    }\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [startTime, game === null || game === void 0 ? void 0 : game.status]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && game.players) {\n      const newStartTimes = {\n        ...batchStartTimes\n      };\n      const newCompletionTimes = {\n        ...batchCompletionTimes\n      };\n      let hasChanges = false;\n      game.players.forEach(player => {\n        var _newCompletionTimes$p;\n        // 获取玩家当前批次的所有任务\n        const currentBatchTasks = game.tasks.filter(t => t.batch_number === player.current_batch && t.assigned_to === player.id);\n\n        // 检查是否有新的子批次任务（所有任务都是PENDING状态）\n        if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n          const currentTime = Date.now();\n          if (!newStartTimes[player.current_batch]) {\n            newStartTimes[player.current_batch] = {};\n          }\n          // 更新开始时间，确保计时器继续\n          newStartTimes[player.current_batch][player.current_batch] = currentTime;\n          hasChanges = true;\n          // 更新全局startTime\n          setStartTime(currentTime);\n        }\n\n        // 处理批次完成时间\n        if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.COMPLETED) && !((_newCompletionTimes$p = newCompletionTimes[player.current_batch]) !== null && _newCompletionTimes$p !== void 0 && _newCompletionTimes$p[player.id])) {\n          var _newStartTimes$player;\n          if (!newCompletionTimes[player.current_batch]) {\n            newCompletionTimes[player.current_batch] = {};\n          }\n          const batchStartTime = (_newStartTimes$player = newStartTimes[player.current_batch]) === null || _newStartTimes$player === void 0 ? void 0 : _newStartTimes$player[player.current_batch];\n          if (batchStartTime) {\n            newCompletionTimes[player.current_batch][player.id] = Date.now() - batchStartTime;\n            hasChanges = true;\n          }\n        }\n      });\n      if (hasChanges) {\n        setBatchStartTimes(newStartTimes);\n        setBatchCompletionTimes(newCompletionTimes);\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players]);\n\n  // 添加一个新的useEffect来监听游戏状态变化\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && playerId) {\n      const currentPlayer = game.players.find(p => p.id === playerId);\n      if (currentPlayer) {\n        const currentBatchTasks = game.tasks.filter(t => t.batch_number === currentPlayer.current_batch && t.assigned_to === playerId);\n\n        // 如果玩家有新的PENDING任务，确保计时器在运行\n        if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n          const currentTime = Date.now();\n          setStartTime(currentTime);\n        }\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players, playerId]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks) {\n      let shouldUpdate = false;\n      const newFlippedCoins = {\n        ...flippedCoins\n      };\n\n      // 检查是否有新的批次开始\n      game.players.forEach(player => {\n        const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n        const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n\n        // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n        if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n          // 清理上一个批次的翻转状态\n          const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n          const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n          if (newFlippedCoins[player.id]) {\n            newFlippedCoins[player.id] = newFlippedCoins[player.id].filter(id => !prevBatchTaskIds.includes(id));\n            shouldUpdate = true;\n          }\n        }\n      });\n\n      // 只在有变化时更新状态\n      if (shouldUpdate) {\n        setFlippedCoins(newFlippedCoins);\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks]);\n\n  // 修改游戏状态更新的effect，确保永久翻转的硬币不会被重置\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && playerId) {\n      const currentPlayer = game.players.find(p => p.id === playerId);\n      if (!currentPlayer) return;\n      const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n      const currentBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch);\n      const shouldUpdateFlips = currentBatchTasks.some(t => t.status === TaskStatus.COMPLETED) || currentBatchTasks.every(t => t.status === TaskStatus.PENDING);\n      if (shouldUpdateFlips) {\n        setFlippedCoins(prev => {\n          const otherPlayersStates = {\n            ...prev\n          };\n          const permanentFlips = permanentFlippedCoins[playerId] || [];\n          const completedTaskIds = playerTasks.filter(t => t.status === TaskStatus.COMPLETED).map(t => t.id);\n\n          // 使用Array.from替代Set的扩展运算符\n          const allFlippedCoins = Array.from(new Set([...permanentFlips, ...completedTaskIds]));\n          return {\n            ...otherPlayersStates,\n            [playerId]: allFlippedCoins\n          };\n        });\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, playerId, permanentFlippedCoins]);\n\n  // 修改handleCoinFlip函数，记录永久翻转状态\n  const handleCoinFlip = taskId => {\n    if (!playerId) return;\n\n    // 立即更新当前玩家的翻转状态\n    setFlippedCoins(prev => {\n      const currentPlayerFlips = prev[playerId] || [];\n      if (!currentPlayerFlips.includes(taskId)) {\n        // 同时更新永久翻转状态\n        setPermanentFlippedCoins(prevPermanent => ({\n          ...prevPermanent,\n          [playerId]: [...(prevPermanent[playerId] || []), taskId]\n        }));\n        return {\n          ...prev,\n          [playerId]: [...currentPlayerFlips, taskId]\n        };\n      }\n      return prev;\n    });\n    gameService.syncFlipCoin(gameId || '', taskId);\n    // 设置翻转动画\n    setFlippingCoins(prev => ({\n      ...prev,\n      [taskId]: {\n        isFlipping: true\n      }\n    }));\n    setTimeout(() => {\n      setFlippingCoins(prev => ({\n        ...prev,\n        [taskId]: {\n          isFlipping: false\n        }\n      }));\n    }, 500);\n  };\n\n  // 处理批次完成\n  const handleCompleteBatch = batchNum => {\n    const pendingTasks = pendingBatchCompletion[batchNum] || [];\n    if (pendingTasks.length === 0) return;\n\n    // 发送所有任务完成的请求\n    pendingTasks.forEach(taskId => {\n      if (wsService) {\n        wsService.completeTask(taskId);\n      }\n    });\n\n    // 清理这个批次的待完成状态\n    setPendingBatchCompletion(prev => {\n      const newState = {\n        ...prev\n      };\n      delete newState[batchNum];\n      return newState;\n    });\n  };\n\n  // 修改渲染硬币的函数\n  const renderCoin = (type, isFlipping, isSmall = false, onClick, taskId) => {\n    if (!taskId) return null;\n    const flipState = taskId ? flippingCoins[taskId] : undefined;\n    const isFlipped = taskId && playerId && flippedCoins[playerId] ? flippedCoins[playerId].includes(taskId) : false;\n\n    // 决定显示哪一面\n    let displayType = isFlipped ? type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS : type;\n    if (flipCoins.includes(taskId)) displayType = TaskType.HEADS;else displayType = TaskType.TAILS;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: isSmall ? 20 : 32,\n        height: isSmall ? 20 : 32,\n        borderRadius: '50%',\n        backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n        border: `${isSmall ? 1 : 2}px solid #B8860B`,\n        color: '#704214',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 'bold',\n        fontSize: isSmall ? '0.6rem' : '0.8rem',\n        perspective: 1000,\n        mb: isSmall ? 0 : 1,\n        position: 'relative',\n        cursor: onClick ? 'pointer' : 'default',\n        transition: 'transform 0.6s',\n        transformStyle: 'preserve-3d',\n        transform: flipState !== null && flipState !== void 0 && flipState.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n        '&:hover': onClick ? {\n          transform: 'scale(1.05)',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n        } : {},\n        '&:active': onClick ? {\n          transform: 'scale(0.95)'\n        } : {},\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          borderRadius: '50%',\n          background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n          pointerEvents: 'none'\n        }\n      },\n      onClick: onClick,\n      children: displayType === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 监听游戏状态变化\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && playerId) {\n      const currentPlayer = game.players.find(p => p.id === playerId);\n      if (!currentPlayer) return;\n      const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n      const currentBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch);\n\n      // 只有当前玩家的新批次开始时才清理状态\n      if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n        // 清理当前玩家上一个批次的翻转状态\n        const prevBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch - 1);\n        const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n        setFlippedCoins(prev => {\n          var _prev$playerId;\n          return {\n            ...prev,\n            [playerId]: ((_prev$playerId = prev[playerId]) === null || _prev$playerId === void 0 ? void 0 : _prev$playerId.filter(id => !prevBatchTaskIds.includes(id))) || []\n          };\n        });\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, playerId]);\n\n  // 检查当前批次是否可以执行\n  const canExecuteBatch = (batchNum, subBatchIndex) => {\n    if (!game || !playerId) return false;\n\n    // 获取当前玩家的所有任务\n    const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n\n    // 获取所有之前的子批次\n    const previousSubBatches = playerTasks.filter(t => t.batch_number < batchNum || t.batch_number === batchNum && t.sub_batch_number < subBatchIndex);\n\n    // 如果还有之前的子批次未完成，则不能执行当前批次\n    return !previousSubBatches.some(t => t.status !== TaskStatus.COMPLETED);\n  };\n\n  // 修改renderTaskRow函数中的按钮显示逻辑\n  const renderTaskRow = (tasks, batchNum, playerStatus) => {\n    if (playerStatus === PlayerStatus.WAITING) {\n      return /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: \"Waiting for your turn...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 17\n      }, this);\n    }\n    const structure = getBatchStructure(batchNum);\n    const currentPlayer = game === null || game === void 0 ? void 0 : game.players.find(p => p.id === playerId);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: structure.map(({\n        subBatchIndex,\n        coinsCount\n      }) => {\n        var _subBatchTasks$;\n        const subBatchTasks = tasks.filter(t => t.sub_batch_number === subBatchIndex);\n        if (subBatchTasks.length === 0) return null;\n        const currentBatchTarget = ((_subBatchTasks$ = subBatchTasks[0]) === null || _subBatchTasks$ === void 0 ? void 0 : _subBatchTasks$.type) || TaskType.HEADS;\n        const flippedCount = playerId && flippedCoins[playerId] ? subBatchTasks.filter(t => flippedCoins[playerId].includes(t.id)).length : 0;\n        const isComplete = isSubBatchComplete(batchNum, subBatchIndex, (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.id) || '');\n        const canExecute = canExecuteBatch(batchNum, subBatchIndex);\n\n        // 检查是否是当前活动的子批次\n        const isActiveSubBatch = (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.status) === PlayerStatus.ACTIVE && canExecute && !isComplete;\n\n        // 检查子批次是否已经完成并提交\n        const isSubmitted = subBatchTasks.every(t => t.status === TaskStatus.COMPLETED);\n        // 使用包含玩家ID的buttonKey确保按钮状态的独立性\n        const buttonKey = `${playerId}-${batchNum}-${subBatchIndex}`;\n        const isButtonDisabled = completedSubBatches.has(buttonKey);\n        return /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center',\n              mb: 1\n            },\n            children: isComplete && (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.status) === PlayerStatus.ACTIVE && !isSubmitted && !isButtonDisabled && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              size: \"small\",\n              onClick: () => handleCompleteSubBatch(batchNum, subBatchIndex),\n              disabled: !canExecute,\n              children: \"Complete this batch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 1,\n              opacity: isActiveSubBatch ? 1 : 0.5,\n              pointerEvents: isActiveSubBatch ? 'auto' : 'none'\n            },\n            children: subBatchTasks.map(task => {\n              var _flippingCoins$task$i;\n              return /*#__PURE__*/_jsxDEV(Box, {\n                children: renderCoin(task.type, ((_flippingCoins$task$i = flippingCoins[task.id]) === null || _flippingCoins$task$i === void 0 ? void 0 : _flippingCoins$task$i.isFlipping) || false, false, isActiveSubBatch ? () => handleCoinFlip(task.id) : undefined, task.id)\n              }, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 559,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 29\n          }, this)]\n        }, buttonKey, true, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染玩家卡片\n  const renderPlayer = player => {\n    var _currentBatchTasks$;\n    const currentBatchTasks = (game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === player.current_batch && t.assigned_to === player.id)) || [];\n    const currentBatchTarget = (_currentBatchTasks$ = currentBatchTasks[0]) === null || _currentBatchTasks$ === void 0 ? void 0 : _currentBatchTasks$.type;\n    const requiredCoins = getRequiredCoinsForBatch(player.current_batch);\n    const currentFlippedCount = currentBatchTasks.filter(t => {\n      var _flippedCoins$player$;\n      return (_flippedCoins$player$ = flippedCoins[player.id]) === null || _flippedCoins$player$ === void 0 ? void 0 : _flippedCoins$player$.includes(t.id);\n    }).length;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: player.status,\n            color: player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\",\n            size: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2,\n            bgcolor: 'background.default',\n            p: 2,\n            borderRadius: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              mb: 1\n            },\n            children: [\"Current Round: \", player.current_batch, \" / \", game === null || game === void 0 ? void 0 : game.max_batches, currentBatchTarget && player.status === PlayerStatus.ACTIVE && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                mt: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  mr: 1\n                },\n                children: \"Required flips:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 607,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  ml: 2\n                },\n                children: requiredCoins\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: renderTaskRow(currentBatchTasks, player.current_batch, player.status)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 17\n      }, this)\n    }, player.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 13\n    }, this);\n  };\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(20);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n\n  // 添加一个辅助函数来处理毫秒到时间的转换\n  const formatTimeFromMs = ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTimeFromMs(endTime - startTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteGame = () => {\n    setShowResultPage(true);\n  };\n\n  // 修改返回主菜单的处理函数\n  const handleReturnToMainMenu = () => {\n    // 清除游戏状态\n    setGameId('');\n    setGame(null);\n    setWsService(null);\n    setStartTime(null);\n    setEndTime(null);\n    // 清除输入记录\n    setPlayerName('');\n    setPlayerCount(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const renderResultPage = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 600,\n          width: '100%',\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            mb: 3,\n            color: 'primary.main'\n          },\n          children: \"Game Complete! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            mb: 4\n          },\n          children: [\"Total Time: \", formatTimeFromMs(totalTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMainMenu,\n          size: \"large\",\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 13\n    }, this);\n  };\n  const renderStatistics = () => {\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mb: 2,\n          color: 'primary.main'\n        },\n        children: \"Game Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 17\n      }, this), Array.from({\n        length: game.max_batches\n      }, (_, i) => i + 1).map(batchNum => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: [\"Round \", batchNum]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          sx: {\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Player\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 799,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 800,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 801,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 798,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 797,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [game.players.map(player => {\n                var _player$batch_start_t, _player$batch_complet, _player$batch_start_t2;\n                const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n                const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                const hasStarted = ((_player$batch_start_t = player.batch_start_time) === null || _player$batch_start_t === void 0 ? void 0 : _player$batch_start_t[batchNum]) != null;\n                const completionTime = (_player$batch_complet = player.batch_completion_time) === null || _player$batch_complet === void 0 ? void 0 : _player$batch_complet[batchNum];\n                const startTime = (_player$batch_start_t2 = player.batch_start_time) === null || _player$batch_start_t2 === void 0 ? void 0 : _player$batch_start_t2[batchNum];\n\n                // 计算当前时间（如果批次已开始但未完成）\n                let displayTime = '-';\n                if (completionTime) {\n                  displayTime = formatTimeFromMs(completionTime);\n                } else if (hasStarted && startTime) {\n                  const currentTime = Date.now() - startTime;\n                  displayTime = formatTimeFromMs(currentTime);\n                }\n                let status = 'Pending';\n                if (isCompleted) {\n                  status = 'Completed';\n                } else if (hasStarted) {\n                  status = 'In Progress';\n                }\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: player.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 833,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: displayTime\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 834,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: /*#__PURE__*/_jsxDEV(Chip, {\n                      label: status,\n                      size: \"small\",\n                      color: isCompleted ? 'success' : hasStarted ? 'primary' : 'default'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 836,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 835,\n                    columnNumber: 49\n                  }, this)]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 832,\n                  columnNumber: 45\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(TableRow, {\n                sx: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                },\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 846,\n                    columnNumber: 52\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 846,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: formatTimeFromMs(game.players.reduce((sum, p) => {\n                      var _p$batch_completion_t;\n                      return sum + (((_p$batch_completion_t = p.batch_completion_time) === null || _p$batch_completion_t === void 0 ? void 0 : _p$batch_completion_t[batchNum]) || 0);\n                    }, 0))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 848,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 847,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 855,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 845,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 804,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 796,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 25\n        }, this)]\n      }, batchNum, true, {\n        fileName: _jsxFileName,\n        lineNumber: 791,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 786,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 使用useMemo来记忆计算结果\n  const getTasksForBatch = React.useMemo(() => {\n    if (!(game !== null && game !== void 0 && game.tasks)) return {};\n    const tasksByBatch = {};\n    game.tasks.forEach(task => {\n      if (!tasksByBatch[task.batch_number]) {\n        tasksByBatch[task.batch_number] = [];\n      }\n      tasksByBatch[task.batch_number].push(task);\n    });\n    return tasksByBatch;\n  }, [game === null || game === void 0 ? void 0 : game.tasks]);\n\n  // 使用useMemo来记忆玩家任务\n  const getPlayerTasks = React.useMemo(() => {\n    if (!(game !== null && game !== void 0 && game.tasks) || !(game !== null && game !== void 0 && game.players)) return {};\n    const playerTasks = {};\n    game.players.forEach(player => {\n      playerTasks[player.id] = game.tasks.filter(t => t.assigned_to === player.id);\n    });\n    return playerTasks;\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players]);\n  useEffect(() => {\n    if (!(game !== null && game !== void 0 && game.tasks) || !startTime) return;\n    const newStats = {\n      ...batchStats\n    };\n\n    // 遍历每个批次\n    for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n      if (!newStats[batchNum]) {\n        newStats[batchNum] = {};\n      }\n\n      // 遍历每个玩家\n      game.players.forEach(player => {\n        const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n        const completedTasks = batchTasks.filter(t => t.status === TaskStatus.COMPLETED);\n\n        // 如果这个批次的所有任务都完成了，记录完成时间\n        if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n          // 只在第一次完成时记录时间\n          if (!newStats[batchNum][player.id]) {\n            newStats[batchNum][player.id] = {\n              completionTime: elapsedTime,\n              tasksCompleted: completedTasks.length,\n              totalTasks: batchTasks.length\n            };\n          }\n        } else if (batchTasks.length > 0) {\n          // 更新进行中的任务状态\n          newStats[batchNum][player.id] = {\n            completionTime: 0,\n            tasksCompleted: completedTasks.length,\n            totalTasks: batchTasks.length\n          };\n        }\n      });\n    }\n    setBatchStats(newStats);\n  }, [game === null || game === void 0 ? void 0 : game.tasks, startTime, elapsedTime]);\n  useEffect(() => {\n    if (!(game !== null && game !== void 0 && game.tasks) || !startTime) return;\n    const newCompletionTimes = {\n      ...batchCompletionTimes\n    };\n    const newStartTimes = {\n      ...batchStartTimes\n    };\n    let hasChanges = false;\n    Object.entries(getTasksForBatch).forEach(([batchNum, tasks]) => {\n      const batchNumber = parseInt(batchNum);\n      if (!newStartTimes[batchNumber]) {\n        newStartTimes[batchNumber] = {};\n        hasChanges = true;\n      }\n      if (!newCompletionTimes[batchNumber]) {\n        newCompletionTimes[batchNumber] = {};\n        hasChanges = true;\n      }\n      game.players.forEach(player => {\n        const playerTasks = tasks.filter(t => t.assigned_to === player.id);\n        if (playerTasks.length > 0 && playerTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[batchNumber][player.id]) {\n          var _newStartTimes$batchN;\n          const batchStartTime = (_newStartTimes$batchN = newStartTimes[batchNumber]) === null || _newStartTimes$batchN === void 0 ? void 0 : _newStartTimes$batchN[batchNumber];\n          newCompletionTimes[batchNumber][player.id] = Date.now() - batchStartTime;\n          hasChanges = true;\n        }\n      });\n    });\n\n    // 只在有变化时更新状态\n    if (hasChanges) {\n      setBatchStartTimes(newStartTimes);\n      setBatchCompletionTimes(newCompletionTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.players, getTasksForBatch, startTime]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && startTime) {\n      const newStats = {\n        ...batchStats\n      };\n\n      // 遍历每个批次\n      for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n        if (!newStats[batchNum]) {\n          newStats[batchNum] = {};\n        }\n\n        // 遍历每个玩家\n        game.players.forEach(player => {\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const completedTasks = batchTasks.filter(t => t.status === TaskStatus.COMPLETED);\n\n          // 如果这个批次的所有任务都完成了，记录完成时间\n          if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n            // 只在第一次完成时记录时间\n            if (!newStats[batchNum][player.id]) {\n              newStats[batchNum][player.id] = {\n                completionTime: elapsedTime,\n                tasksCompleted: completedTasks.length,\n                totalTasks: batchTasks.length\n              };\n            }\n          } else if (batchTasks.length > 0) {\n            // 更新进行中的任务状态\n            newStats[batchNum][player.id] = {\n              completionTime: 0,\n              tasksCompleted: completedTasks.length,\n              totalTasks: batchTasks.length\n            };\n          }\n        });\n      }\n      setBatchStats(newStats);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, startTime, elapsedTime]);\n\n  // 修改统计页面中的完成时间显示\n  const renderBatchStatistics = (batchNum, player) => {\n    var _batchStats$batchNum;\n    const stats = (_batchStats$batchNum = batchStats[batchNum]) === null || _batchStats$batchNum === void 0 ? void 0 : _batchStats$batchNum[player.id];\n    return /*#__PURE__*/_jsxDEV(TableRow, {\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        children: player.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1024,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        children: stats !== null && stats !== void 0 && stats.completionTime ? formatTimeFromMs(stats.completionTime) : '-'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1025,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        children: [stats === null || stats === void 0 ? void 0 : stats.tasksCompleted, \"/\", (stats === null || stats === void 0 ? void 0 : stats.totalTasks) || 0]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1028,\n        columnNumber: 17\n      }, this)]\n    }, player.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1023,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染主菜单\n  const renderMainMenu = () => /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 600,\n      width: '100%',\n      mx: 'auto',\n      mt: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n        p: 4,\n        borderTopLeftRadius: 8,\n        borderTopRightRadius: 8,\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => setShowHelpDialog(true),\n        sx: {\n          position: 'absolute',\n          top: 8,\n          right: 8,\n          color: 'primary.main'\n        },\n        children: /*#__PURE__*/_jsxDEV(HelpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1060,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1051,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        sx: {\n          fontWeight: 'bold',\n          background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent',\n          textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n          textAlign: 'center',\n          mb: 1\n        },\n        children: \"Online Multiplayer Coin Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1062,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"text.secondary\",\n        align: \"center\",\n        children: \"Flip coins with your friends in this multiplayer game!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1073,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1044,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        background: '#ffffff',\n        p: 4,\n        borderBottomLeftRadius: 8,\n        borderBottomRightRadius: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Tabs, {\n        value: activeTab,\n        onChange: (e, newValue) => {\n          setActiveTab(newValue);\n          // 切换标签时也清除输入\n          setPlayerName('');\n          setPlayerCount(2);\n          setJoinGameId('');\n          setError(null);\n        },\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"CREATE GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1093,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"JOIN GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1094,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1085,\n        columnNumber: 17\n      }, this), activeTab === 0 ?\n      /*#__PURE__*/\n      // Create game form\n      _jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleCreateGame,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Name\",\n          required: true,\n          value: playerName,\n          onChange: e => setPlayerName(e.target.value),\n          sx: {\n            mb: 2\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1100,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Number of Players\",\n          type: \"number\",\n          required: true,\n          value: playerCount,\n          onChange: e => setPlayerCount(Number(e.target.value)),\n          inputProps: {\n            min: 2,\n            max: 5\n          },\n          helperText: \"Minimum 2, maximum 5 players\",\n          sx: {\n            mb: 3\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1109,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: !playerName || playerCount < 2 || playerCount > 5,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1121,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1099,\n        columnNumber: 21\n      }, this) :\n      /*#__PURE__*/\n      // Join game form\n      _jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleJoinGame,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Name\",\n          required: true,\n          value: playerName,\n          onChange: e => setPlayerName(e.target.value),\n          sx: {\n            mb: 2\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1133,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Game Code\",\n          required: true,\n          value: joinGameId,\n          onChange: e => setJoinGameId(e.target.value),\n          sx: {\n            mb: 3\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1142,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: !playerName || !joinGameId,\n          children: \"Join Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1151,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1132,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1079,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1037,\n    columnNumber: 9\n  }, this);\n  const renderHelpDialog = () => {\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showHelpDialog,\n      onClose: () => setShowHelpDialog(false),\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Game Instructions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(List, {\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: \"Game Overview\",\n              secondary: \"This is a multiplayer coin flipping game where players take turns flipping coins to complete specific patterns.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1179,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1178,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: \"Game Setup\",\n              secondary: \"1. Create a new game or join an existing one using the game code 2. Wait for all players to join 3. The game creator can start the game when everyone is ready\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1185,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1184,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: \"Gameplay\",\n              secondary: \"1. Each player takes turns flipping coins 2. The goal is to flip coins to match the required pattern 3. Complete all batches to win the game 4. The game tracks completion time for each round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1193,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1192,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: \"Controls\",\n              secondary: \"1. Click on coins to flip them 2. Use the 'Complete Batch' button when you've finished a batch 3. The game automatically tracks your progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1202,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1201,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1177,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowHelpDialog(false),\n          color: \"primary\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1212,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1211,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1167,\n      columnNumber: 13\n    }, this);\n  };\n  const renderGame = () => {\n    var _game$players$;\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 1,\n              color: 'primary.main'\n            },\n            children: [\"Game ID: \", game.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1233,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              color: 'text.primary'\n            },\n            children: [\"Status: \", game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1236,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1232,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1226,\n        columnNumber: 17\n      }, this), game.status === 'waiting' && playerId === ((_game$players$ = game.players[0]) === null || _game$players$ === void 0 ? void 0 : _game$players$.id) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartGame,\n        sx: {\n          mb: 3\n        },\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1244,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 3,\n            children: game.players.map(renderPlayer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1257,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1256,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: renderStatistics()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1263,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1254,\n        columnNumber: 17\n      }, this), game.status === 'completed' && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4,\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMainMenu,\n          sx: {\n            minWidth: 200,\n            borderRadius: 2\n          },\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1271,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1270,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1224,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 获取每轮需要翻转的硬币数量\n  const getRequiredCoinsForBatch = batchNum => {\n    return 20; // 所有批次都需要20个硬币\n  };\n\n  // 获取每轮的子批次结构\n  const getBatchStructure = batchNum => {\n    const structure = {\n      1: [{\n        subBatchIndex: 0,\n        coinsCount: 20\n      }],\n      // 第1轮：1个批次×20枚\n      2: [\n      // 第2轮：2个批次×10枚\n      {\n        subBatchIndex: 0,\n        coinsCount: 10\n      }, {\n        subBatchIndex: 1,\n        coinsCount: 10\n      }],\n      3: [\n      // 第3轮：4个批次×5枚\n      {\n        subBatchIndex: 0,\n        coinsCount: 5\n      }, {\n        subBatchIndex: 1,\n        coinsCount: 5\n      }, {\n        subBatchIndex: 2,\n        coinsCount: 5\n      }, {\n        subBatchIndex: 3,\n        coinsCount: 5\n      }],\n      4: Array.from({\n        length: 10\n      }, (_, i) => ({\n        // 第4轮：10个批次×2枚\n        subBatchIndex: i,\n        coinsCount: 2\n      }))\n    };\n    return structure[batchNum] || [];\n  };\n\n  // 获取当前子批次的硬币数量\n  const getSubBatchSize = (batchNum, subBatchIndex) => {\n    const structure = getBatchStructure(batchNum);\n    const subBatch = structure.find(sb => sb.subBatchIndex === subBatchIndex);\n    return (subBatch === null || subBatch === void 0 ? void 0 : subBatch.coinsCount) || 0;\n  };\n\n  // 修改isSubBatchComplete函数\n  const isSubBatchComplete = (batchNum, subBatchIndex, currentPlayerId) => {\n    if (!game) return false;\n    const subBatchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.sub_batch_number === subBatchIndex && t.assigned_to === currentPlayerId);\n    const flippedCount = subBatchTasks.filter(t => {\n      var _flippedCoins$current;\n      return (_flippedCoins$current = flippedCoins[currentPlayerId]) === null || _flippedCoins$current === void 0 ? void 0 : _flippedCoins$current.includes(t.id);\n    }).length;\n    return flippedCount >= getSubBatchSize(batchNum, subBatchIndex);\n  };\n\n  // 添加错误处理函数\n  const handleGameUpdate = updatedGame => {\n    setGame(updatedGame);\n    if (updatedGame.status === 'completed' && !endTime) {\n      setEndTime(Date.now());\n    }\n  };\n\n  // 添加创建游戏的处理函数\n  const handleCreateGame = async e => {\n    e.preventDefault();\n    try {\n      setError(null);\n      // 固定为4轮游戏，每轮20个硬币\n      const gameId = await gameService.createGame(playerCount, 4, 20);\n      if (gameId) {\n        // 加入游戏\n        const playerId = await gameService.joinGame(gameId, playerName);\n\n        // 更新状态\n        setGameId(gameId);\n        setPlayerId(playerId);\n\n        // 创建WebSocket连接\n        const ws = new WebSocketService(gameId, playerName, handleGameUpdate, syncFlippedCoins);\n        setWsService(ws);\n\n        // 获取初始游戏状态\n        const initialGameState = await gameService.getGameState(gameId);\n        setGame(initialGameState);\n\n        // 设置开始时间\n        setStartTime(Date.now());\n        console.log('Game created successfully:', {\n          gameId,\n          playerId\n        });\n      }\n    } catch (err) {\n      console.error('Error creating game:', err);\n      setError(err instanceof Error ? err.message : 'Failed to create game');\n    }\n  };\n\n  // 添加加入游戏的处理函数\n  const handleJoinGame = async e => {\n    e.preventDefault();\n    try {\n      setError(null);\n      if (joinGameId) {\n        // 检查游戏是否存在\n        const exists = await gameService.checkGameExists(joinGameId);\n        if (!exists) {\n          setError('Game not found');\n          return;\n        }\n\n        // 加入游戏\n        const playerId = await gameService.joinGame(joinGameId, playerName);\n\n        // 更新状态\n        setGameId(joinGameId);\n        setPlayerId(playerId);\n\n        // 创建WebSocket连接\n        const ws = new WebSocketService(joinGameId, playerName, handleGameUpdate, syncFlippedCoins);\n        setWsService(ws);\n\n        // 获取游戏状态\n        const gameState = await gameService.getGameState(joinGameId);\n        setGame(gameState);\n\n        // 设置开始时间\n        setStartTime(Date.now());\n        console.log('Joined game successfully:', {\n          gameId: joinGameId,\n          playerId\n        });\n      }\n    } catch (err) {\n      console.error('Error joining game:', err);\n      setError(err instanceof Error ? err.message : 'Failed to join game');\n    }\n  };\n\n  // 添加开始游戏的处理函数\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      const currentTime = Date.now();\n      setStartTime(currentTime);\n      setBatchStartTimes(prev => ({\n        ...prev,\n        1: {\n          1: currentTime\n        }\n      }));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to start game');\n    }\n  };\n\n  // 修改handleCompleteSubBatch函数，记录永久翻转状态\n  const handleCompleteSubBatch = async (batchNum, subBatchIndex) => {\n    if (!game || !playerId || !wsService) return;\n    try {\n      if (!canExecuteBatch(batchNum, subBatchIndex)) {\n        setError('Please complete previous batches first');\n        return;\n      }\n      const subBatchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.sub_batch_number === subBatchIndex && t.assigned_to === playerId);\n      const buttonKey = `${playerId}-${batchNum}-${subBatchIndex}`;\n      setCompletedSubBatches(prev => {\n        const newSet = new Set(Array.from(prev));\n        newSet.add(buttonKey);\n        return newSet;\n      });\n\n      // 完成当前子批次的任务\n      for (const task of subBatchTasks) {\n        await wsService.completeTask(task.id);\n      }\n\n      // 检查是否完成了当前批次的所有子批次\n      const allSubBatchesInCurrentBatch = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === playerId);\n      const allSubBatchesCompleted = allSubBatchesInCurrentBatch.every(t => t.status === TaskStatus.COMPLETED);\n\n      // 如果完成了当前批次的所有子批次，设置下一批次的开始时间\n      if (allSubBatchesCompleted && batchNum < game.max_batches) {\n        const nextBatchNum = batchNum + 1;\n        const currentTime = Date.now();\n        setBatchStartTimes(prev => ({\n          ...prev,\n          [nextBatchNum]: {\n            ...prev[nextBatchNum],\n            [nextBatchNum]: currentTime\n          }\n        }));\n        // 更新全局startTime\n        setStartTime(currentTime);\n      }\n\n      // 更新永久翻转状态\n      const permanentFlips = permanentFlippedCoins[playerId] || [];\n      const currentFlips = flippedCoins[playerId] || [];\n      const allFlips = Array.from(new Set([...permanentFlips, ...currentFlips]));\n      setFlippedCoins(prev => ({\n        ...prev,\n        [playerId]: allFlips\n      }));\n\n      // 保存当前批次的累计时间\n      const batchStartTime = (batchStartTimes[batchNum] || {})[batchNum];\n      if (batchStartTime) {\n        const previousTime = (batchElapsedTimes[batchNum] || {})[playerId] || 0;\n        const elapsedTime = currentTime - batchStartTime + previousTime;\n        setBatchElapsedTimes(prev => ({\n          ...prev,\n          [batchNum]: {\n            ...(prev[batchNum] || {}),\n            [playerId]: elapsedTime\n          }\n        }));\n      }\n    } catch (error) {\n      console.error('Error completing sub-batch:', error);\n      setError('Failed to complete sub-batch');\n    }\n  };\n\n  // 添加一个新的useEffect来处理新任务的接收\n  useEffect(() => {\n    if (!game || !playerId) return;\n    const currentPlayer = game.players.find(p => p.id === playerId);\n    if (!currentPlayer) return;\n    const currentBatchTasks = game.tasks.filter(t => t.batch_number === currentPlayer.current_batch && t.assigned_to === playerId);\n\n    // 当收到新的PENDING任务时，设置新的开始时间\n    if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.PENDING) && currentPlayer.status === PlayerStatus.ACTIVE) {\n      const currentTime = Date.now();\n      const currentBatch = currentPlayer.current_batch;\n\n      // 设置新批次的开始时间\n      setBatchStartTimes(prev => ({\n        ...prev,\n        [currentBatch]: {\n          ...(prev[currentBatch] || {}),\n          [currentBatch]: currentTime\n        }\n      }));\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players, playerId]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [!gameId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [renderMainMenu(), renderHelpDialog()]\n    }, void 0, true) : game ? renderGame() : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1564,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mt: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1568,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1555,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"iOE8pKWSfKDWez8ZdyMQP5QJaLU=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","Stack","TableContainer","Table","TableHead","TableBody","TableCell","TableRow","Paper","Container","CircularProgress","IconButton","List","ListItem","ListItemText","TaskStatus","PlayerStatus","TaskType","gameService","WebSocketService","HelpIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","gameId","initialGameId","_s","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","currentTime","setCurrentTime","showResultPage","setShowResultPage","batchCompletionTimes","setBatchCompletionTimes","batchStartTimes","setBatchStartTimes","batchFlipStates","setBatchFlipStates","flipCoins","setFlipCoins","syncFlippedCoins","taskId","includes","prev","flippedCoins","setFlippedCoins","pendingBatchCompletion","setPendingBatchCompletion","flipStates","setFlipStates","flippingCoins","setFlippingCoins","elapsedTime","setElapsedTime","batchStats","setBatchStats","currentSubBatch","setCurrentSubBatch","completedSubBatches","setCompletedSubBatches","Set","permanentFlippedCoins","setPermanentFlippedCoins","showHelpDialog","setShowHelpDialog","batchElapsedTimes","setBatchElapsedTimes","service","updatedGame","console","log","connect","disconnect","status","Date","now","timerInterval","setInterval","currentPlayer","players","find","p","id","ACTIVE","currentBatch","current_batch","previousTime","batchStartTime","newElapsed","clearInterval","intervalId","tasks","newStartTimes","newCompletionTimes","hasChanges","forEach","player","_newCompletionTimes$p","currentBatchTasks","filter","t","batch_number","assigned_to","length","every","PENDING","COMPLETED","_newStartTimes$player","shouldUpdate","newFlippedCoins","playerTasks","prevBatchTasks","prevBatchTaskIds","map","shouldUpdateFlips","some","otherPlayersStates","permanentFlips","completedTaskIds","allFlippedCoins","Array","from","handleCoinFlip","currentPlayerFlips","prevPermanent","syncFlipCoin","isFlipping","setTimeout","handleCompleteBatch","batchNum","pendingTasks","completeTask","newState","renderCoin","type","isSmall","onClick","flipState","undefined","isFlipped","displayType","HEADS","TAILS","sx","width","height","borderRadius","backgroundColor","border","color","display","alignItems","justifyContent","fontWeight","fontSize","perspective","mb","position","cursor","transition","transformStyle","transform","boxShadow","content","top","left","right","bottom","background","pointerEvents","children","fileName","_jsxFileName","lineNumber","columnNumber","_prev$playerId","canExecuteBatch","subBatchIndex","previousSubBatches","sub_batch_number","renderTaskRow","playerStatus","WAITING","variant","structure","getBatchStructure","coinsCount","_subBatchTasks$","subBatchTasks","currentBatchTarget","flippedCount","isComplete","isSubBatchComplete","canExecute","isActiveSubBatch","isSubmitted","buttonKey","isButtonDisabled","has","size","handleCompleteSubBatch","disabled","flexWrap","gap","opacity","task","_flippingCoins$task$i","renderPlayer","_currentBatchTasks$","requiredCoins","getRequiredCoinsForBatch","currentFlippedCount","_flippedCoins$player$","name","label","bgcolor","max_batches","mt","mr","ml","getPlayerStatusColor","IDLE","getTaskStatusColor","IN_PROGRESS","handleTabChange","_","newValue","handleGameComplete","formatTimeFromMs","ms","totalSeconds","Math","floor","minutes","seconds","toString","padStart","renderCompletionDialog","totalTime","open","onClose","PaperProps","textAlign","flexDirection","py","window","location","reload","handleCompleteGame","handleReturnToMainMenu","renderResultPage","minHeight","maxWidth","renderStatistics","i","component","align","_player$batch_start_t","_player$batch_complet","_player$batch_start_t2","batchTasks","isCompleted","hasStarted","batch_start_time","completionTime","batch_completion_time","displayTime","reduce","sum","_p$batch_completion_t","getTasksForBatch","useMemo","tasksByBatch","push","getPlayerTasks","newStats","completedTasks","tasksCompleted","totalTasks","Object","entries","batchNumber","parseInt","_newStartTimes$batchN","renderBatchStatistics","_batchStats$batchNum","stats","renderMainMenu","mx","borderTopLeftRadius","borderTopRightRadius","WebkitBackgroundClip","WebkitTextFillColor","textShadow","borderBottomLeftRadius","borderBottomRightRadius","value","onChange","e","onSubmit","handleCreateGame","fullWidth","required","target","autoComplete","Number","inputProps","min","max","helperText","handleJoinGame","renderHelpDialog","primary","secondary","renderGame","_game$players$","handleStartGame","container","spacing","item","xs","md","minWidth","getSubBatchSize","subBatch","sb","currentPlayerId","_flippedCoins$current","handleGameUpdate","preventDefault","createGame","joinGame","ws","initialGameState","getGameState","err","Error","message","exists","checkGameExists","gameState","startGame","newSet","add","allSubBatchesInCurrentBatch","allSubBatchesCompleted","nextBatchNum","currentFlips","allFlips","severity","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes,\n    Stack,\n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableCell,\n    TableRow,\n    Paper,\n    Container,\n    CircularProgress,\n    IconButton,\n    List,\n    ListItem,\n    ListItemText\n} from '@mui/material';\nimport { Game as GameType, Player, Task, TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport HelpIcon from '@mui/icons-material/Help';\n\ninterface GameProps {\n    gameId?: string;\n}\n\ntype TabType = 0 | 1;\n\n// 添加类型定义\ninterface BatchTimes {\n    [key: number]: {\n        [key: string]: number;\n    };\n}\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | undefined>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(20);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState<TabType>(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n    const [batchCompletionTimes, setBatchCompletionTimes] = useState<{[key: number]: {[key: string]: number}}>({});\n    const [batchStartTimes, setBatchStartTimes] = useState<BatchTimes>({});\n\n    const [batchFlipStates, setBatchFlipStates] = useState<{\n        [batchNum: number]: {\n            [taskId: string]: boolean;  // true means flipped\n        };\n    }>({});\n\n    const [flipCoins, setFlipCoins] = useState<string[]>([]);\n    const syncFlippedCoins = (taskId: string) => {\n        if (!flipCoins.includes(taskId)) {\n            setFlipCoins(prev => [...prev, taskId]);\n        }\n    };\n\n    // 修改翻转状态的类型定义，加入玩家ID\n    const [flippedCoins, setFlippedCoins] = useState<{[playerId: string]: string[]}>({});\n    const [pendingBatchCompletion, setPendingBatchCompletion] = useState<{\n        [batchNum: number]: string[];\n    }>({});\n\n    // 添加翻转动画状态\n    interface FlipState {\n        isFlipping: boolean;\n        showOpposite: boolean;\n    }\n    const [flipStates, setFlipStates] = useState<{\n        [key: string]: FlipState;\n    }>({});\n\n    // 添加翻转动画状态\n    const [flippingCoins, setFlippingCoins] = useState<{[key: string]: { isFlipping: boolean }}>({});\n\n    // 修改计时器状态和开始时间状态\n    const [elapsedTime, setElapsedTime] = useState<number>(0);\n\n    // 添加批次统计时间的状态\n    const [batchStats, setBatchStats] = useState<{\n        [batchNum: number]: {\n            [playerId: string]: {\n                completionTime: number;\n                tasksCompleted: number;\n                totalTasks: number;\n            }\n        }\n    }>({});\n\n    // 添加当前子批次的useEffect\n    const [currentSubBatch, setCurrentSubBatch] = useState<number>(0);\n\n    // 添加已完成子批次的状态\n    const [completedSubBatches, setCompletedSubBatches] = useState<Set<string>>(new Set());\n\n    // 添加永久翻转状态的记录\n    const [permanentFlippedCoins, setPermanentFlippedCoins] = useState<{[playerId: string]: string[]}>({});\n\n    const [showHelpDialog, setShowHelpDialog] = useState(false);\n\n    // 添加一个新的state来跟踪每个批次的累计时间\n    const [batchElapsedTimes, setBatchElapsedTimes] = useState<BatchTimes>({});\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, (updatedGame) => {\n                console.log('Game state updated:', updatedGame);\n                setGame(updatedGame);\n            }, syncFlippedCoins);\n            service.connect();\n            setWsService(service);\n\n            // Cleanup function\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && playerId) {\n            timerInterval = setInterval(() => {\n                const currentPlayer = game.players.find(p => p.id === playerId);\n                if (currentPlayer?.status === PlayerStatus.ACTIVE) {\n                    const currentBatch = currentPlayer.current_batch;\n                    const previousTime = (batchElapsedTimes[currentBatch] || {})[playerId] || 0;\n                    const currentTime = Date.now();\n                    const batchStartTime = (batchStartTimes[currentBatch] || {})[currentBatch];\n                    \n                    if (batchStartTime) {\n                        const newElapsed = currentTime - batchStartTime + previousTime;\n                        setBatchElapsedTimes(prev => ({\n                            ...prev,\n                            [currentBatch]: {\n                                ...(prev[currentBatch] || {}),\n                                [playerId]: newElapsed\n                            }\n                        }));\n                        setCurrentTime(newElapsed);\n                    }\n                }\n            }, 1000);\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, startTime, endTime, game?.players, playerId, batchStartTimes, batchElapsedTimes]);\n\n    useEffect(() => {\n        let intervalId: NodeJS.Timeout;\n        \n        if (startTime && game?.status === 'in_progress') {\n            intervalId = setInterval(() => {\n                setElapsedTime(prev => Date.now() - startTime);\n            }, 1000);\n        }\n        \n        return () => {\n            if (intervalId) {\n                clearInterval(intervalId);\n            }\n        };\n    }, [startTime, game?.status]);\n\n    useEffect(() => {\n        if (game?.tasks && game.players) {\n            const newStartTimes = { ...batchStartTimes };\n            const newCompletionTimes = { ...batchCompletionTimes };\n            let hasChanges = false;\n\n            game.players.forEach(player => {\n                // 获取玩家当前批次的所有任务\n                const currentBatchTasks = game.tasks.filter(t => \n                    t.batch_number === player.current_batch && \n                    t.assigned_to === player.id\n                );\n\n                // 检查是否有新的子批次任务（所有任务都是PENDING状态）\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                    const currentTime = Date.now();\n                    if (!newStartTimes[player.current_batch]) {\n                        newStartTimes[player.current_batch] = {};\n                    }\n                    // 更新开始时间，确保计时器继续\n                    newStartTimes[player.current_batch][player.current_batch] = currentTime;\n                    hasChanges = true;\n                    // 更新全局startTime\n                    setStartTime(currentTime);\n                }\n\n                // 处理批次完成时间\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.COMPLETED) &&\n                    !newCompletionTimes[player.current_batch]?.[player.id]) {\n                    if (!newCompletionTimes[player.current_batch]) {\n                        newCompletionTimes[player.current_batch] = {};\n                    }\n                    const batchStartTime = newStartTimes[player.current_batch]?.[player.current_batch];\n                    if (batchStartTime) {\n                        newCompletionTimes[player.current_batch][player.id] = Date.now() - batchStartTime;\n                        hasChanges = true;\n                    }\n                }\n            });\n\n            if (hasChanges) {\n                setBatchStartTimes(newStartTimes);\n                setBatchCompletionTimes(newCompletionTimes);\n            }\n        }\n    }, [game?.tasks, game?.players]);\n\n    // 添加一个新的useEffect来监听游戏状态变化\n    useEffect(() => {\n        if (game?.status === 'in_progress' && playerId) {\n            const currentPlayer = game.players.find(p => p.id === playerId);\n            if (currentPlayer) {\n                const currentBatchTasks = game.tasks.filter(t => \n                    t.batch_number === currentPlayer.current_batch && \n                    t.assigned_to === playerId\n                );\n                \n                // 如果玩家有新的PENDING任务，确保计时器在运行\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                    const currentTime = Date.now();\n                    setStartTime(currentTime);\n                }\n            }\n        }\n    }, [game?.status, game?.tasks, game?.players, playerId]);\n\n    useEffect(() => {\n        if (game?.tasks) {\n            let shouldUpdate = false;\n            const newFlippedCoins: {[playerId: string]: string[]} = {...flippedCoins};\n\n            // 检查是否有新的批次开始\n            game.players.forEach(player => {\n                const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n                const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n                \n                // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                    // 清理上一个批次的翻转状态\n                    const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n                    const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n                    if (newFlippedCoins[player.id]) {\n                        newFlippedCoins[player.id] = newFlippedCoins[player.id].filter(id => !prevBatchTaskIds.includes(id));\n                        shouldUpdate = true;\n                    }\n                }\n            });\n\n            // 只在有变化时更新状态\n            if (shouldUpdate) {\n                setFlippedCoins(newFlippedCoins);\n            }\n        }\n    }, [game?.tasks]);\n\n    // 修改游戏状态更新的effect，确保永久翻转的硬币不会被重置\n    useEffect(() => {\n        if (game?.tasks && playerId) {\n            const currentPlayer = game.players.find(p => p.id === playerId);\n            if (!currentPlayer) return;\n\n            const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n            const currentBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch);\n            \n            const shouldUpdateFlips = currentBatchTasks.some(t => t.status === TaskStatus.COMPLETED) ||\n                currentBatchTasks.every(t => t.status === TaskStatus.PENDING);\n\n            if (shouldUpdateFlips) {\n                setFlippedCoins(prev => {\n                    const otherPlayersStates = { ...prev };\n                    const permanentFlips = permanentFlippedCoins[playerId] || [];\n                    const completedTaskIds = playerTasks\n                        .filter(t => t.status === TaskStatus.COMPLETED)\n                        .map(t => t.id);\n                    \n                    // 使用Array.from替代Set的扩展运算符\n                    const allFlippedCoins = Array.from(new Set([...permanentFlips, ...completedTaskIds]));\n                    \n                    return {\n                        ...otherPlayersStates,\n                        [playerId]: allFlippedCoins\n                    };\n                });\n            }\n        }\n    }, [game?.tasks, playerId, permanentFlippedCoins]);\n\n    // 修改handleCoinFlip函数，记录永久翻转状态\n    const handleCoinFlip = (taskId: string) => {\n        if (!playerId) return;\n        \n        // 立即更新当前玩家的翻转状态\n        setFlippedCoins(prev => {\n            const currentPlayerFlips = prev[playerId] || [];\n            if (!currentPlayerFlips.includes(taskId)) {\n                // 同时更新永久翻转状态\n                setPermanentFlippedCoins(prevPermanent => ({\n                    ...prevPermanent,\n                    [playerId]: [...(prevPermanent[playerId] || []), taskId]\n                }));\n                \n                return {\n                    ...prev,\n                    [playerId]: [...currentPlayerFlips, taskId]\n                };\n            }\n            return prev;\n        });\n        gameService.syncFlipCoin(gameId || '', taskId);\n        // 设置翻转动画\n        setFlippingCoins(prev => ({\n            ...prev,\n            [taskId]: { isFlipping: true }\n        }));\n\n        setTimeout(() => {\n            setFlippingCoins(prev => ({\n                ...prev,\n                [taskId]: { isFlipping: false }\n            }));\n        }, 500);\n    };\n\n    // 处理批次完成\n    const handleCompleteBatch = (batchNum: number) => {\n        const pendingTasks = pendingBatchCompletion[batchNum] || [];\n        if (pendingTasks.length === 0) return;\n\n        // 发送所有任务完成的请求\n        pendingTasks.forEach((taskId: string) => {\n            if (wsService) {\n                wsService.completeTask(taskId);\n            }\n        });\n\n        // 清理这个批次的待完成状态\n        setPendingBatchCompletion((prev: {[batchNum: number]: string[]}) => {\n            const newState = { ...prev };\n            delete newState[batchNum];\n            return newState;\n        });\n    };\n\n    // 修改渲染硬币的函数\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void, taskId?: string) => {\n        if (!taskId) return null;\n        const flipState = taskId ? flippingCoins[taskId] : undefined;\n        const isFlipped = taskId && playerId && flippedCoins[playerId] ? flippedCoins[playerId].includes(taskId) : false;\n        \n        // 决定显示哪一面\n        let displayType = isFlipped\n            ? (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) \n            : type;\n        if (flipCoins.includes(taskId))\n            displayType = TaskType.HEADS;\n        else\n            displayType = TaskType.TAILS;\n        return (\n            <Box\n                sx={{\n                    width: isSmall ? 20 : 32,\n                    height: isSmall ? 20 : 32,\n                    borderRadius: '50%',\n                    backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                    border: `${isSmall ? 1 : 2}px solid #B8860B`,\n                    color: '#704214',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontWeight: 'bold',\n                    fontSize: isSmall ? '0.6rem' : '0.8rem',\n                    perspective: 1000,\n                    mb: isSmall ? 0 : 1,\n                    position: 'relative',\n                    cursor: onClick ? 'pointer' : 'default',\n                    transition: 'transform 0.6s',\n                    transformStyle: 'preserve-3d',\n                    transform: flipState?.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n                    '&:hover': onClick ? {\n                        transform: 'scale(1.05)',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                    } : {},\n                    '&:active': onClick ? {\n                        transform: 'scale(0.95)'\n                    } : {},\n                    '&::after': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        borderRadius: '50%',\n                        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                        pointerEvents: 'none'\n                    }\n                }}\n                onClick={onClick}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 监听游戏状态变化\n    useEffect(() => {\n        if (game?.tasks && playerId) {\n            const currentPlayer = game.players.find(p => p.id === playerId);\n            if (!currentPlayer) return;\n\n            const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n            const currentBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch);\n            \n            // 只有当前玩家的新批次开始时才清理状态\n            if (currentBatchTasks.length > 0 && \n                currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                // 清理当前玩家上一个批次的翻转状态\n                const prevBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch - 1);\n                const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n                setFlippedCoins(prev => ({\n                    ...prev,\n                    [playerId]: prev[playerId]?.filter(id => !prevBatchTaskIds.includes(id)) || []\n                }));\n            }\n        }\n    }, [game?.tasks, playerId]);\n\n    // 检查当前批次是否可以执行\n    const canExecuteBatch = (batchNum: number, subBatchIndex: number): boolean => {\n        if (!game || !playerId) return false;\n\n        // 获取当前玩家的所有任务\n        const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n        \n        // 获取所有之前的子批次\n        const previousSubBatches = playerTasks.filter(t => \n            (t.batch_number < batchNum) || \n            (t.batch_number === batchNum && t.sub_batch_number < subBatchIndex)\n        );\n\n        // 如果还有之前的子批次未完成，则不能执行当前批次\n        return !previousSubBatches.some(t => t.status !== TaskStatus.COMPLETED);\n    };\n\n    // 修改renderTaskRow函数中的按钮显示逻辑\n    const renderTaskRow = (tasks: Task[], batchNum: number, playerStatus: PlayerStatus) => {\n        if (playerStatus === PlayerStatus.WAITING) {\n            return (\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                    Waiting for your turn...\n                </Typography>\n            );\n        }\n\n        const structure = getBatchStructure(batchNum);\n        const currentPlayer = game?.players.find(p => p.id === playerId);\n        \n        return (\n            <Box>\n                {structure.map(({ subBatchIndex, coinsCount }) => {\n                    const subBatchTasks = tasks.filter(t => t.sub_batch_number === subBatchIndex);\n                    if (subBatchTasks.length === 0) return null;\n\n                    const currentBatchTarget = subBatchTasks[0]?.type || TaskType.HEADS;\n                    const flippedCount = playerId && flippedCoins[playerId] \n                        ? subBatchTasks.filter(t => flippedCoins[playerId].includes(t.id)).length \n                        : 0;\n                    const isComplete = isSubBatchComplete(batchNum, subBatchIndex, currentPlayer?.id || '');\n                    const canExecute = canExecuteBatch(batchNum, subBatchIndex);\n                    \n                    // 检查是否是当前活动的子批次\n                    const isActiveSubBatch = currentPlayer?.status === PlayerStatus.ACTIVE && \n                                           canExecute && \n                                           !isComplete;\n\n                    // 检查子批次是否已经完成并提交\n                    const isSubmitted = subBatchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                    // 使用包含玩家ID的buttonKey确保按钮状态的独立性\n                    const buttonKey = `${playerId}-${batchNum}-${subBatchIndex}`;\n                    const isButtonDisabled = completedSubBatches.has(buttonKey);\n\n                    return (\n                        <Box key={buttonKey} sx={{ mb: 2 }}>\n                            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                                {isComplete && currentPlayer?.status === PlayerStatus.ACTIVE && !isSubmitted && !isButtonDisabled && (\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        size=\"small\"\n                                        onClick={() => handleCompleteSubBatch(batchNum, subBatchIndex)}\n                                        disabled={!canExecute}\n                                    >\n                                        Complete this batch\n                                    </Button>\n                                )}\n                            </Box>\n                            <Box sx={{ \n                                display: 'flex', \n                                flexWrap: 'wrap', \n                                gap: 1,\n                                opacity: isActiveSubBatch ? 1 : 0.5,\n                                pointerEvents: isActiveSubBatch ? 'auto' : 'none'\n                            }}>\n                                {subBatchTasks.map((task) => (\n                                    <Box key={task.id}>\n                                        {renderCoin(\n                                            task.type,\n                                            flippingCoins[task.id]?.isFlipping || false,\n                                            false,\n                                            isActiveSubBatch ? () => handleCoinFlip(task.id) : undefined,\n                                            task.id\n                                        )}\n                                    </Box>\n                                ))}\n                            </Box>\n                        </Box>\n                    );\n                })}\n            </Box>\n        );\n    };\n\n    // 渲染玩家卡片\n    const renderPlayer = (player: Player) => {\n        const currentBatchTasks = game?.tasks.filter(t => \n            t.batch_number === player.current_batch && \n            t.assigned_to === player.id\n        ) || [];\n\n        const currentBatchTarget = currentBatchTasks[0]?.type;\n        const requiredCoins = getRequiredCoinsForBatch(player.current_batch);\n        const currentFlippedCount = currentBatchTasks.filter(t => flippedCoins[player.id]?.includes(t.id)).length;\n\n        return (\n            <Card key={player.id} sx={{ mb: 2 }}>\n                <CardContent>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                        <Typography variant=\"h6\">\n                            {player.name}\n                        </Typography>\n                        <Chip \n                            label={player.status}\n                            color={player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\"}\n                            size=\"small\"\n                        />\n                    </Box>\n\n                    <Box sx={{ mb: 2, bgcolor: 'background.default', p: 2, borderRadius: 1 }}>\n                        <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n                            Current Round: {player.current_batch} / {game?.max_batches}\n                            {currentBatchTarget && player.status === PlayerStatus.ACTIVE && (\n                                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\n                                    <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                                        Required flips:\n                                    </Typography>\n                                    <Typography variant=\"body2\" sx={{ ml: 2 }}>\n                                        {requiredCoins}\n                                    </Typography>\n                                </Box>\n                            )}\n                        </Typography>\n\n                        <Box sx={{ mb: 2 }}>\n                            {renderTaskRow(currentBatchTasks, player.current_batch, player.status)}\n                        </Box>\n                    </Box>\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue as TabType);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(20);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    // 添加一个辅助函数来处理毫秒到时间的转换\n    const formatTimeFromMs = (ms: number) => {\n        const totalSeconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed!\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTimeFromMs(endTime - startTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    // 修改返回主菜单的处理函数\n    const handleReturnToMainMenu = () => {\n        // 清除游戏状态\n        setGameId('');\n        setGame(null);\n        setWsService(null);\n        setStartTime(null);\n        setEndTime(null);\n        // 清除输入记录\n        setPlayerName('');\n        setPlayerCount(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTimeFromMs(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMainMenu}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    const renderStatistics = () => {\n        if (!game) return null;\n\n        return (\n            <Box sx={{ p: 2 }}>\n                <Typography variant=\"h6\" sx={{ mb: 2, color: 'primary.main' }}>\n                    Game Statistics\n                </Typography>\n                {Array.from({ length: game.max_batches }, (_, i) => i + 1).map(batchNum => (\n                    <Box key={batchNum} sx={{ mb: 3 }}>\n                        <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                            Round {batchNum}\n                        </Typography>\n                        <TableContainer component={Paper} sx={{ mb: 2 }}>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Player</TableCell>\n                                        <TableCell align=\"right\">Time</TableCell>\n                                        <TableCell align=\"right\">Status</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {game.players.map(player => {\n                                        const batchTasks = game.tasks.filter(t => \n                                            t.batch_number === batchNum && \n                                            t.assigned_to === player.id\n                                        );\n                                        const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                                        const hasStarted = player.batch_start_time?.[batchNum] != null;\n                                        const completionTime = player.batch_completion_time?.[batchNum];\n                                        const startTime = player.batch_start_time?.[batchNum];\n                                        \n                                        // 计算当前时间（如果批次已开始但未完成）\n                                        let displayTime = '-';\n                                        if (completionTime) {\n                                            displayTime = formatTimeFromMs(completionTime);\n                                        } else if (hasStarted && startTime) {\n                                            const currentTime = Date.now() - startTime;\n                                            displayTime = formatTimeFromMs(currentTime);\n                                        }\n\n                                        let status = 'Pending';\n                                        if (isCompleted) {\n                                            status = 'Completed';\n                                        } else if (hasStarted) {\n                                            status = 'In Progress';\n                                        }\n\n                                        return (\n                                            <TableRow key={player.id}>\n                                                <TableCell>{player.name}</TableCell>\n                                                <TableCell align=\"right\">{displayTime}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Chip \n                                                        label={status}\n                                                        size=\"small\"\n                                                        color={isCompleted ? 'success' : (hasStarted ? 'primary' : 'default')}\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                    <TableRow sx={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}>\n                                        <TableCell><strong>Total</strong></TableCell>\n                                        <TableCell align=\"right\">\n                                            <strong>\n                                                {formatTimeFromMs(game.players.reduce((sum, p) => \n                                                    sum + (p.batch_completion_time?.[batchNum] || 0), \n                                                    0\n                                                ))}\n                                            </strong>\n                                        </TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    // 使用useMemo来记忆计算结果\n    const getTasksForBatch = React.useMemo(() => {\n        if (!game?.tasks) return {};\n        const tasksByBatch: { [key: number]: Task[] } = {};\n        game.tasks.forEach(task => {\n            if (!tasksByBatch[task.batch_number]) {\n                tasksByBatch[task.batch_number] = [];\n            }\n            tasksByBatch[task.batch_number].push(task);\n        });\n        return tasksByBatch;\n    }, [game?.tasks]);\n\n    // 使用useMemo来记忆玩家任务\n    const getPlayerTasks = React.useMemo(() => {\n        if (!game?.tasks || !game?.players) return {};\n        const playerTasks: { [key: string]: Task[] } = {};\n        game.players.forEach(player => {\n            playerTasks[player.id] = game.tasks.filter(t => t.assigned_to === player.id);\n        });\n        return playerTasks;\n    }, [game?.tasks, game?.players]);\n\n    useEffect(() => {\n        if (!game?.tasks || !startTime) return;\n\n        const newStats = { ...batchStats };\n        \n        // 遍历每个批次\n        for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n            if (!newStats[batchNum]) {\n                newStats[batchNum] = {};\n            }\n            \n            // 遍历每个玩家\n            game.players.forEach(player => {\n                const batchTasks = game.tasks.filter(t => \n                    t.batch_number === batchNum && \n                    t.assigned_to === player.id\n                );\n                \n                const completedTasks = batchTasks.filter(t => \n                    t.status === TaskStatus.COMPLETED\n                );\n                \n                // 如果这个批次的所有任务都完成了，记录完成时间\n                if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n                    // 只在第一次完成时记录时间\n                    if (!newStats[batchNum][player.id]) {\n                        newStats[batchNum][player.id] = {\n                            completionTime: elapsedTime,\n                            tasksCompleted: completedTasks.length,\n                            totalTasks: batchTasks.length\n                        };\n                    }\n                } else if (batchTasks.length > 0) {\n                    // 更新进行中的任务状态\n                    newStats[batchNum][player.id] = {\n                        completionTime: 0,\n                        tasksCompleted: completedTasks.length,\n                        totalTasks: batchTasks.length\n                    };\n                }\n            });\n        }\n        \n        setBatchStats(newStats);\n    }, [game?.tasks, startTime, elapsedTime]);\n\n    useEffect(() => {\n        if (!game?.tasks || !startTime) return;\n\n        const newCompletionTimes = { ...batchCompletionTimes };\n        const newStartTimes = { ...batchStartTimes };\n        let hasChanges = false;\n\n        Object.entries(getTasksForBatch).forEach(([batchNum, tasks]) => {\n            const batchNumber = parseInt(batchNum);\n            if (!newStartTimes[batchNumber]) {\n                newStartTimes[batchNumber] = {};\n                hasChanges = true;\n            }\n            if (!newCompletionTimes[batchNumber]) {\n                newCompletionTimes[batchNumber] = {};\n                hasChanges = true;\n            }\n\n            game.players.forEach(player => {\n                const playerTasks = tasks.filter(t => t.assigned_to === player.id);\n                if (playerTasks.length > 0 && \n                    playerTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                    !newCompletionTimes[batchNumber][player.id]) {\n                    const batchStartTime = newStartTimes[batchNumber]?.[batchNumber];\n                    newCompletionTimes[batchNumber][player.id] = Date.now() - batchStartTime;\n                    hasChanges = true;\n                }\n            });\n        });\n\n        // 只在有变化时更新状态\n        if (hasChanges) {\n            setBatchStartTimes(newStartTimes);\n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.players, getTasksForBatch, startTime]);\n\n    useEffect(() => {\n        if (game?.tasks && startTime) {\n            const newStats = { ...batchStats };\n            \n            // 遍历每个批次\n            for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n                if (!newStats[batchNum]) {\n                    newStats[batchNum] = {};\n                }\n                \n                // 遍历每个玩家\n                game.players.forEach(player => {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const completedTasks = batchTasks.filter(t => \n                        t.status === TaskStatus.COMPLETED\n                    );\n                    \n                    // 如果这个批次的所有任务都完成了，记录完成时间\n                    if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n                        // 只在第一次完成时记录时间\n                        if (!newStats[batchNum][player.id]) {\n                            newStats[batchNum][player.id] = {\n                                completionTime: elapsedTime,\n                                tasksCompleted: completedTasks.length,\n                                totalTasks: batchTasks.length\n                            };\n                        }\n                    } else if (batchTasks.length > 0) {\n                        // 更新进行中的任务状态\n                        newStats[batchNum][player.id] = {\n                            completionTime: 0,\n                            tasksCompleted: completedTasks.length,\n                            totalTasks: batchTasks.length\n                        };\n                    }\n                });\n            }\n            \n            setBatchStats(newStats);\n        }\n    }, [game?.tasks, startTime, elapsedTime]);\n\n    // 修改统计页面中的完成时间显示\n    const renderBatchStatistics = (batchNum: number, player: Player) => {\n        const stats = batchStats[batchNum]?.[player.id];\n        \n        return (\n            <TableRow key={player.id}>\n                <TableCell>{player.name}</TableCell>\n                <TableCell align=\"right\">\n                    {stats?.completionTime ? formatTimeFromMs(stats.completionTime) : '-'}\n                </TableCell>\n                <TableCell align=\"right\">\n                    {stats?.tasksCompleted}/{stats?.totalTasks || 0}\n                </TableCell>\n            </TableRow>\n        );\n    };\n\n    // 渲染主菜单\n    const renderMainMenu = () => (\n        <Card sx={{\n            maxWidth: 600,\n            width: '100%',\n            mx: 'auto',\n            mt: 4\n        }}>\n            {/* Top section with title and subtitle */}\n            <Box sx={{\n                background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n                p: 4,\n                borderTopLeftRadius: 8,\n                borderTopRightRadius: 8,\n                position: 'relative'\n            }}>\n                <IconButton\n                    onClick={() => setShowHelpDialog(true)}\n                    sx={{\n                        position: 'absolute',\n                        top: 8,\n                        right: 8,\n                        color: 'primary.main'\n                    }}\n                >\n                    <HelpIcon />\n                </IconButton>\n                <Typography variant=\"h3\" sx={{\n                    fontWeight: 'bold',\n                    background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n                    WebkitBackgroundClip: 'text',\n                    WebkitTextFillColor: 'transparent',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n                    textAlign: 'center',\n                    mb: 1\n                }}>\n                    Online Multiplayer Coin Game\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"text.secondary\" align=\"center\">\n                    Flip coins with your friends in this multiplayer game!\n                </Typography>\n            </Box>\n\n            {/* Bottom section with form */}\n            <Box sx={{\n                background: '#ffffff',\n                p: 4,\n                borderBottomLeftRadius: 8,\n                borderBottomRightRadius: 8\n            }}>\n                <Tabs value={activeTab} onChange={(e, newValue) => {\n                    setActiveTab(newValue as TabType);\n                    // 切换标签时也清除输入\n                    setPlayerName('');\n                    setPlayerCount(2);\n                    setJoinGameId('');\n                    setError(null);\n                }} sx={{ mb: 3 }}>\n                    <Tab label=\"CREATE GAME\" />\n                    <Tab label=\"JOIN GAME\" />\n                </Tabs>\n\n                {activeTab === 0 ? (\n                    // Create game form\n                    <Box component=\"form\" onSubmit={handleCreateGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Number of Players\"\n                            type=\"number\"\n                            required\n                            value={playerCount}\n                            onChange={(e) => setPlayerCount(Number(e.target.value))}\n                            inputProps={{ min: 2, max: 5 }}\n                            helperText=\"Minimum 2, maximum 5 players\"\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || playerCount < 2 || playerCount > 5}\n                        >\n                            Create Game\n                        </Button>\n                    </Box>\n                ) : (\n                    // Join game form\n                    <Box component=\"form\" onSubmit={handleJoinGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Game Code\"\n                            required\n                            value={joinGameId}\n                            onChange={(e) => setJoinGameId(e.target.value)}\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || !joinGameId}\n                        >\n                            Join Game\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        </Card>\n    );\n\n    const renderHelpDialog = () => {\n        return (\n            <Dialog\n                open={showHelpDialog}\n                onClose={() => setShowHelpDialog(false)}\n                maxWidth=\"md\"\n                fullWidth\n            >\n                <DialogTitle>\n                    Game Instructions\n                </DialogTitle>\n                <DialogContent>\n                    <List>\n                        <ListItem>\n                            <ListItemText\n                                primary=\"Game Overview\"\n                                secondary=\"This is a multiplayer coin flipping game where players take turns flipping coins to complete specific patterns.\"\n                            />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText\n                                primary=\"Game Setup\"\n                                secondary=\"1. Create a new game or join an existing one using the game code\n                                         2. Wait for all players to join\n                                         3. The game creator can start the game when everyone is ready\"\n                            />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText\n                                primary=\"Gameplay\"\n                                secondary=\"1. Each player takes turns flipping coins\n                                         2. The goal is to flip coins to match the required pattern\n                                         3. Complete all batches to win the game\n                                         4. The game tracks completion time for each round\"\n                            />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText\n                                primary=\"Controls\"\n                                secondary=\"1. Click on coins to flip them\n                                         2. Use the 'Complete Batch' button when you've finished a batch\n                                         3. The game automatically tracks your progress\"\n                            />\n                        </ListItem>\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setShowHelpDialog(false)} color=\"primary\">\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const renderGame = () => {\n        if (!game) return null;\n        \n        return (\n            <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n                {/* 游戏头部信息 */}\n                <Box sx={{ \n                    display: 'flex', \n                    justifyContent: 'space-between', \n                    alignItems: 'center',\n                    mb: 3\n                }}>\n                    <Box>\n                        <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                            Game ID: {game.id}\n                        </Typography>\n                        <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                            Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                        </Typography>\n                    </Box>\n                </Box>\n\n                {/* 开始游戏按钮 */}\n                {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleStartGame}\n                        sx={{ mb: 3 }}\n                    >\n                        Start Game\n                    </Button>\n                )}\n\n                {/* 游戏内容 */}\n                <Grid container spacing={3}>\n                    {/* Left column: Player cards */}\n                    <Grid item xs={12} md={7}>\n                        <Stack spacing={3}>\n                            {game.players.map(renderPlayer)}\n                        </Stack>\n                    </Grid>\n\n                    {/* Right column: Results and statistics */}\n                    <Grid item xs={12} md={5}>\n                        {renderStatistics()}\n                    </Grid>\n                </Grid>\n\n                {/* 返回主菜单按钮 - 只在游戏完成时显示 */}\n                {game.status === 'completed' && (\n                    <Box sx={{ mt: 4, textAlign: 'center' }}>\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleReturnToMainMenu}\n                            sx={{\n                                minWidth: 200,\n                                borderRadius: 2\n                            }}\n                        >\n                            Return to Main Menu\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        );\n    };\n\n    // 获取每轮需要翻转的硬币数量\n    const getRequiredCoinsForBatch = (batchNum: number): number => {\n        return 20; // 所有批次都需要20个硬币\n    };\n\n    // 获取每轮的子批次结构\n    const getBatchStructure = (batchNum: number): { subBatchIndex: number, coinsCount: number }[] => {\n        const structure = {\n            1: [{ subBatchIndex: 0, coinsCount: 20 }],  // 第1轮：1个批次×20枚\n            2: [  // 第2轮：2个批次×10枚\n                { subBatchIndex: 0, coinsCount: 10 },\n                { subBatchIndex: 1, coinsCount: 10 }\n            ],\n            3: [  // 第3轮：4个批次×5枚\n                { subBatchIndex: 0, coinsCount: 5 },\n                { subBatchIndex: 1, coinsCount: 5 },\n                { subBatchIndex: 2, coinsCount: 5 },\n                { subBatchIndex: 3, coinsCount: 5 }\n            ],\n            4: Array.from({ length: 10 }, (_, i) => ({  // 第4轮：10个批次×2枚\n                subBatchIndex: i,\n                coinsCount: 2\n            }))\n        };\n        return structure[batchNum as keyof typeof structure] || [];\n    };\n\n    // 获取当前子批次的硬币数量\n    const getSubBatchSize = (batchNum: number, subBatchIndex: number): number => {\n        const structure = getBatchStructure(batchNum);\n        const subBatch = structure.find(sb => sb.subBatchIndex === subBatchIndex);\n        return subBatch?.coinsCount || 0;\n    };\n\n    // 修改isSubBatchComplete函数\n    const isSubBatchComplete = (batchNum: number, subBatchIndex: number, currentPlayerId: string): boolean => {\n        if (!game) return false;\n        const subBatchTasks = game.tasks.filter(t => \n            t.batch_number === batchNum && \n            t.sub_batch_number === subBatchIndex &&\n            t.assigned_to === currentPlayerId\n        );\n        const flippedCount = subBatchTasks.filter(t => flippedCoins[currentPlayerId]?.includes(t.id)).length;\n        return flippedCount >= getSubBatchSize(batchNum, subBatchIndex);\n    };\n\n    // 添加错误处理函数\n    const handleGameUpdate = (updatedGame: GameType) => {\n        setGame(updatedGame);\n        if (updatedGame.status === 'completed' && !endTime) {\n            setEndTime(Date.now());\n        }\n    };\n\n    // 添加创建游戏的处理函数\n    const handleCreateGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            // 固定为4轮游戏，每轮20个硬币\n            const gameId = await gameService.createGame(playerCount, 4, 20);\n            if (gameId) {\n                // 加入游戏\n                const playerId = await gameService.joinGame(gameId, playerName);\n                \n                // 更新状态\n                setGameId(gameId);\n                setPlayerId(playerId);\n                \n                // 创建WebSocket连接\n                const ws = new WebSocketService(\n                    gameId,\n                    playerName,\n                    handleGameUpdate,\n                    syncFlippedCoins\n                );\n                setWsService(ws);\n                \n                // 获取初始游戏状态\n                const initialGameState = await gameService.getGameState(gameId);\n                setGame(initialGameState);\n                \n                // 设置开始时间\n                setStartTime(Date.now());\n                \n                console.log('Game created successfully:', { gameId, playerId });\n            }\n        } catch (err) {\n            console.error('Error creating game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to create game');\n        }\n    };\n\n    // 添加加入游戏的处理函数\n    const handleJoinGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            if (joinGameId) {\n                // 检查游戏是否存在\n                const exists = await gameService.checkGameExists(joinGameId);\n                if (!exists) {\n                    setError('Game not found');\n                    return;\n                }\n                \n                // 加入游戏\n                const playerId = await gameService.joinGame(joinGameId, playerName);\n                \n                // 更新状态\n                setGameId(joinGameId);\n                setPlayerId(playerId);\n                \n                // 创建WebSocket连接\n                const ws = new WebSocketService(\n                    joinGameId,\n                    playerName,\n                    handleGameUpdate,\n                    syncFlippedCoins\n                );\n                setWsService(ws);\n                \n                // 获取游戏状态\n                const gameState = await gameService.getGameState(joinGameId);\n                setGame(gameState);\n                \n                // 设置开始时间\n                setStartTime(Date.now());\n                \n                console.log('Joined game successfully:', { gameId: joinGameId, playerId });\n            }\n        } catch (err) {\n            console.error('Error joining game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to join game');\n        }\n    };\n\n    // 添加开始游戏的处理函数\n    const handleStartGame = async () => {\n        if (!gameId) return;\n        \n        try {\n            await gameService.startGame(gameId);\n            const currentTime = Date.now();\n            setStartTime(currentTime);\n            setBatchStartTimes(prev => ({\n                ...prev,\n                1: { 1: currentTime }\n            }));\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Failed to start game');\n        }\n    };\n\n    // 修改handleCompleteSubBatch函数，记录永久翻转状态\n    const handleCompleteSubBatch = async (batchNum: number, subBatchIndex: number) => {\n        if (!game || !playerId || !wsService) return;\n        \n        try {\n            if (!canExecuteBatch(batchNum, subBatchIndex)) {\n                setError('Please complete previous batches first');\n                return;\n            }\n\n            const subBatchTasks = game.tasks.filter(t => \n                t.batch_number === batchNum && \n                t.sub_batch_number === subBatchIndex &&\n                t.assigned_to === playerId\n            );\n\n            const buttonKey = `${playerId}-${batchNum}-${subBatchIndex}`;\n            setCompletedSubBatches(prev => {\n                const newSet = new Set(Array.from(prev));\n                newSet.add(buttonKey);\n                return newSet;\n            });\n\n            // 完成当前子批次的任务\n            for (const task of subBatchTasks) {\n                await wsService.completeTask(task.id);\n            }\n\n            // 检查是否完成了当前批次的所有子批次\n            const allSubBatchesInCurrentBatch = game.tasks.filter(t =>\n                t.batch_number === batchNum &&\n                t.assigned_to === playerId\n            );\n\n            const allSubBatchesCompleted = allSubBatchesInCurrentBatch.every(t =>\n                t.status === TaskStatus.COMPLETED\n            );\n\n            // 如果完成了当前批次的所有子批次，设置下一批次的开始时间\n            if (allSubBatchesCompleted && batchNum < game.max_batches) {\n                const nextBatchNum = batchNum + 1;\n                const currentTime = Date.now();\n                setBatchStartTimes(prev => ({\n                    ...prev,\n                    [nextBatchNum]: {\n                        ...prev[nextBatchNum],\n                        [nextBatchNum]: currentTime\n                    }\n                }));\n                // 更新全局startTime\n                setStartTime(currentTime);\n            }\n\n            // 更新永久翻转状态\n            const permanentFlips = permanentFlippedCoins[playerId] || [];\n            const currentFlips = flippedCoins[playerId] || [];\n            const allFlips = Array.from(new Set([...permanentFlips, ...currentFlips]));\n\n            setFlippedCoins(prev => ({\n                ...prev,\n                [playerId]: allFlips\n            }));\n\n            // 保存当前批次的累计时间\n            const batchStartTime = (batchStartTimes[batchNum] || {})[batchNum];\n            if (batchStartTime) {\n                const previousTime = (batchElapsedTimes[batchNum] || {})[playerId] || 0;\n                const elapsedTime = currentTime - batchStartTime + previousTime;\n                setBatchElapsedTimes(prev => ({\n                    ...prev,\n                    [batchNum]: {\n                        ...(prev[batchNum] || {}),\n                        [playerId]: elapsedTime\n                    }\n                }));\n            }\n\n        } catch (error) {\n            console.error('Error completing sub-batch:', error);\n            setError('Failed to complete sub-batch');\n        }\n    };\n\n    // 添加一个新的useEffect来处理新任务的接收\n    useEffect(() => {\n        if (!game || !playerId) return;\n\n        const currentPlayer = game.players.find(p => p.id === playerId);\n        if (!currentPlayer) return;\n\n        const currentBatchTasks = game.tasks.filter(t => \n            t.batch_number === currentPlayer.current_batch && \n            t.assigned_to === playerId\n        );\n\n        // 当收到新的PENDING任务时，设置新的开始时间\n        if (currentBatchTasks.length > 0 && \n            currentBatchTasks.every(t => t.status === TaskStatus.PENDING) &&\n            currentPlayer.status === PlayerStatus.ACTIVE) {\n            const currentTime = Date.now();\n            const currentBatch = currentPlayer.current_batch;\n            \n            // 设置新批次的开始时间\n            setBatchStartTimes(prev => ({\n                ...prev,\n                [currentBatch]: {\n                    ...(prev[currentBatch] || {}),\n                    [currentBatch]: currentTime\n                }\n            }));\n        }\n    }, [game?.tasks, game?.players, playerId]);\n\n    return (\n        <Container>\n            {!gameId ? (\n                <>\n                    {renderMainMenu()}\n                    {renderHelpDialog()}\n                </>\n            ) : game ? (\n                renderGame()\n            ) : (\n                <CircularProgress />\n            )}\n            \n            {error && (\n                <Alert severity=\"error\" sx={{ mt: 2 }}>\n                    {error}\n                </Alert>\n            )}\n        </Container>\n    );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}