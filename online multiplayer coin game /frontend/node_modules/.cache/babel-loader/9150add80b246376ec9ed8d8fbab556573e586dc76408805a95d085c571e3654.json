{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Tabs, Tab, Alert, Chip, keyframes, Stack, TableContainer, Table, TableHead, TableBody, TableCell, TableRow, Paper, Container, CircularProgress } from '@mui/material';\nimport { TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Game = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  const [gameId, setGameId] = useState(initialGameId);\n  const [game, setGame] = useState(null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerId, setPlayerId] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n  const [playerCount, setPlayerCount] = useState(2);\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showResultPage, setShowResultPage] = useState(false);\n  const [batchCompletionTimes, setBatchCompletionTimes] = useState({});\n  const [batchStartTimes, setBatchStartTimes] = useState({});\n  const [batchFlipStates, setBatchFlipStates] = useState({});\n\n  // 添加状态来跟踪硬币的翻转状态和批次完成状态\n  const [flippedCoins, setFlippedCoins] = useState([]);\n  const [pendingBatchCompletion, setPendingBatchCompletion] = useState({});\n\n  // 添加翻转动画状态\n\n  const [flipStates, setFlipStates] = useState({});\n\n  // 修改计时器状态和开始时间状态\n  const [elapsedTime, setElapsedTime] = useState(0);\n\n  // 添加批次统计时间的状态\n  const [batchStats, setBatchStats] = useState({});\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, updatedGame => {\n        console.log('Game state updated:', updatedGame);\n        setGame(updatedGame);\n      });\n      service.connect();\n      setWsService(service);\n\n      // Cleanup function\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  useEffect(() => {\n    let timerInterval = null;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && startTime) {\n      timerInterval = setInterval(() => {\n        setCurrentTime(Date.now() - startTime);\n      }, 1000);\n    }\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'completed' && startTime && !endTime) {\n      setEndTime(Date.now());\n      setShowResultPage(true);\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime, endTime]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && game.players) {\n      const newStartTimes = {\n        ...batchStartTimes\n      };\n      const newCompletionTimes = {\n        ...batchCompletionTimes\n      };\n      game.players.forEach(player => {\n        if (!newStartTimes[player.current_batch]) {\n          newStartTimes[player.current_batch] = {};\n        }\n        if (!newCompletionTimes[player.current_batch]) {\n          newCompletionTimes[player.current_batch] = {};\n        }\n\n        // 使用后端提供的批次开始时间\n        if (player.batch_start_time) {\n          Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n            newStartTimes[player.current_batch][Number(batchNum)] = startTime;\n          });\n        }\n\n        // Calculate completion times for each batch\n        for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n          var _newStartTimes$player;\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const startedAt = (_newStartTimes$player = newStartTimes[player.current_batch]) === null || _newStartTimes$player === void 0 ? void 0 : _newStartTimes$player[batchNum];\n          if (startedAt && batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[player.current_batch][player.id]) {\n            newCompletionTimes[player.current_batch][player.id] = Date.now() - startedAt;\n          }\n        }\n      });\n      setBatchStartTimes(newStartTimes);\n      setBatchCompletionTimes(newCompletionTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players]);\n\n  // 添加错误处理函数\n  const handleGameUpdate = updatedGame => {\n    console.log('Handling game update:', updatedGame);\n    setGame(updatedGame);\n    if (updatedGame.status === 'completed' && !endTime) {\n      setEndTime(Date.now());\n    }\n  };\n  const handleCreateGame = async e => {\n    e.preventDefault();\n    try {\n      setError(null);\n      console.log('Creating game with params:', {\n        playerCount,\n        maxBatches: 4,\n        tasksPerBatch: 0\n      });\n\n      // 创建游戏\n      const newGameId = await gameService.createGame(playerCount, 4, 0);\n      console.log('Game created with ID:', newGameId);\n      if (!newGameId) {\n        throw new Error('Failed to create game - no game ID received');\n      }\n\n      // 加入游戏\n      const newPlayerId = await gameService.joinGame(newGameId, playerName);\n      console.log('Joined game with player ID:', newPlayerId);\n      if (!newPlayerId) {\n        throw new Error('Failed to join game - no player ID received');\n      }\n\n      // 更新状态\n      setGameId(newGameId);\n      setPlayerId(newPlayerId);\n\n      // 获取初始游戏状态\n      const initialGameState = await gameService.getGameState(newGameId);\n      console.log('Initial game state:', initialGameState);\n      setGame(initialGameState);\n\n      // 创建 WebSocket 连接\n      const ws = new WebSocketService(newGameId, newPlayerId, handleGameUpdate);\n      console.log('Creating WebSocket connection with:', {\n        newGameId,\n        newPlayerId\n      });\n      await ws.connect();\n      setWsService(ws);\n\n      // 关闭创建游戏对话框\n      setShowJoinDialog(false);\n    } catch (err) {\n      console.error('Error in handleCreateGame:', err);\n      setError(err instanceof Error ? err.message : 'Failed to create game');\n    }\n  };\n  const handleJoinGame = async e => {\n    e.preventDefault();\n    try {\n      setError(null);\n      if (joinGameId) {\n        // 检查游戏是否存在\n        const exists = await gameService.checkGameExists(joinGameId);\n        if (!exists) {\n          setError('Game not found');\n          return;\n        }\n\n        // 加入游戏\n        const newPlayerId = await gameService.joinGame(joinGameId, playerName);\n        console.log('Joined game with player ID:', newPlayerId);\n        if (!newPlayerId) {\n          throw new Error('Failed to join game - no player ID received');\n        }\n\n        // 更新状态\n        setGameId(joinGameId);\n        setPlayerId(newPlayerId);\n\n        // 获取游戏状态\n        const gameState = await gameService.getGameState(joinGameId);\n        console.log('Initial game state:', gameState);\n        setGame(gameState);\n\n        // 创建 WebSocket 连接\n        const ws = new WebSocketService(joinGameId, newPlayerId, handleGameUpdate);\n        console.log('Creating WebSocket connection with:', {\n          joinGameId,\n          newPlayerId\n        });\n        await ws.connect();\n        setWsService(ws);\n\n        // 关闭加入游戏对话框\n        setShowJoinDialog(false);\n      }\n    } catch (err) {\n      console.error('Error joining game:', err);\n      setError(err instanceof Error ? err.message : 'Failed to join game');\n    }\n  };\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      const currentTime = Date.now();\n      setStartTime(currentTime);\n      setBatchStartTimes(prev => ({\n        ...prev,\n        1: {\n          1: currentTime\n        }\n      }));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to start game');\n    }\n  };\n  const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n  // 添加一个专门用于渲染目标硬币的函数\n  const renderTargetCoin = type => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: {\n          xs: '20px',\n          sm: '32px'\n        },\n        height: {\n          xs: '20px',\n          sm: '32px'\n        },\n        borderRadius: '50%',\n        border: theme => ({\n          xs: `1px solid ${theme.palette.primary.main}`,\n          sm: `2px solid ${theme.palette.primary.main}`\n        }),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: theme => theme.palette.background.paper,\n        color: theme => theme.palette.text.primary,\n        fontSize: {\n          xs: '0.7rem',\n          sm: '0.9rem'\n        },\n        fontWeight: 'bold',\n        marginBottom: {\n          xs: 0,\n          sm: 1\n        },\n        marginRight: 1\n      },\n      children: type === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 检查批次是否所有硬币都已翻转\n  const isBatchAllFlipped = (batchNum, playerId) => {\n    const batchTasks = game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === playerId);\n    return (batchTasks === null || batchTasks === void 0 ? void 0 : batchTasks.every(t => flippedCoins.includes(t.id))) || false;\n  };\n\n  // 处理硬币翻转\n  const handleCoinFlip = taskId => {\n    const task = game === null || game === void 0 ? void 0 : game.tasks.find(t => t.id === taskId);\n    if (!task || !game) return;\n\n    // 如果硬币已经翻转，不做任何操作\n    if (flippedCoins.includes(taskId)) return;\n\n    // 开始翻转动画\n    setFlipStates(prev => ({\n      ...prev,\n      [taskId]: {\n        isFlipping: true,\n        showOpposite: false\n      }\n    }));\n\n    // 动画完成后记录翻转状态\n    setTimeout(() => {\n      setFlipStates(prev => ({\n        ...prev,\n        [taskId]: {\n          isFlipping: false,\n          showOpposite: true\n        }\n      }));\n\n      // 记录硬币已翻转\n      setFlippedCoins(prev => [...prev, taskId]);\n\n      // 更新待完成的批次\n      setPendingBatchCompletion(prev => {\n        const newState = {\n          ...prev\n        };\n        if (!newState[task.batch_number]) {\n          newState[task.batch_number] = [];\n        }\n        if (!newState[task.batch_number].includes(taskId)) {\n          newState[task.batch_number] = [...newState[task.batch_number], taskId];\n        }\n        return newState;\n      });\n\n      // 检查是否所有硬币都已翻转\n      if (task.assigned_to && isBatchAllFlipped(task.batch_number, task.assigned_to)) {\n        handleCompleteBatch(task.batch_number);\n      }\n    }, 600);\n  };\n\n  // 处理批次完成\n  const handleCompleteBatch = batchNum => {\n    const pendingTasks = pendingBatchCompletion[batchNum] || [];\n    if (pendingTasks.length === 0) return;\n\n    // 发送所有任务完成的请求\n    pendingTasks.forEach(taskId => {\n      if (wsService) {\n        wsService.completeTask(taskId);\n      }\n    });\n\n    // 清理这个批次的待完成状态\n    setPendingBatchCompletion(prev => {\n      const newState = {\n        ...prev\n      };\n      delete newState[batchNum];\n      return newState;\n    });\n  };\n\n  // 修改渲染硬币的函数\n  const renderCoin = (type, isFlipping, isSmall = false, onClick, taskId) => {\n    const flipState = taskId ? flipStates[taskId] : undefined;\n    const isFlipped = taskId ? flippedCoins.includes(taskId) : false;\n\n    // 决定显示哪一面\n    const displayType = isFlipped ? type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS : type;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: isSmall ? 20 : 32,\n        height: isSmall ? 20 : 32,\n        borderRadius: '50%',\n        backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n        border: `${isSmall ? 1 : 2}px solid #B8860B`,\n        color: '#704214',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 'bold',\n        fontSize: isSmall ? '0.6rem' : '0.8rem',\n        perspective: 1000,\n        mb: isSmall ? 0 : 1,\n        position: 'relative',\n        cursor: onClick ? 'pointer' : 'default',\n        transition: 'transform 0.6s',\n        transformStyle: 'preserve-3d',\n        transform: flipState !== null && flipState !== void 0 && flipState.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n        '&:hover': onClick ? {\n          transform: 'scale(1.05)',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n        } : {},\n        '&:active': onClick ? {\n          transform: 'scale(0.95)'\n        } : {},\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          borderRadius: '50%',\n          background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n          pointerEvents: 'none'\n        }\n      },\n      onClick: onClick,\n      children: displayType === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 监听游戏状态变化\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks) {\n      // 检查是否有新的批次开始\n      game.players.forEach(player => {\n        const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n        const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n\n        // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n        if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n          // 清理上一个批次的翻转状态\n          const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n          const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n          setFlippedCoins(prev => prev.filter(id => !prevBatchTaskIds.includes(id)));\n        }\n      });\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks]);\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n\n  // 渲染任务行\n  const renderTaskRow = tasks => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: 1,\n        mb: 2\n      },\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: renderCoin(task.type, false, false, task.assigned_to === playerId && !flippedCoins.includes(task.id) ? () => handleCoinFlip(task.id) : undefined, task.id)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染玩家卡片\n  const renderPlayer = player => {\n    var _currentBatchTasks$;\n    const currentBatchTasks = (game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === player.current_batch && t.assigned_to === player.id)) || [];\n    const completedTasks = (game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.status === TaskStatus.COMPLETED && t.assigned_to === player.id)) || [];\n\n    // 获取当前批次的目标类型\n    const currentBatchTarget = (_currentBatchTasks$ = currentBatchTasks[0]) === null || _currentBatchTasks$ === void 0 ? void 0 : _currentBatchTasks$.type;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: player.status,\n            color: player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\",\n            size: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2,\n            bgcolor: 'background.default',\n            p: 2,\n            borderRadius: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              mb: 1\n            },\n            children: [\"Current Batch: \", player.current_batch, \" / \", game === null || game === void 0 ? void 0 : game.max_batches, currentBatchTarget && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                mt: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  mr: 1\n                },\n                children: \"Target:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 588,\n                columnNumber: 37\n              }, this), renderCoin(currentBatchTarget, false, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              color: \"text.secondary\",\n              children: \"Current Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 29\n            }, this), renderTaskRow(currentBatchTasks)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 25\n          }, this), completedTasks.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              color: \"text.secondary\",\n              children: \"Completed Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 33\n            }, this), renderTaskRow(completedTasks)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 29\n          }, this), player.id === playerId && isBatchAllFlipped(player.current_batch, player.id) && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => handleCompleteBatch(player.current_batch),\n            sx: {\n              mt: 2\n            },\n            children: \"Complete This Batch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 17\n      }, this)\n    }, player.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 13\n    }, this);\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n\n  // 添加一个辅助函数来处理毫秒到时间的转换\n  const formatTimeFromMs = ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTimeFromMs(endTime - startTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteGame = () => {\n    setShowResultPage(true);\n  };\n\n  // 修改返回主菜单的处理函数\n  const handleReturnToMainMenu = () => {\n    // 清除游戏状态\n    setGameId('');\n    setGame(null);\n    setWsService(null);\n    setStartTime(null);\n    setEndTime(null);\n    // 清除输入记录\n    setPlayerName('');\n    setPlayerCount(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const renderResultPage = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 600,\n          width: '100%',\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            mb: 3,\n            color: 'primary.main'\n          },\n          children: \"Game Complete! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            mb: 4\n          },\n          children: [\"Total Time: \", formatTimeFromMs(totalTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMainMenu,\n          size: \"large\",\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 725,\n      columnNumber: 13\n    }, this);\n  };\n  const renderStatistics = () => {\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mb: 2,\n          color: 'primary.main'\n        },\n        children: \"Game Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 763,\n        columnNumber: 17\n      }, this), Array.from({\n        length: game.max_batches\n      }, (_, i) => i + 1).map(batchNum => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: [\"Batch \", batchNum]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          sx: {\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Player\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 775,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 776,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 777,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 774,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 773,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [game.players.map(player => {\n                var _player$batch_start_t, _player$batch_complet, _player$batch_start_t2;\n                const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n                const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                const hasStarted = ((_player$batch_start_t = player.batch_start_time) === null || _player$batch_start_t === void 0 ? void 0 : _player$batch_start_t[batchNum]) != null;\n                const completionTime = (_player$batch_complet = player.batch_completion_time) === null || _player$batch_complet === void 0 ? void 0 : _player$batch_complet[batchNum];\n                const startTime = (_player$batch_start_t2 = player.batch_start_time) === null || _player$batch_start_t2 === void 0 ? void 0 : _player$batch_start_t2[batchNum];\n\n                // 计算当前时间（如果批次已开始但未完成）\n                let displayTime = '-';\n                if (completionTime) {\n                  displayTime = formatTimeFromMs(completionTime);\n                } else if (hasStarted && startTime) {\n                  const currentTime = Date.now() - startTime;\n                  displayTime = formatTimeFromMs(currentTime);\n                }\n                let status = 'Pending';\n                if (isCompleted) {\n                  status = 'Completed';\n                } else if (hasStarted) {\n                  status = 'In Progress';\n                }\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: player.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 809,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: displayTime\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 810,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: /*#__PURE__*/_jsxDEV(Chip, {\n                      label: status,\n                      size: \"small\",\n                      color: isCompleted ? 'success' : hasStarted ? 'primary' : 'default'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 812,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 811,\n                    columnNumber: 49\n                  }, this)]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 808,\n                  columnNumber: 45\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(TableRow, {\n                sx: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                },\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 822,\n                    columnNumber: 52\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 822,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: formatTimeFromMs(game.players.reduce((sum, p) => {\n                      var _p$batch_completion_t;\n                      return sum + (((_p$batch_completion_t = p.batch_completion_time) === null || _p$batch_completion_t === void 0 ? void 0 : _p$batch_completion_t[batchNum]) || 0);\n                    }, 0))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 824,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 823,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 831,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 821,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 780,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 772,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 771,\n          columnNumber: 25\n        }, this)]\n      }, batchNum, true, {\n        fileName: _jsxFileName,\n        lineNumber: 767,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 762,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 添加调试日志\n  useEffect(() => {\n    console.log('Current game state:', {\n      gameId,\n      playerId,\n      game,\n      wsService\n    });\n  }, [gameId, playerId, game, wsService]);\n\n  // 更新计时器\n  useEffect(() => {\n    let intervalId;\n    if (startTime && (game === null || game === void 0 ? void 0 : game.status) === 'in_progress') {\n      intervalId = setInterval(() => {\n        setElapsedTime(Date.now() - startTime);\n      }, 1000);\n    }\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [startTime, game === null || game === void 0 ? void 0 : game.status]);\n\n  // 跟踪批次完成时间\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && startTime) {\n      const newCompletionTimes = {\n        ...batchCompletionTimes\n      };\n      const newStartTimes = {\n        ...batchStartTimes\n      };\n      const currentBatch = Math.max(...game.tasks.map(t => t.batch_number));\n\n      // 初始化新批次的开始时间\n      game.players.forEach(player => {\n        const currentBatchNum = player.current_batch;\n        if (!newStartTimes[currentBatchNum]) {\n          newStartTimes[currentBatchNum] = {};\n        }\n\n        // 记录批次开始时间\n        if (player.batch_start_time) {\n          Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n            if (!newStartTimes[currentBatchNum][Number(batchNum)]) {\n              newStartTimes[currentBatchNum][Number(batchNum)] = startTime;\n            }\n          });\n        }\n      });\n\n      // 计算完成时间\n      for (let batchNum = 1; batchNum <= currentBatch; batchNum++) {\n        if (!newCompletionTimes[batchNum]) {\n          newCompletionTimes[batchNum] = {};\n        }\n        game.players.forEach(player => {\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          if (batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[batchNum][player.id]) {\n            var _newStartTimes$batchN;\n            const batchStartTime = ((_newStartTimes$batchN = newStartTimes[batchNum]) === null || _newStartTimes$batchN === void 0 ? void 0 : _newStartTimes$batchN[batchNum]) || startTime;\n            newCompletionTimes[batchNum][player.id] = Date.now() - batchStartTime;\n          }\n        });\n      }\n      setBatchStartTimes(newStartTimes);\n      setBatchCompletionTimes(newCompletionTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, startTime, batchStartTimes]);\n\n  // 更新批次统计信息\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && startTime) {\n      const newStats = {\n        ...batchStats\n      };\n\n      // 遍历每个批次\n      for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n        if (!newStats[batchNum]) {\n          newStats[batchNum] = {};\n        }\n\n        // 遍历每个玩家\n        game.players.forEach(player => {\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const completedTasks = batchTasks.filter(t => t.status === TaskStatus.COMPLETED);\n\n          // 如果这个批次的所有任务都完成了，记录完成时间\n          if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n            // 只在第一次完成时记录时间\n            if (!newStats[batchNum][player.id]) {\n              newStats[batchNum][player.id] = {\n                completionTime: elapsedTime,\n                tasksCompleted: completedTasks.length,\n                totalTasks: batchTasks.length\n              };\n            }\n          } else if (batchTasks.length > 0) {\n            // 更新进行中的任务状态\n            newStats[batchNum][player.id] = {\n              completionTime: 0,\n              tasksCompleted: completedTasks.length,\n              totalTasks: batchTasks.length\n            };\n          }\n        });\n      }\n      setBatchStats(newStats);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, startTime, elapsedTime]);\n\n  // 修改统计页面中的完成时间显示\n  const renderBatchStatistics = (batchNum, player) => {\n    var _batchStats$batchNum;\n    const stats = (_batchStats$batchNum = batchStats[batchNum]) === null || _batchStats$batchNum === void 0 ? void 0 : _batchStats$batchNum[player.id];\n    return /*#__PURE__*/_jsxDEV(TableRow, {\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        children: player.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 972,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        children: stats !== null && stats !== void 0 && stats.completionTime ? formatTimeFromMs(stats.completionTime) : '-'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 973,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        children: [stats === null || stats === void 0 ? void 0 : stats.tasksCompleted, \"/\", (stats === null || stats === void 0 ? void 0 : stats.totalTasks) || 0]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 976,\n        columnNumber: 17\n      }, this)]\n    }, player.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 971,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染主菜单\n  const renderMainMenu = () => /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 600,\n      width: '100%',\n      mx: 'auto',\n      mt: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n        p: 4,\n        borderTopLeftRadius: 8,\n        borderTopRightRadius: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        sx: {\n          fontWeight: 'bold',\n          background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent',\n          textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n          textAlign: 'center',\n          mb: 1\n        },\n        children: \"Online Multiplayer Coin Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 998,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"text.secondary\",\n        align: \"center\",\n        children: \"Flip coins with your friends in this multiplayer game!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1009,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 992,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        background: '#ffffff',\n        p: 4,\n        borderBottomLeftRadius: 8,\n        borderBottomRightRadius: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Tabs, {\n        value: activeTab,\n        onChange: (e, newValue) => {\n          setActiveTab(newValue);\n          // 切换标签时也清除输入\n          setPlayerName('');\n          setPlayerCount(2);\n          setJoinGameId('');\n          setError(null);\n        },\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"CREATE GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1029,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"JOIN GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1021,\n        columnNumber: 17\n      }, this), activeTab === 0 ?\n      /*#__PURE__*/\n      // Create game form\n      _jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleCreateGame,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Name\",\n          required: true,\n          value: playerName,\n          onChange: e => setPlayerName(e.target.value),\n          sx: {\n            mb: 2\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1036,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Number of Players\",\n          type: \"number\",\n          required: true,\n          value: playerCount,\n          onChange: e => setPlayerCount(Number(e.target.value)),\n          inputProps: {\n            min: 2,\n            max: 5\n          },\n          helperText: \"Minimum 2, maximum 5 players\",\n          sx: {\n            mb: 3\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1045,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: !playerName || playerCount < 2 || playerCount > 5,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1057,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1035,\n        columnNumber: 21\n      }, this) :\n      /*#__PURE__*/\n      // Join game form\n      _jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleJoinGame,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Name\",\n          required: true,\n          value: playerName,\n          onChange: e => setPlayerName(e.target.value),\n          sx: {\n            mb: 2\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Game Code\",\n          required: true,\n          value: joinGameId,\n          onChange: e => setJoinGameId(e.target.value),\n          sx: {\n            mb: 3\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1078,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: !playerName || !joinGameId,\n          children: \"Join Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1087,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1068,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1015,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 985,\n    columnNumber: 9\n  }, this);\n  const renderGame = () => {\n    var _game$players$;\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 1,\n              color: 'primary.main'\n            },\n            children: [\"Game ID: \", game.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1114,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              color: 'text.primary'\n            },\n            children: [\"Status: \", game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1117,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 21\n        }, this), (game.status === 'in_progress' || game.status === 'completed') && startTime && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'text.secondary'\n          },\n          children: [\"Time: \", formatTimeFromMs(elapsedTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1122,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1107,\n        columnNumber: 17\n      }, this), game.status === 'waiting' && playerId === ((_game$players$ = game.players[0]) === null || _game$players$ === void 0 ? void 0 : _game$players$.id) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartGame,\n        sx: {\n          mb: 3\n        },\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1130,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 3,\n            children: game.players.map(renderPlayer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1143,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: renderStatistics()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1149,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1140,\n        columnNumber: 17\n      }, this), game.status === 'completed' && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4,\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMainMenu,\n          sx: {\n            minWidth: 200,\n            borderRadius: 2\n          },\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1157,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1156,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1105,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [!gameId ? renderMainMenu() : game ? renderGame() : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1180,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mt: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1184,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1174,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"fndMRq24EiM6h1Zw0SqmvPVtInA=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","keyframes","Stack","TableContainer","Table","TableHead","TableBody","TableCell","TableRow","Paper","Container","CircularProgress","TaskStatus","PlayerStatus","TaskType","gameService","WebSocketService","jsxDEV","_jsxDEV","Game","gameId","initialGameId","_s","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","currentTime","setCurrentTime","showResultPage","setShowResultPage","batchCompletionTimes","setBatchCompletionTimes","batchStartTimes","setBatchStartTimes","batchFlipStates","setBatchFlipStates","flippedCoins","setFlippedCoins","pendingBatchCompletion","setPendingBatchCompletion","flipStates","setFlipStates","elapsedTime","setElapsedTime","batchStats","setBatchStats","service","updatedGame","console","log","connect","disconnect","status","Date","now","timerInterval","setInterval","clearInterval","tasks","players","newStartTimes","newCompletionTimes","forEach","player","current_batch","batch_start_time","Object","entries","batchNum","Number","max_batches","_newStartTimes$player","batchTasks","filter","t","batch_number","assigned_to","id","startedAt","length","every","COMPLETED","handleGameUpdate","handleCreateGame","e","preventDefault","tasksPerBatch","newGameId","createGame","Error","newPlayerId","joinGame","initialGameState","getGameState","ws","err","message","handleJoinGame","exists","checkGameExists","gameState","handleStartGame","startGame","prev","flipAnimation","renderTargetCoin","type","sx","width","xs","sm","height","borderRadius","border","theme","palette","primary","main","display","alignItems","justifyContent","backgroundColor","background","paper","color","text","fontSize","fontWeight","marginBottom","marginRight","children","HEADS","fileName","_jsxFileName","lineNumber","columnNumber","isBatchAllFlipped","includes","handleCoinFlip","taskId","task","find","isFlipping","showOpposite","setTimeout","newState","handleCompleteBatch","pendingTasks","completeTask","renderCoin","isSmall","onClick","flipState","undefined","isFlipped","displayType","TAILS","perspective","mb","position","cursor","transition","transformStyle","transform","boxShadow","content","top","left","right","bottom","pointerEvents","playerTasks","currentBatchTasks","PENDING","prevBatchTasks","prevBatchTaskIds","map","getPlayerStatusColor","ACTIVE","WAITING","IDLE","getTaskStatusColor","IN_PROGRESS","renderTaskRow","flexWrap","gap","renderPlayer","_currentBatchTasks$","completedTasks","currentBatchTarget","variant","name","label","size","bgcolor","p","mt","mr","handleTabChange","_","newValue","handleGameComplete","formatTimeFromMs","ms","totalSeconds","Math","floor","minutes","seconds","toString","padStart","renderCompletionDialog","totalTime","open","onClose","PaperProps","textAlign","flexDirection","py","window","location","reload","handleCompleteGame","handleReturnToMainMenu","renderResultPage","minHeight","maxWidth","renderStatistics","Array","from","i","component","align","_player$batch_start_t","_player$batch_complet","_player$batch_start_t2","isCompleted","hasStarted","completionTime","batch_completion_time","displayTime","reduce","sum","_p$batch_completion_t","intervalId","currentBatch","max","currentBatchNum","_newStartTimes$batchN","batchStartTime","newStats","tasksCompleted","totalTasks","renderBatchStatistics","_batchStats$batchNum","stats","renderMainMenu","mx","borderTopLeftRadius","borderTopRightRadius","WebkitBackgroundClip","WebkitTextFillColor","textShadow","borderBottomLeftRadius","borderBottomRightRadius","value","onChange","onSubmit","fullWidth","required","target","autoComplete","inputProps","min","helperText","disabled","renderGame","_game$players$","container","spacing","item","md","minWidth","severity","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes,\n    Stack,\n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableCell,\n    TableRow,\n    Paper,\n    Container,\n    CircularProgress\n} from '@mui/material';\nimport { Game as GameType, Player, Task, TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\n\ninterface GameProps {\n    gameId?: string;\n}\n\ntype TabType = 0 | 1;\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | undefined>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState<TabType>(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n    const [batchCompletionTimes, setBatchCompletionTimes] = useState<{[key: number]: {[key: string]: number}}>({});\n    const [batchStartTimes, setBatchStartTimes] = useState<{[key: number]: {[key: number]: number}}>({});\n    const [batchFlipStates, setBatchFlipStates] = useState<{\n        [batchNum: number]: {\n            [taskId: string]: boolean;  // true means flipped\n        };\n    }>({});\n\n    // 添加状态来跟踪硬币的翻转状态和批次完成状态\n    const [flippedCoins, setFlippedCoins] = useState<string[]>([]);\n    const [pendingBatchCompletion, setPendingBatchCompletion] = useState<{\n        [batchNum: number]: string[];  // batchNum -> taskIds\n    }>({});\n\n    // 添加翻转动画状态\n    interface FlipState {\n        isFlipping: boolean;\n        showOpposite: boolean;\n    }\n    const [flipStates, setFlipStates] = useState<{\n        [key: string]: FlipState;\n    }>({});\n\n    // 修改计时器状态和开始时间状态\n    const [elapsedTime, setElapsedTime] = useState<number>(0);\n\n    // 添加批次统计时间的状态\n    const [batchStats, setBatchStats] = useState<{\n        [batchNum: number]: {\n            [playerId: string]: {\n                completionTime: number;\n                tasksCompleted: number;\n                totalTasks: number;\n            }\n        }\n    }>({});\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, (updatedGame) => {\n                console.log('Game state updated:', updatedGame);\n                setGame(updatedGame);\n            });\n            service.connect();\n            setWsService(service);\n\n            // Cleanup function\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && startTime) {\n            timerInterval = setInterval(() => {\n                setCurrentTime(Date.now() - startTime);\n            }, 1000);\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, startTime, endTime]);\n\n    useEffect(() => {\n        if (game?.tasks && game.players) {\n            const newStartTimes = { ...batchStartTimes };\n            const newCompletionTimes = { ...batchCompletionTimes };\n\n            game.players.forEach(player => {\n                if (!newStartTimes[player.current_batch]) {\n                    newStartTimes[player.current_batch] = {};\n                }\n                if (!newCompletionTimes[player.current_batch]) {\n                    newCompletionTimes[player.current_batch] = {};\n                }\n\n                // 使用后端提供的批次开始时间\n                if (player.batch_start_time) {\n                    Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n                        newStartTimes[player.current_batch][Number(batchNum)] = startTime;\n                    });\n                }\n\n                // Calculate completion times for each batch\n                for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const startedAt = newStartTimes[player.current_batch]?.[batchNum];\n                    if (startedAt && \n                        batchTasks.length > 0 && \n                        batchTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                        !newCompletionTimes[player.current_batch][player.id]) {\n                        newCompletionTimes[player.current_batch][player.id] = Date.now() - startedAt;\n                    }\n                }\n            });\n\n            setBatchStartTimes(newStartTimes);\n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.tasks, game?.players]);\n\n    // 添加错误处理函数\n    const handleGameUpdate = (updatedGame: GameType) => {\n        console.log('Handling game update:', updatedGame);\n        setGame(updatedGame);\n        if (updatedGame.status === 'completed' && !endTime) {\n            setEndTime(Date.now());\n        }\n    };\n\n    const handleCreateGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            console.log('Creating game with params:', { playerCount, maxBatches: 4, tasksPerBatch: 0 });\n            \n            // 创建游戏\n            const newGameId = await gameService.createGame(playerCount, 4, 0);\n            console.log('Game created with ID:', newGameId);\n            \n            if (!newGameId) {\n                throw new Error('Failed to create game - no game ID received');\n            }\n            \n            // 加入游戏\n            const newPlayerId = await gameService.joinGame(newGameId, playerName);\n            console.log('Joined game with player ID:', newPlayerId);\n            \n            if (!newPlayerId) {\n                throw new Error('Failed to join game - no player ID received');\n            }\n            \n            // 更新状态\n            setGameId(newGameId);\n            setPlayerId(newPlayerId);\n            \n            // 获取初始游戏状态\n            const initialGameState = await gameService.getGameState(newGameId);\n            console.log('Initial game state:', initialGameState);\n            setGame(initialGameState);\n            \n            // 创建 WebSocket 连接\n            const ws = new WebSocketService(newGameId, newPlayerId, handleGameUpdate);\n            console.log('Creating WebSocket connection with:', { newGameId, newPlayerId });\n            await ws.connect();\n            setWsService(ws);\n            \n            // 关闭创建游戏对话框\n            setShowJoinDialog(false);\n            \n        } catch (err) {\n            console.error('Error in handleCreateGame:', err);\n            setError(err instanceof Error ? err.message : 'Failed to create game');\n        }\n    };\n\n    const handleJoinGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            if (joinGameId) {\n                // 检查游戏是否存在\n                const exists = await gameService.checkGameExists(joinGameId);\n                if (!exists) {\n                    setError('Game not found');\n                    return;\n                }\n                \n                // 加入游戏\n                const newPlayerId = await gameService.joinGame(joinGameId, playerName);\n                console.log('Joined game with player ID:', newPlayerId);\n                \n                if (!newPlayerId) {\n                    throw new Error('Failed to join game - no player ID received');\n                }\n                \n                // 更新状态\n                setGameId(joinGameId);\n                setPlayerId(newPlayerId);\n                \n                // 获取游戏状态\n                const gameState = await gameService.getGameState(joinGameId);\n                console.log('Initial game state:', gameState);\n                setGame(gameState);\n                \n                // 创建 WebSocket 连接\n                const ws = new WebSocketService(joinGameId, newPlayerId, handleGameUpdate);\n                console.log('Creating WebSocket connection with:', { joinGameId, newPlayerId });\n                await ws.connect();\n                setWsService(ws);\n                \n                // 关闭加入游戏对话框\n                setShowJoinDialog(false);\n            }\n        } catch (err) {\n            console.error('Error joining game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to join game');\n        }\n    };\n\n    const handleStartGame = async () => {\n        if (!gameId) return;\n        \n        try {\n            await gameService.startGame(gameId);\n            const currentTime = Date.now();\n            setStartTime(currentTime);\n            setBatchStartTimes(prev => ({\n                ...prev,\n                1: { 1: currentTime }\n            }));\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Failed to start game');\n        }\n    };\n\n    const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n    // 添加一个专门用于渲染目标硬币的函数\n    const renderTargetCoin = (type: TaskType) => {\n        return (\n            <Box\n                sx={{\n                    width: { xs: '20px', sm: '32px' },\n                    height: { xs: '20px', sm: '32px' },\n                    borderRadius: '50%',\n                    border: theme => ({\n                        xs: `1px solid ${theme.palette.primary.main}`,\n                        sm: `2px solid ${theme.palette.primary.main}`\n                    }),\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    backgroundColor: theme => theme.palette.background.paper,\n                    color: theme => theme.palette.text.primary,\n                    fontSize: { xs: '0.7rem', sm: '0.9rem' },\n                    fontWeight: 'bold',\n                    marginBottom: { xs: 0, sm: 1 },\n                    marginRight: 1\n                }}\n            >\n                {type === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 检查批次是否所有硬币都已翻转\n    const isBatchAllFlipped = (batchNum: number, playerId: string) => {\n        const batchTasks = game?.tasks.filter(t => \n            t.batch_number === batchNum && \n            t.assigned_to === playerId\n        );\n        return batchTasks?.every(t => flippedCoins.includes(t.id)) || false;\n    };\n\n    // 处理硬币翻转\n    const handleCoinFlip = (taskId: string) => {\n        const task = game?.tasks.find(t => t.id === taskId);\n        if (!task || !game) return;\n\n        // 如果硬币已经翻转，不做任何操作\n        if (flippedCoins.includes(taskId)) return;\n\n        // 开始翻转动画\n        setFlipStates(prev => ({\n            ...prev,\n            [taskId]: { \n                isFlipping: true,\n                showOpposite: false\n            }\n        }));\n\n        // 动画完成后记录翻转状态\n        setTimeout(() => {\n            setFlipStates(prev => ({\n                ...prev,\n                [taskId]: { \n                    isFlipping: false,\n                    showOpposite: true\n                }\n            }));\n            \n            // 记录硬币已翻转\n            setFlippedCoins(prev => [...prev, taskId]);\n\n            // 更新待完成的批次\n            setPendingBatchCompletion(prev => {\n                const newState = { ...prev };\n                if (!newState[task.batch_number]) {\n                    newState[task.batch_number] = [];\n                }\n                if (!newState[task.batch_number].includes(taskId)) {\n                    newState[task.batch_number] = [...newState[task.batch_number], taskId];\n                }\n                return newState;\n            });\n\n            // 检查是否所有硬币都已翻转\n            if (task.assigned_to && isBatchAllFlipped(task.batch_number, task.assigned_to)) {\n                handleCompleteBatch(task.batch_number);\n            }\n        }, 600);\n    };\n\n    // 处理批次完成\n    const handleCompleteBatch = (batchNum: number) => {\n        const pendingTasks = pendingBatchCompletion[batchNum] || [];\n        if (pendingTasks.length === 0) return;\n\n        // 发送所有任务完成的请求\n        pendingTasks.forEach(taskId => {\n            if (wsService) {\n                wsService.completeTask(taskId);\n            }\n        });\n\n        // 清理这个批次的待完成状态\n        setPendingBatchCompletion(prev => {\n            const newState = { ...prev };\n            delete newState[batchNum];\n            return newState;\n        });\n    };\n\n    // 修改渲染硬币的函数\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void, taskId?: string) => {\n        const flipState = taskId ? flipStates[taskId] : undefined;\n        const isFlipped = taskId ? flippedCoins.includes(taskId) : false;\n        \n        // 决定显示哪一面\n        const displayType = isFlipped\n            ? (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) \n            : type;\n\n        return (\n            <Box\n                sx={{\n                    width: isSmall ? 20 : 32,\n                    height: isSmall ? 20 : 32,\n                    borderRadius: '50%',\n                    backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                    border: `${isSmall ? 1 : 2}px solid #B8860B`,\n                    color: '#704214',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontWeight: 'bold',\n                    fontSize: isSmall ? '0.6rem' : '0.8rem',\n                    perspective: 1000,\n                    mb: isSmall ? 0 : 1,\n                    position: 'relative',\n                    cursor: onClick ? 'pointer' : 'default',\n                    transition: 'transform 0.6s',\n                    transformStyle: 'preserve-3d',\n                    transform: flipState?.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n                    '&:hover': onClick ? {\n                        transform: 'scale(1.05)',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                    } : {},\n                    '&:active': onClick ? {\n                        transform: 'scale(0.95)'\n                    } : {},\n                    '&::after': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        borderRadius: '50%',\n                        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                        pointerEvents: 'none'\n                    }\n                }}\n                onClick={onClick}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 监听游戏状态变化\n    useEffect(() => {\n        if (game?.tasks) {\n            // 检查是否有新的批次开始\n            game.players.forEach(player => {\n                const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n                const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n                \n                // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                    // 清理上一个批次的翻转状态\n                    const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n                    const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n                    setFlippedCoins(prev => prev.filter(id => !prevBatchTaskIds.includes(id)));\n                }\n            });\n        }\n    }, [game?.tasks]);\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    // 渲染任务行\n    const renderTaskRow = (tasks: Task[]) => {\n        return (\n            <Box sx={{ \n                display: 'flex', \n                flexWrap: 'wrap',\n                gap: 1,\n                mb: 2 \n            }}>\n                {tasks.map(task => (\n                    <Box\n                        key={task.id}\n                        sx={{\n                            display: 'flex',\n                            alignItems: 'center',\n                        }}>\n                        {renderCoin(\n                            task.type,\n                            false,\n                            false,\n                            task.assigned_to === playerId && !flippedCoins.includes(task.id)\n                                ? () => handleCoinFlip(task.id)\n                                : undefined,\n                            task.id\n                        )}\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    // 渲染玩家卡片\n    const renderPlayer = (player: Player) => {\n        const currentBatchTasks = game?.tasks.filter(t => \n            t.batch_number === player.current_batch && \n            t.assigned_to === player.id\n        ) || [];\n\n        const completedTasks = game?.tasks.filter(t =>\n            t.status === TaskStatus.COMPLETED &&\n            t.assigned_to === player.id\n        ) || [];\n\n        // 获取当前批次的目标类型\n        const currentBatchTarget = currentBatchTasks[0]?.type;\n\n        return (\n            <Card key={player.id} sx={{ mb: 2 }}>\n                <CardContent>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                        <Typography variant=\"h6\">\n                            {player.name}\n                        </Typography>\n                        <Chip \n                            label={player.status}\n                            color={player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\"}\n                            size=\"small\"\n                        />\n                    </Box>\n\n                    <Box sx={{ mb: 2, bgcolor: 'background.default', p: 2, borderRadius: 1 }}>\n                        <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n                            Current Batch: {player.current_batch} / {game?.max_batches}\n                            {currentBatchTarget && (\n                                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\n                                    <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                                        Target:\n                                    </Typography>\n                                    {renderCoin(currentBatchTarget, false, true)}\n                                </Box>\n                            )}\n                        </Typography>\n\n                        <Box sx={{ mb: 2 }}>\n                            <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                                Current Tasks\n                            </Typography>\n                            {renderTaskRow(currentBatchTasks)}\n                        </Box>\n\n                        {completedTasks.length > 0 && (\n                            <Box>\n                                <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                                    Completed Tasks\n                                </Typography>\n                                {renderTaskRow(completedTasks)}\n                            </Box>\n                        )}\n\n                        {player.id === playerId && isBatchAllFlipped(player.current_batch, player.id) && (\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => handleCompleteBatch(player.current_batch)}\n                                sx={{ mt: 2 }}\n                            >\n                                Complete This Batch\n                            </Button>\n                        )}\n                    </Box>\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue as TabType);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    // 添加一个辅助函数来处理毫秒到时间的转换\n    const formatTimeFromMs = (ms: number) => {\n        const totalSeconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed!\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTimeFromMs(endTime - startTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    // 修改返回主菜单的处理函数\n    const handleReturnToMainMenu = () => {\n        // 清除游戏状态\n        setGameId('');\n        setGame(null);\n        setWsService(null);\n        setStartTime(null);\n        setEndTime(null);\n        // 清除输入记录\n        setPlayerName('');\n        setPlayerCount(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTimeFromMs(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMainMenu}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    const renderStatistics = () => {\n        if (!game) return null;\n\n        return (\n            <Box sx={{ p: 2 }}>\n                <Typography variant=\"h6\" sx={{ mb: 2, color: 'primary.main' }}>\n                    Game Statistics\n                </Typography>\n                {Array.from({ length: game.max_batches }, (_, i) => i + 1).map(batchNum => (\n                    <Box key={batchNum} sx={{ mb: 3 }}>\n                        <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                            Batch {batchNum}\n                        </Typography>\n                        <TableContainer component={Paper} sx={{ mb: 2 }}>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Player</TableCell>\n                                        <TableCell align=\"right\">Time</TableCell>\n                                        <TableCell align=\"right\">Status</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {game.players.map(player => {\n                                        const batchTasks = game.tasks.filter(t => \n                                            t.batch_number === batchNum && \n                                            t.assigned_to === player.id\n                                        );\n                                        const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                                        const hasStarted = player.batch_start_time?.[batchNum] != null;\n                                        const completionTime = player.batch_completion_time?.[batchNum];\n                                        const startTime = player.batch_start_time?.[batchNum];\n                                        \n                                        // 计算当前时间（如果批次已开始但未完成）\n                                        let displayTime = '-';\n                                        if (completionTime) {\n                                            displayTime = formatTimeFromMs(completionTime);\n                                        } else if (hasStarted && startTime) {\n                                            const currentTime = Date.now() - startTime;\n                                            displayTime = formatTimeFromMs(currentTime);\n                                        }\n\n                                        let status = 'Pending';\n                                        if (isCompleted) {\n                                            status = 'Completed';\n                                        } else if (hasStarted) {\n                                            status = 'In Progress';\n                                        }\n\n                                        return (\n                                            <TableRow key={player.id}>\n                                                <TableCell>{player.name}</TableCell>\n                                                <TableCell align=\"right\">{displayTime}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Chip \n                                                        label={status}\n                                                        size=\"small\"\n                                                        color={isCompleted ? 'success' : (hasStarted ? 'primary' : 'default')}\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                    <TableRow sx={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}>\n                                        <TableCell><strong>Total</strong></TableCell>\n                                        <TableCell align=\"right\">\n                                            <strong>\n                                                {formatTimeFromMs(game.players.reduce((sum, p) => \n                                                    sum + (p.batch_completion_time?.[batchNum] || 0), \n                                                    0\n                                                ))}\n                                            </strong>\n                                        </TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    // 添加调试日志\n    useEffect(() => {\n        console.log('Current game state:', {\n            gameId,\n            playerId,\n            game,\n            wsService\n        });\n    }, [gameId, playerId, game, wsService]);\n\n    // 更新计时器\n    useEffect(() => {\n        let intervalId: NodeJS.Timeout;\n        \n        if (startTime && game?.status === 'in_progress') {\n            intervalId = setInterval(() => {\n                setElapsedTime(Date.now() - startTime);\n            }, 1000);\n        }\n        \n        return () => {\n            if (intervalId) {\n                clearInterval(intervalId);\n            }\n        };\n    }, [startTime, game?.status]);\n\n    // 跟踪批次完成时间\n    useEffect(() => {\n        if (game?.tasks && startTime) {\n            const newCompletionTimes = { ...batchCompletionTimes };\n            const newStartTimes = { ...batchStartTimes };\n            const currentBatch = Math.max(...game.tasks.map(t => t.batch_number));\n            \n            // 初始化新批次的开始时间\n            game.players.forEach(player => {\n                const currentBatchNum = player.current_batch;\n                if (!newStartTimes[currentBatchNum]) {\n                    newStartTimes[currentBatchNum] = {};\n                }\n                \n                // 记录批次开始时间\n                if (player.batch_start_time) {\n                    Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n                        if (!newStartTimes[currentBatchNum][Number(batchNum)]) {\n                            newStartTimes[currentBatchNum][Number(batchNum)] = startTime;\n                        }\n                    });\n                }\n            });\n            \n            // 计算完成时间\n            for (let batchNum = 1; batchNum <= currentBatch; batchNum++) {\n                if (!newCompletionTimes[batchNum]) {\n                    newCompletionTimes[batchNum] = {};\n                }\n                \n                game.players.forEach(player => {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    if (batchTasks.length > 0 && \n                        batchTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                        !newCompletionTimes[batchNum][player.id]) {\n                        const batchStartTime = newStartTimes[batchNum]?.[batchNum] || startTime;\n                        newCompletionTimes[batchNum][player.id] = Date.now() - batchStartTime;\n                    }\n                });\n            }\n            \n            setBatchStartTimes(newStartTimes);\n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.tasks, startTime, batchStartTimes]);\n\n    // 更新批次统计信息\n    useEffect(() => {\n        if (game?.tasks && startTime) {\n            const newStats = { ...batchStats };\n            \n            // 遍历每个批次\n            for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n                if (!newStats[batchNum]) {\n                    newStats[batchNum] = {};\n                }\n                \n                // 遍历每个玩家\n                game.players.forEach(player => {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const completedTasks = batchTasks.filter(t => \n                        t.status === TaskStatus.COMPLETED\n                    );\n                    \n                    // 如果这个批次的所有任务都完成了，记录完成时间\n                    if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n                        // 只在第一次完成时记录时间\n                        if (!newStats[batchNum][player.id]) {\n                            newStats[batchNum][player.id] = {\n                                completionTime: elapsedTime,\n                                tasksCompleted: completedTasks.length,\n                                totalTasks: batchTasks.length\n                            };\n                        }\n                    } else if (batchTasks.length > 0) {\n                        // 更新进行中的任务状态\n                        newStats[batchNum][player.id] = {\n                            completionTime: 0,\n                            tasksCompleted: completedTasks.length,\n                            totalTasks: batchTasks.length\n                        };\n                    }\n                });\n            }\n            \n            setBatchStats(newStats);\n        }\n    }, [game?.tasks, startTime, elapsedTime]);\n\n    // 修改统计页面中的完成时间显示\n    const renderBatchStatistics = (batchNum: number, player: Player) => {\n        const stats = batchStats[batchNum]?.[player.id];\n        \n        return (\n            <TableRow key={player.id}>\n                <TableCell>{player.name}</TableCell>\n                <TableCell align=\"right\">\n                    {stats?.completionTime ? formatTimeFromMs(stats.completionTime) : '-'}\n                </TableCell>\n                <TableCell align=\"right\">\n                    {stats?.tasksCompleted}/{stats?.totalTasks || 0}\n                </TableCell>\n            </TableRow>\n        );\n    };\n\n    // 渲染主菜单\n    const renderMainMenu = () => (\n        <Card sx={{\n            maxWidth: 600,\n            width: '100%',\n            mx: 'auto',\n            mt: 4\n        }}>\n            {/* Top section with title and subtitle */}\n            <Box sx={{\n                background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n                p: 4,\n                borderTopLeftRadius: 8,\n                borderTopRightRadius: 8\n            }}>\n                <Typography variant=\"h3\" sx={{\n                    fontWeight: 'bold',\n                    background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n                    WebkitBackgroundClip: 'text',\n                    WebkitTextFillColor: 'transparent',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n                    textAlign: 'center',\n                    mb: 1\n                }}>\n                    Online Multiplayer Coin Game\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"text.secondary\" align=\"center\">\n                    Flip coins with your friends in this multiplayer game!\n                </Typography>\n            </Box>\n\n            {/* Bottom section with form */}\n            <Box sx={{\n                background: '#ffffff',\n                p: 4,\n                borderBottomLeftRadius: 8,\n                borderBottomRightRadius: 8\n            }}>\n                <Tabs value={activeTab} onChange={(e, newValue) => {\n                    setActiveTab(newValue as TabType);\n                    // 切换标签时也清除输入\n                    setPlayerName('');\n                    setPlayerCount(2);\n                    setJoinGameId('');\n                    setError(null);\n                }} sx={{ mb: 3 }}>\n                    <Tab label=\"CREATE GAME\" />\n                    <Tab label=\"JOIN GAME\" />\n                </Tabs>\n\n                {activeTab === 0 ? (\n                    // Create game form\n                    <Box component=\"form\" onSubmit={handleCreateGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Number of Players\"\n                            type=\"number\"\n                            required\n                            value={playerCount}\n                            onChange={(e) => setPlayerCount(Number(e.target.value))}\n                            inputProps={{ min: 2, max: 5 }}\n                            helperText=\"Minimum 2, maximum 5 players\"\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || playerCount < 2 || playerCount > 5}\n                        >\n                            Create Game\n                        </Button>\n                    </Box>\n                ) : (\n                    // Join game form\n                    <Box component=\"form\" onSubmit={handleJoinGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Game Code\"\n                            required\n                            value={joinGameId}\n                            onChange={(e) => setJoinGameId(e.target.value)}\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || !joinGameId}\n                        >\n                            Join Game\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        </Card>\n    );\n\n    const renderGame = () => {\n        if (!game) return null;\n        \n        return (\n            <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n                {/* 游戏头部信息 */}\n                <Box sx={{ \n                    display: 'flex', \n                    justifyContent: 'space-between', \n                    alignItems: 'center',\n                    mb: 3\n                }}>\n                    <Box>\n                        <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                            Game ID: {game.id}\n                        </Typography>\n                        <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                            Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                        </Typography>\n                    </Box>\n                    {(game.status === 'in_progress' || game.status === 'completed') && startTime && (\n                        <Typography variant=\"h6\" sx={{ color: 'text.secondary' }}>\n                            Time: {formatTimeFromMs(elapsedTime)}\n                        </Typography>\n                    )}\n                </Box>\n\n                {/* 开始游戏按钮 */}\n                {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleStartGame}\n                        sx={{ mb: 3 }}\n                    >\n                        Start Game\n                    </Button>\n                )}\n\n                {/* 游戏内容 */}\n                <Grid container spacing={3}>\n                    {/* Left column: Player cards */}\n                    <Grid item xs={12} md={7}>\n                        <Stack spacing={3}>\n                            {game.players.map(renderPlayer)}\n                        </Stack>\n                    </Grid>\n\n                    {/* Right column: Results and statistics */}\n                    <Grid item xs={12} md={5}>\n                        {renderStatistics()}\n                    </Grid>\n                </Grid>\n\n                {/* 返回主菜单按钮 - 只在游戏完成时显示 */}\n                {game.status === 'completed' && (\n                    <Box sx={{ mt: 4, textAlign: 'center' }}>\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleReturnToMainMenu}\n                            sx={{\n                                minWidth: 200,\n                                borderRadius: 2\n                            }}\n                        >\n                            Return to Main Menu\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        );\n    };\n\n    return (\n        <Container>\n            {!gameId ? (\n                renderMainMenu()\n            ) : game ? (\n                renderGame()\n            ) : (\n                <CircularProgress />\n            )}\n            \n            {error && (\n                <Alert severity=\"error\" sx={{ mt: 2 }}>\n                    {error}\n                </Alert>\n            )}\n        </Container>\n    );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}