{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Tabs, Tab, Alert, Chip, keyframes, Stack, TableContainer, Table, TableHead, TableBody, TableCell, TableRow, Paper } from '@mui/material';\nimport { TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Game = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  var _game$players$;\n  const [gameId, setGameId] = useState(initialGameId);\n  const [game, setGame] = useState(null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerId, setPlayerId] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n  const [playerCount, setPlayerCount] = useState(2);\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showResultPage, setShowResultPage] = useState(false);\n  const [batchCompletionTimes, setBatchCompletionTimes] = useState({});\n  const [batchStartTimes, setBatchStartTimes] = useState({});\n  const [batchFlipStates, setBatchFlipStates] = useState({});\n\n  // 添加状态来跟踪硬币的翻转状态\n  const [flippingStates, setFlippingStates] = useState({});\n\n  // 添加翻转状态\n  const [flippedCoins, setFlippedCoins] = useState(new Set());\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, updatedGame => {\n        console.log('Game state updated:', updatedGame);\n        setGame(updatedGame);\n      });\n      service.connect();\n      setWsService(service);\n\n      // Cleanup function\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  useEffect(() => {\n    let timerInterval = null;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && startTime) {\n      timerInterval = setInterval(() => {\n        setCurrentTime(Date.now() - startTime);\n      }, 1000);\n    }\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'completed' && startTime && !endTime) {\n      setEndTime(Date.now());\n      setShowResultPage(true);\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime, endTime]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && game.players) {\n      const newStartTimes = {\n        ...batchStartTimes\n      };\n      const newCompletionTimes = {\n        ...batchCompletionTimes\n      };\n      game.players.forEach(player => {\n        if (!newStartTimes[player.id]) {\n          newStartTimes[player.id] = {};\n        }\n        if (!newCompletionTimes[player.id]) {\n          newCompletionTimes[player.id] = {};\n        }\n\n        // 使用后端提供的批次开始时间\n        if (player.batch_start_time) {\n          Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n            newStartTimes[player.id][Number(batchNum)] = startTime;\n          });\n        }\n\n        // Calculate completion times for each batch\n        for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n          var _newStartTimes$player;\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const startedAt = (_newStartTimes$player = newStartTimes[player.id]) === null || _newStartTimes$player === void 0 ? void 0 : _newStartTimes$player[batchNum];\n          if (startedAt && batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[player.id][batchNum]) {\n            newCompletionTimes[player.id][batchNum] = Date.now() - startedAt;\n          }\n        }\n      });\n      setBatchStartTimes(newStartTimes);\n      setBatchCompletionTimes(newCompletionTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players]);\n  const handleCreateGame = async () => {\n    if (!playerName) {\n      setError('Please enter your name first');\n      return;\n    }\n    try {\n      const newGameId = await gameService.createGame(playerCount, maxBatches, coinsPerBatch);\n      setGameId(newGameId);\n\n      // Automatically join the game as the creator\n      const newPlayerId = await gameService.joinGame(newGameId, playerName);\n      setPlayerId(newPlayerId);\n\n      // Get initial game state\n      const gameState = await gameService.getGameState(newGameId);\n      setGame(gameState);\n\n      // Reset all input fields\n      setPlayerName('');\n      setPlayerCount(2);\n      setMaxBatches(3);\n      setCoinsPerBatch(2);\n      setJoinGameId('');\n      setError(null);\n    } catch (error) {\n      setError('Failed to create game. Please try again.');\n      console.error('Error creating game:', error);\n    }\n  };\n  const handleJoinGame = async () => {\n    if (!playerName) {\n      setError('Please enter player name');\n      return;\n    }\n    const targetGameId = gameId || joinGameId;\n    if (!targetGameId) {\n      setError('Please enter game ID');\n      return;\n    }\n    try {\n      const exists = await gameService.checkGameExists(targetGameId);\n      if (!exists) {\n        setError('Game not found');\n        return;\n      }\n      const newPlayerId = await gameService.joinGame(targetGameId, playerName);\n      setPlayerId(newPlayerId);\n      setGameId(targetGameId);\n      setShowJoinDialog(false);\n      const gameState = await gameService.getGameState(targetGameId);\n      setGame(gameState);\n\n      // Reset all input fields\n      setPlayerName('');\n      setPlayerCount(2);\n      setMaxBatches(3);\n      setCoinsPerBatch(2);\n      setJoinGameId('');\n      setError(null);\n    } catch (error) {\n      setError('Failed to join game. Please try again.');\n      console.error('Error joining game:', error);\n    }\n  };\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      setError(null);\n    } catch (error) {\n      setError('Failed to start game. Please try again.');\n      console.error('Error starting game:', error);\n    }\n  };\n  const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n  // 添加一个专门用于渲染目标硬币的函数\n  const renderTargetCoin = type => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: {\n          xs: '20px',\n          sm: '32px'\n        },\n        height: {\n          xs: '20px',\n          sm: '32px'\n        },\n        borderRadius: '50%',\n        border: theme => ({\n          xs: `1px solid ${theme.palette.primary.main}`,\n          sm: `2px solid ${theme.palette.primary.main}`\n        }),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: theme => theme.palette.background.paper,\n        color: theme => theme.palette.text.primary,\n        fontSize: {\n          xs: '0.7rem',\n          sm: '0.9rem'\n        },\n        fontWeight: 'bold',\n        marginBottom: {\n          xs: 0,\n          sm: 1\n        },\n        marginRight: 1\n      },\n      children: type === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 检查批次是否所有硬币都已翻转完成\n  const isBatchCompleted = (batchNum, playerId) => {\n    const batchTasks = game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === playerId);\n    return (batchTasks === null || batchTasks === void 0 ? void 0 : batchTasks.every(t => t.status === TaskStatus.COMPLETED)) || false;\n  };\n\n  // 修改处理任务完成的函数\n  const handleCompleteTask = taskId => {\n    if (wsService) {\n      const task = game === null || game === void 0 ? void 0 : game.tasks.find(t => t.id === taskId);\n      if (!task) return;\n\n      // 记录这个硬币已经翻转\n      setFlippedCoins(prev => new Set([...prev, taskId]));\n\n      // 开始翻转动画\n      setFlippingStates(prev => ({\n        ...prev,\n        [taskId]: {\n          isFlipping: true\n        }\n      }));\n\n      // 动画完成后发送完成信息\n      setTimeout(() => {\n        setFlippingStates(prev => ({\n          ...prev,\n          [taskId]: {\n            isFlipping: false\n          }\n        }));\n        wsService.completeTask(taskId);\n      }, 600);\n    }\n  };\n\n  // 修改渲染硬币的函数\n  const renderCoin = (type, isFlipping, isSmall = false, onClick, taskId) => {\n    const flipState = taskId ? flippingStates[taskId] : undefined;\n    const isFlipped = taskId ? flippedCoins.has(taskId) : false;\n\n    // 决定显示哪一面\n    const displayType = isFlipped ? type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS : type;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: isSmall ? 20 : 32,\n        height: isSmall ? 20 : 32,\n        borderRadius: '50%',\n        backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n        border: `${isSmall ? 1 : 2}px solid #B8860B`,\n        color: '#704214',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 'bold',\n        fontSize: isSmall ? '0.6rem' : '0.8rem',\n        perspective: 1000,\n        mb: isSmall ? 0 : 1,\n        position: 'relative',\n        cursor: onClick ? 'pointer' : 'default',\n        transition: 'transform 0.6s',\n        transformStyle: 'preserve-3d',\n        transform: flipState !== null && flipState !== void 0 && flipState.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n        '&:hover': onClick ? {\n          transform: 'scale(1.05)',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n        } : {},\n        '&:active': onClick ? {\n          transform: 'scale(0.95)'\n        } : {},\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          borderRadius: '50%',\n          background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n          pointerEvents: 'none'\n        }\n      },\n      onClick: onClick,\n      children: displayType === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 当批次完成时重置翻转状态\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks) {\n      const newFlippedCoins = new Set(flippedCoins);\n      let hasChanges = false;\n      game.tasks.forEach(task => {\n        // 如果任务被重新分配给新玩家，移除翻转状态\n        if (task.status === TaskStatus.PENDING && newFlippedCoins.has(task.id)) {\n          newFlippedCoins.delete(task.id);\n          hasChanges = true;\n        }\n      });\n      if (hasChanges) {\n        setFlippedCoins(newFlippedCoins);\n      }\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks]);\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n  const renderTaskRow = (tasks, playerName) => {\n    // 将任务分组为每行最多5个\n    const rows = [];\n    for (let i = 0; i < tasks.length; i += 5) {\n      rows.push(tasks.slice(i, i + 5));\n    }\n    return rows.map((rowTasks, rowIndex) => /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        gap: 1,\n        mb: 1,\n        flexWrap: 'nowrap',\n        justifyContent: 'flex-start'\n      },\n      children: rowTasks.map(task => /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          width: 100,\n          minWidth: 100,\n          backgroundColor: 'background.paper',\n          position: 'relative',\n          overflow: 'visible'\n        },\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          sx: {\n            p: '8px !important',\n            pb: '8px !important',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center'\n          },\n          children: [renderCoin(task.type, false, false, () => handleCompleteTask(task.id), task.id), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: '100%',\n              mt: 0.5\n            },\n            children: /*#__PURE__*/_jsxDEV(Chip, {\n              label: task.status,\n              size: \"small\",\n              sx: {\n                backgroundColor: getTaskStatusColor(task.status),\n                color: 'white',\n                fontWeight: 500,\n                width: '100%',\n                height: '20px',\n                '& .MuiChip-label': {\n                  fontSize: '0.65rem',\n                  padding: '0 4px'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 25\n        }, this)\n      }, `${task.id}-${playerName}-${task.batch_number}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 21\n      }, this))\n    }, `row-${rowIndex}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 13\n    }, this));\n  };\n  const renderPlayer = player => {\n    var _player$completed_tas;\n    const currentBatchTarget = player.current_tasks.length > 0 ? player.current_tasks[0].type : (_player$completed_tas = player.completed_tasks.find(t => t.batch_number === player.current_batch)) === null || _player$completed_tas === void 0 ? void 0 : _player$completed_tas.type;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        height: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        sx: {\n          p: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              color: 'primary.main',\n              fontSize: '1.1rem'\n            },\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: player.status,\n            size: \"small\",\n            color: getPlayerStatusColor(player.status),\n            sx: {\n              fontWeight: 500,\n              height: '24px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: 1,\n                mb: 1,\n                backgroundColor: 'rgba(33, 150, 243, 0.1)',\n                p: 1,\n                borderRadius: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  fontWeight: 500\n                },\n                children: [\"Current Batch: \", player.current_batch, \" / \", game === null || game === void 0 ? void 0 : game.max_batches]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 33\n              }, this), currentBatchTarget && /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: 0.5\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  sx: {\n                    fontWeight: 500\n                  },\n                  children: \"Target:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 537,\n                  columnNumber: 41\n                }, this), renderTargetCoin(currentBatchTarget)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 536,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"textSecondary\",\n              children: \"Current Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                fontSize: '1.1rem'\n              },\n              children: player.current_tasks.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"textSecondary\",\n              children: \"Completed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 550,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                fontSize: '1.1rem'\n              },\n              children: player.completed_tasks.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              color: 'primary.main',\n              fontWeight: 500,\n              mb: 1\n            },\n            children: \"Current Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 25\n          }, this), renderTaskRow(player.current_tasks, player.name)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 21\n        }, this), player.completed_tasks.length > 0 && game && player.order === game.players.length - 1 && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              color: 'primary.main',\n              fontWeight: 500,\n              mb: 1\n            },\n            children: \"Completed Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 29\n          }, this), renderTaskRow(player.completed_tasks, player.name)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 13\n    }, this);\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n\n  // 添加一个辅助函数来处理毫秒到时间的转换\n  const formatTimeFromMs = ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTimeFromMs(totalTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteGame = () => {\n    setShowResultPage(true);\n  };\n  const handleReturnToMain = () => {\n    window.location.reload();\n  };\n  const renderResultPage = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 600,\n          width: '100%',\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            mb: 3,\n            color: 'primary.main'\n          },\n          children: \"Game Complete! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 674,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            mb: 4\n          },\n          children: [\"Total Time: \", formatTimeFromMs(totalTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMain,\n          size: \"large\",\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 13\n    }, this);\n  };\n  const renderStatistics = () => {\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mb: 2,\n          color: 'primary.main'\n        },\n        children: \"Game Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 17\n      }, this), Array.from({\n        length: game.max_batches\n      }, (_, i) => i + 1).map(batchNum => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: [\"Batch \", batchNum]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          sx: {\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Player\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 709,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 710,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 711,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 708,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [game.players.map(player => {\n                var _player$batch_start_t, _player$batch_complet, _player$batch_start_t2;\n                const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n                const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                const hasStarted = ((_player$batch_start_t = player.batch_start_time) === null || _player$batch_start_t === void 0 ? void 0 : _player$batch_start_t[batchNum]) != null;\n                const completionTime = (_player$batch_complet = player.batch_completion_time) === null || _player$batch_complet === void 0 ? void 0 : _player$batch_complet[batchNum];\n                const startTime = (_player$batch_start_t2 = player.batch_start_time) === null || _player$batch_start_t2 === void 0 ? void 0 : _player$batch_start_t2[batchNum];\n\n                // 计算当前时间（如果批次已开始但未完成）\n                let displayTime = '-';\n                if (completionTime) {\n                  displayTime = formatTimeFromMs(completionTime);\n                } else if (hasStarted && startTime) {\n                  const currentTime = Date.now() - startTime;\n                  displayTime = formatTimeFromMs(currentTime);\n                }\n                let status = 'Pending';\n                if (isCompleted) {\n                  status = 'Completed';\n                } else if (hasStarted) {\n                  status = 'In Progress';\n                }\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: player.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 743,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: displayTime\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 744,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: /*#__PURE__*/_jsxDEV(Chip, {\n                      label: status,\n                      size: \"small\",\n                      color: isCompleted ? 'success' : hasStarted ? 'primary' : 'default'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 746,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 745,\n                    columnNumber: 49\n                  }, this)]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 742,\n                  columnNumber: 45\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(TableRow, {\n                sx: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                },\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 756,\n                    columnNumber: 52\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 756,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: formatTimeFromMs(game.players.reduce((sum, p) => {\n                      var _p$batch_completion_t;\n                      return sum + (((_p$batch_completion_t = p.batch_completion_time) === null || _p$batch_completion_t === void 0 ? void 0 : _p$batch_completion_t[batchNum]) || 0);\n                    }, 0))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 758,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 757,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 765,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 755,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 714,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 25\n        }, this)]\n      }, batchNum, true, {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 13\n    }, this);\n  };\n  if (showResultPage) {\n    return renderResultPage();\n  }\n  if (!gameId || !playerId) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          mb: 4,\n          mt: 4,\n          background: 'linear-gradient(45deg, #2196f3 30%, #21CBF3 90%)',\n          p: 3,\n          borderRadius: 2,\n          boxShadow: '0 3px 5px 2px rgba(33, 150, 243, .3)',\n          color: 'white',\n          width: '100%',\n          maxWidth: 800\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: \"Online Multiplayer Coin Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          children: \"Flip coins with your friends in this multiplayer game!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 805,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 790,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: '100%',\n          maxWidth: 800,\n          backgroundColor: 'white',\n          borderRadius: 2,\n          boxShadow: '0 3px 10px rgba(0,0,0,0.1)',\n          p: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tabs, {\n          value: activeTab,\n          onChange: handleTabChange,\n          sx: {\n            mb: 3,\n            borderBottom: 1,\n            borderColor: 'divider'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 827,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 828,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 818,\n          columnNumber: 21\n        }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          sx: {\n            mb: 2\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 832,\n          columnNumber: 25\n        }, this), activeTab === 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Your Name\",\n              value: playerName,\n              onChange: e => setPlayerName(e.target.value),\n              required: true,\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 840,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 839,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Number of Players\",\n              type: \"number\",\n              value: playerCount,\n              onChange: e => setPlayerCount(Number(e.target.value)),\n              inputProps: {\n                min: 2,\n                max: 5\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 851,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 850,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Number of Batches\",\n              type: \"number\",\n              value: maxBatches,\n              onChange: e => setMaxBatches(Number(e.target.value)),\n              inputProps: {\n                min: 1,\n                max: 10\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 863,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 862,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Coins per Batch\",\n              type: \"number\",\n              value: coinsPerBatch,\n              onChange: e => setCoinsPerBatch(Number(e.target.value)),\n              inputProps: {\n                min: 1,\n                max: 10\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 875,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 874,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleCreateGame,\n              disabled: !playerName,\n              sx: {\n                mt: 2\n              },\n              size: \"large\",\n              children: \"Create Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 887,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 886,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 838,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Game ID\",\n              value: joinGameId,\n              onChange: e => setJoinGameId(e.target.value.toUpperCase()),\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 901,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 900,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Player Name\",\n              value: playerName,\n              onChange: e => setPlayerName(e.target.value),\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 911,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 910,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleJoinGame,\n              sx: {\n                mt: 2\n              },\n              size: \"large\",\n              children: \"Join Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 921,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 920,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 899,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 810,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 782,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3,\n      backgroundColor: 'background.default',\n      minHeight: '100vh'\n    },\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 940,\n      columnNumber: 17\n    }, this), game && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 1,\n              color: 'primary.main'\n            },\n            children: [\"Game ID: \", game.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 954,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              color: 'text.primary'\n            },\n            children: [\"Game Status: \", game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 957,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 953,\n          columnNumber: 25\n        }, this), (game.status === 'in_progress' || game.status === 'completed') && startTime && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'text.secondary'\n          },\n          children: [\"Time: \", formatTimeFromMs(game.status === 'completed' && endTime ? endTime - startTime : currentTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 962,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 21\n      }, this), game.status === 'waiting' && playerId === ((_game$players$ = game.players[0]) === null || _game$players$ === void 0 ? void 0 : _game$players$.id) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartGame,\n        sx: {\n          mb: 3\n        },\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 969,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 3,\n            children: game.players.map(renderPlayer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 981,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 980,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: renderStatistics()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 987,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 978,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 938,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"/2/XyguD1VffttHlvd80LiXsZTw=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","keyframes","Stack","TableContainer","Table","TableHead","TableBody","TableCell","TableRow","Paper","TaskStatus","PlayerStatus","TaskType","gameService","WebSocketService","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","gameId","initialGameId","_s","_game$players$","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","currentTime","setCurrentTime","showResultPage","setShowResultPage","batchCompletionTimes","setBatchCompletionTimes","batchStartTimes","setBatchStartTimes","batchFlipStates","setBatchFlipStates","flippingStates","setFlippingStates","flippedCoins","setFlippedCoins","Set","service","updatedGame","console","log","connect","disconnect","status","Date","now","timerInterval","setInterval","clearInterval","tasks","players","newStartTimes","newCompletionTimes","forEach","player","id","batch_start_time","Object","entries","batchNum","Number","max_batches","_newStartTimes$player","batchTasks","filter","t","batch_number","assigned_to","startedAt","length","every","COMPLETED","handleCreateGame","newGameId","createGame","newPlayerId","joinGame","gameState","getGameState","handleJoinGame","targetGameId","exists","checkGameExists","handleStartGame","startGame","flipAnimation","renderTargetCoin","type","sx","width","xs","sm","height","borderRadius","border","theme","palette","primary","main","display","alignItems","justifyContent","backgroundColor","background","paper","color","text","fontSize","fontWeight","marginBottom","marginRight","children","HEADS","fileName","_jsxFileName","lineNumber","columnNumber","isBatchCompleted","handleCompleteTask","taskId","task","find","prev","isFlipping","setTimeout","completeTask","renderCoin","isSmall","onClick","flipState","undefined","isFlipped","has","displayType","TAILS","perspective","mb","position","cursor","transition","transformStyle","transform","boxShadow","content","top","left","right","bottom","pointerEvents","newFlippedCoins","hasChanges","PENDING","delete","getPlayerStatusColor","ACTIVE","WAITING","IDLE","getTaskStatusColor","IN_PROGRESS","renderTaskRow","rows","i","push","slice","map","rowTasks","rowIndex","gap","flexWrap","minWidth","overflow","p","pb","flexDirection","mt","label","size","padding","renderPlayer","_player$completed_tas","currentBatchTarget","current_tasks","completed_tasks","current_batch","variant","name","container","spacing","item","order","handleTabChange","_","newValue","handleGameComplete","formatTimeFromMs","ms","totalSeconds","Math","floor","minutes","seconds","toString","padStart","renderCompletionDialog","totalTime","open","onClose","PaperProps","textAlign","py","window","location","reload","handleCompleteGame","handleReturnToMain","renderResultPage","minHeight","maxWidth","renderStatistics","Array","from","component","align","_player$batch_start_t","_player$batch_complet","_player$batch_start_t2","isCompleted","hasStarted","completionTime","batch_completion_time","displayTime","reduce","sum","_p$batch_completion_t","value","onChange","borderBottom","borderColor","severity","fullWidth","e","target","required","autoComplete","md","inputProps","min","max","disabled","toUpperCase","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes,\n    Stack,\n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableCell,\n    TableRow,\n    Paper\n} from '@mui/material';\nimport { Game as GameType, Player, Task, TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\n\ninterface GameProps {\n    gameId?: string;\n}\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | undefined>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n    const [batchCompletionTimes, setBatchCompletionTimes] = useState<{\n        [playerId: string]: {\n            [batchNumber: number]: number;\n        };\n    }>({});\n    const [batchStartTimes, setBatchStartTimes] = useState<{\n        [playerId: string]: {\n            [batchNum: number]: number;\n        };\n    }>({});\n    const [batchFlipStates, setBatchFlipStates] = useState<{\n        [batchNum: number]: {\n            [taskId: string]: boolean;  // true means flipped\n        };\n    }>({});\n\n    // 添加状态来跟踪硬币的翻转状态\n    const [flippingStates, setFlippingStates] = useState<{\n        [key: string]: { \n            isFlipping: boolean; \n            showOpposite: boolean;\n        };\n    }>({});\n\n    // 添加翻转状态\n    const [flippedCoins, setFlippedCoins] = useState<Set<string>>(new Set());\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, (updatedGame) => {\n                console.log('Game state updated:', updatedGame);\n                setGame(updatedGame);\n            });\n            service.connect();\n            setWsService(service);\n\n            // Cleanup function\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && startTime) {\n            timerInterval = setInterval(() => {\n                setCurrentTime(Date.now() - startTime);\n            }, 1000);\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, startTime, endTime]);\n\n    useEffect(() => {\n        if (game?.tasks && game.players) {\n            const newStartTimes = { ...batchStartTimes };\n            const newCompletionTimes = { ...batchCompletionTimes };\n\n            game.players.forEach(player => {\n                if (!newStartTimes[player.id]) {\n                    newStartTimes[player.id] = {};\n                }\n                if (!newCompletionTimes[player.id]) {\n                    newCompletionTimes[player.id] = {};\n                }\n\n                // 使用后端提供的批次开始时间\n                if (player.batch_start_time) {\n                    Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n                        newStartTimes[player.id][Number(batchNum)] = startTime;\n                    });\n                }\n\n                // Calculate completion times for each batch\n                for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const startedAt = newStartTimes[player.id]?.[batchNum];\n                    if (startedAt && \n                        batchTasks.length > 0 && \n                        batchTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                        !newCompletionTimes[player.id][batchNum]) {\n                        newCompletionTimes[player.id][batchNum] = Date.now() - startedAt;\n                    }\n                }\n            });\n\n            setBatchStartTimes(newStartTimes);\n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.tasks, game?.players]);\n\n    const handleCreateGame = async () => {\n        if (!playerName) {\n            setError('Please enter your name first');\n            return;\n        }\n\n        try {\n            const newGameId = await gameService.createGame(playerCount, maxBatches, coinsPerBatch);\n            setGameId(newGameId);\n            \n            // Automatically join the game as the creator\n            const newPlayerId = await gameService.joinGame(newGameId, playerName);\n            setPlayerId(newPlayerId);\n            \n            // Get initial game state\n            const gameState = await gameService.getGameState(newGameId);\n            setGame(gameState);\n            \n            // Reset all input fields\n            setPlayerName('');\n            setPlayerCount(2);\n            setMaxBatches(3);\n            setCoinsPerBatch(2);\n            setJoinGameId('');\n            setError(null);\n        } catch (error) {\n            setError('Failed to create game. Please try again.');\n            console.error('Error creating game:', error);\n        }\n    };\n\n    const handleJoinGame = async () => {\n        if (!playerName) {\n            setError('Please enter player name');\n            return;\n        }\n\n        const targetGameId = gameId || joinGameId;\n        if (!targetGameId) {\n            setError('Please enter game ID');\n            return;\n        }\n\n        try {\n            const exists = await gameService.checkGameExists(targetGameId);\n            if (!exists) {\n                setError('Game not found');\n                return;\n            }\n\n            const newPlayerId = await gameService.joinGame(targetGameId, playerName);\n            setPlayerId(newPlayerId);\n            setGameId(targetGameId);\n            setShowJoinDialog(false);\n            const gameState = await gameService.getGameState(targetGameId);\n            setGame(gameState);\n            \n            // Reset all input fields\n            setPlayerName('');\n            setPlayerCount(2);\n            setMaxBatches(3);\n            setCoinsPerBatch(2);\n            setJoinGameId('');\n            setError(null);\n        } catch (error) {\n            setError('Failed to join game. Please try again.');\n            console.error('Error joining game:', error);\n        }\n    };\n\n    const handleStartGame = async () => {\n        if (!gameId) return;\n\n        try {\n            await gameService.startGame(gameId);\n            setError(null);\n        } catch (error) {\n            setError('Failed to start game. Please try again.');\n            console.error('Error starting game:', error);\n        }\n    };\n\n    const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n    // 添加一个专门用于渲染目标硬币的函数\n    const renderTargetCoin = (type: TaskType) => {\n        return (\n            <Box\n                sx={{\n                    width: { xs: '20px', sm: '32px' },\n                    height: { xs: '20px', sm: '32px' },\n                    borderRadius: '50%',\n                    border: theme => ({\n                        xs: `1px solid ${theme.palette.primary.main}`,\n                        sm: `2px solid ${theme.palette.primary.main}`\n                    }),\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    backgroundColor: theme => theme.palette.background.paper,\n                    color: theme => theme.palette.text.primary,\n                    fontSize: { xs: '0.7rem', sm: '0.9rem' },\n                    fontWeight: 'bold',\n                    marginBottom: { xs: 0, sm: 1 },\n                    marginRight: 1\n                }}\n            >\n                {type === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 检查批次是否所有硬币都已翻转完成\n    const isBatchCompleted = (batchNum: number, playerId: string) => {\n        const batchTasks = game?.tasks.filter(t => \n            t.batch_number === batchNum && \n            t.assigned_to === playerId\n        );\n        return batchTasks?.every(t => t.status === TaskStatus.COMPLETED) || false;\n    };\n\n    // 修改处理任务完成的函数\n    const handleCompleteTask = (taskId: string) => {\n        if (wsService) {\n            const task = game?.tasks.find(t => t.id === taskId);\n            if (!task) return;\n\n            // 记录这个硬币已经翻转\n            setFlippedCoins(prev => new Set([...prev, taskId]));\n\n            // 开始翻转动画\n            setFlippingStates(prev => ({\n                ...prev,\n                [taskId]: { \n                    isFlipping: true\n                }\n            }));\n\n            // 动画完成后发送完成信息\n            setTimeout(() => {\n                setFlippingStates(prev => ({\n                    ...prev,\n                    [taskId]: { \n                        isFlipping: false\n                    }\n                }));\n                wsService.completeTask(taskId);\n            }, 600);\n        }\n    };\n\n    // 修改渲染硬币的函数\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void, taskId?: string) => {\n        const flipState = taskId ? flippingStates[taskId] : undefined;\n        const isFlipped = taskId ? flippedCoins.has(taskId) : false;\n        \n        // 决定显示哪一面\n        const displayType = isFlipped\n            ? (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) \n            : type;\n\n        return (\n            <Box\n                sx={{\n                    width: isSmall ? 20 : 32,\n                    height: isSmall ? 20 : 32,\n                    borderRadius: '50%',\n                    backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                    border: `${isSmall ? 1 : 2}px solid #B8860B`,\n                    color: '#704214',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontWeight: 'bold',\n                    fontSize: isSmall ? '0.6rem' : '0.8rem',\n                    perspective: 1000,\n                    mb: isSmall ? 0 : 1,\n                    position: 'relative',\n                    cursor: onClick ? 'pointer' : 'default',\n                    transition: 'transform 0.6s',\n                    transformStyle: 'preserve-3d',\n                    transform: flipState?.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n                    '&:hover': onClick ? {\n                        transform: 'scale(1.05)',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                    } : {},\n                    '&:active': onClick ? {\n                        transform: 'scale(0.95)'\n                    } : {},\n                    '&::after': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        borderRadius: '50%',\n                        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                        pointerEvents: 'none'\n                    }\n                }}\n                onClick={onClick}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 当批次完成时重置翻转状态\n    useEffect(() => {\n        if (game?.tasks) {\n            const newFlippedCoins = new Set(flippedCoins);\n            let hasChanges = false;\n\n            game.tasks.forEach(task => {\n                // 如果任务被重新分配给新玩家，移除翻转状态\n                if (task.status === TaskStatus.PENDING && newFlippedCoins.has(task.id)) {\n                    newFlippedCoins.delete(task.id);\n                    hasChanges = true;\n                }\n            });\n\n            if (hasChanges) {\n                setFlippedCoins(newFlippedCoins);\n            }\n        }\n    }, [game?.tasks]);\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    const renderTaskRow = (tasks: Task[], playerName: string) => {\n        // 将任务分组为每行最多5个\n        const rows: Task[][] = [];\n        for (let i = 0; i < tasks.length; i += 5) {\n            rows.push(tasks.slice(i, i + 5));\n        }\n\n        return rows.map((rowTasks, rowIndex) => (\n            <Box \n                key={`row-${rowIndex}`} \n                sx={{ \n                    display: 'flex', \n                    gap: 1,\n                    mb: 1,\n                    flexWrap: 'nowrap',\n                    justifyContent: 'flex-start'\n                }}\n            >\n                {rowTasks.map(task => (\n                    <Card \n                        key={`${task.id}-${playerName}-${task.batch_number}`} \n                        sx={{ \n                            width: 100,\n                            minWidth: 100,\n                            backgroundColor: 'background.paper',\n                            position: 'relative',\n                            overflow: 'visible'\n                        }}\n                    >\n                        <CardContent sx={{ \n                            p: '8px !important',\n                            pb: '8px !important',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                        }}>\n                            {renderCoin(task.type, false, false, () => handleCompleteTask(task.id), task.id)}\n                            <Box sx={{ width: '100%', mt: 0.5 }}>\n                                <Chip\n                                    label={task.status}\n                                    size=\"small\"\n                                    sx={{\n                                        backgroundColor: getTaskStatusColor(task.status),\n                                        color: 'white',\n                                        fontWeight: 500,\n                                        width: '100%',\n                                        height: '20px',\n                                        '& .MuiChip-label': {\n                                            fontSize: '0.65rem',\n                                            padding: '0 4px'\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        </CardContent>\n                    </Card>\n                ))}\n            </Box>\n        ));\n    };\n\n    const renderPlayer = (player: Player) => {\n        const currentBatchTarget = player.current_tasks.length > 0 \n            ? player.current_tasks[0].type \n            : player.completed_tasks.find(t => t.batch_number === player.current_batch)?.type;\n\n        return (\n            <Card sx={{ height: '100%' }}>\n                <CardContent sx={{ p: 2 }}>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n                        <Typography variant=\"h6\" sx={{ \n                            color: 'primary.main',\n                            fontSize: '1.1rem'\n                        }}>{player.name}</Typography>\n                        <Chip\n                            label={player.status}\n                            size=\"small\"\n                            color={getPlayerStatusColor(player.status)}\n                            sx={{ \n                                fontWeight: 500,\n                                height: '24px'\n                            }}\n                        />\n                    </Box>\n                    <Grid container spacing={1} sx={{ mb: 2 }}>\n                        <Grid item xs={12}>\n                            <Box sx={{ \n                                display: 'flex', \n                                alignItems: 'center', \n                                gap: 1,\n                                mb: 1,\n                                backgroundColor: 'rgba(33, 150, 243, 0.1)',\n                                p: 1,\n                                borderRadius: 1\n                            }}>\n                                <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\n                                    Current Batch: {player.current_batch} / {game?.max_batches}\n                                </Typography>\n                                {currentBatchTarget && (\n                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                                        <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\n                                            Target:\n                                        </Typography>\n                                        {renderTargetCoin(currentBatchTarget)}\n                                    </Box>\n                                )}\n                            </Box>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Typography variant=\"body2\" color=\"textSecondary\">Current Tasks</Typography>\n                            <Typography variant=\"h6\" sx={{ fontSize: '1.1rem' }}>{player.current_tasks.length}</Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Typography variant=\"body2\" color=\"textSecondary\">Completed</Typography>\n                            <Typography variant=\"h6\" sx={{ fontSize: '1.1rem' }}>{player.completed_tasks.length}</Typography>\n                        </Grid>\n                    </Grid>\n                    <Box sx={{ mt: 2 }}>\n                        <Typography variant=\"subtitle2\" sx={{ color: 'primary.main', fontWeight: 500, mb: 1 }}>\n                            Current Tasks\n                        </Typography>\n                        {renderTaskRow(player.current_tasks, player.name)}\n                    </Box>\n                    {player.completed_tasks.length > 0 && game && player.order === game.players.length - 1 && (\n                        <Box sx={{ mt: 2 }}>\n                            <Typography variant=\"subtitle2\" sx={{ color: 'primary.main', fontWeight: 500, mb: 1 }}>\n                                Completed Tasks\n                            </Typography>\n                            {renderTaskRow(player.completed_tasks, player.name)}\n                        </Box>\n                    )}\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    // 添加一个辅助函数来处理毫秒到时间的转换\n    const formatTimeFromMs = (ms: number) => {\n        const totalSeconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed!\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTimeFromMs(totalTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    const handleReturnToMain = () => {\n        window.location.reload();\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTimeFromMs(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMain}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    const renderStatistics = () => {\n        if (!game) return null;\n\n        return (\n            <Box sx={{ p: 2 }}>\n                <Typography variant=\"h6\" sx={{ mb: 2, color: 'primary.main' }}>\n                    Game Statistics\n                </Typography>\n                {Array.from({ length: game.max_batches }, (_, i) => i + 1).map(batchNum => (\n                    <Box key={batchNum} sx={{ mb: 3 }}>\n                        <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                            Batch {batchNum}\n                        </Typography>\n                        <TableContainer component={Paper} sx={{ mb: 2 }}>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Player</TableCell>\n                                        <TableCell align=\"right\">Time</TableCell>\n                                        <TableCell align=\"right\">Status</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {game.players.map(player => {\n                                        const batchTasks = game.tasks.filter(t => \n                                            t.batch_number === batchNum && \n                                            t.assigned_to === player.id\n                                        );\n                                        const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                                        const hasStarted = player.batch_start_time?.[batchNum] != null;\n                                        const completionTime = player.batch_completion_time?.[batchNum];\n                                        const startTime = player.batch_start_time?.[batchNum];\n                                        \n                                        // 计算当前时间（如果批次已开始但未完成）\n                                        let displayTime = '-';\n                                        if (completionTime) {\n                                            displayTime = formatTimeFromMs(completionTime);\n                                        } else if (hasStarted && startTime) {\n                                            const currentTime = Date.now() - startTime;\n                                            displayTime = formatTimeFromMs(currentTime);\n                                        }\n\n                                        let status = 'Pending';\n                                        if (isCompleted) {\n                                            status = 'Completed';\n                                        } else if (hasStarted) {\n                                            status = 'In Progress';\n                                        }\n\n                                        return (\n                                            <TableRow key={player.id}>\n                                                <TableCell>{player.name}</TableCell>\n                                                <TableCell align=\"right\">{displayTime}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Chip \n                                                        label={status}\n                                                        size=\"small\"\n                                                        color={isCompleted ? 'success' : (hasStarted ? 'primary' : 'default')}\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                    <TableRow sx={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}>\n                                        <TableCell><strong>Total</strong></TableCell>\n                                        <TableCell align=\"right\">\n                                            <strong>\n                                                {formatTimeFromMs(game.players.reduce((sum, p) => \n                                                    sum + (p.batch_completion_time?.[batchNum] || 0), \n                                                    0\n                                                ))}\n                                            </strong>\n                                        </TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    if (showResultPage) {\n        return renderResultPage();\n    }\n\n    if (!gameId || !playerId) {\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n            }}>\n                <Box sx={{ \n                    textAlign: 'center', \n                    mb: 4,\n                    mt: 4,\n                    background: 'linear-gradient(45deg, #2196f3 30%, #21CBF3 90%)',\n                    p: 3,\n                    borderRadius: 2,\n                    boxShadow: '0 3px 5px 2px rgba(33, 150, 243, .3)',\n                    color: 'white',\n                    width: '100%',\n                    maxWidth: 800\n                }}>\n                    <Typography variant=\"h3\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                        Online Multiplayer Coin Game\n                    </Typography>\n                    <Typography variant=\"subtitle1\">\n                        Flip coins with your friends in this multiplayer game!\n                    </Typography>\n                </Box>\n\n                <Box sx={{ \n                    width: '100%', \n                    maxWidth: 800,\n                    backgroundColor: 'white',\n                    borderRadius: 2,\n                    boxShadow: '0 3px 10px rgba(0,0,0,0.1)',\n                    p: 3\n                }}>\n                    <Tabs \n                        value={activeTab} \n                        onChange={handleTabChange} \n                        sx={{ \n                            mb: 3,\n                            borderBottom: 1,\n                            borderColor: 'divider'\n                        }}\n                    >\n                        <Tab label=\"Create Game\" />\n                        <Tab label=\"Join Game\" />\n                    </Tabs>\n\n                    {error && (\n                        <Alert severity=\"error\" sx={{ mb: 2 }}>\n                            {error}\n                        </Alert>\n                    )}\n\n                    {activeTab === 0 ? (\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Your Name\"\n                                    value={playerName}\n                                    onChange={(e) => setPlayerName(e.target.value)}\n                                    required\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Number of Players\"\n                                    type=\"number\"\n                                    value={playerCount}\n                                    onChange={(e) => setPlayerCount(Number(e.target.value))}\n                                    inputProps={{ min: 2, max: 5 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Number of Batches\"\n                                    type=\"number\"\n                                    value={maxBatches}\n                                    onChange={(e) => setMaxBatches(Number(e.target.value))}\n                                    inputProps={{ min: 1, max: 10 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Coins per Batch\"\n                                    type=\"number\"\n                                    value={coinsPerBatch}\n                                    onChange={(e) => setCoinsPerBatch(Number(e.target.value))}\n                                    inputProps={{ min: 1, max: 10 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button \n                                    variant=\"contained\" \n                                    onClick={handleCreateGame}\n                                    disabled={!playerName}\n                                    sx={{ mt: 2 }}\n                                    size=\"large\"\n                                >\n                                    Create Game\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    ) : (\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Game ID\"\n                                    value={joinGameId}\n                                    onChange={(e) => setJoinGameId(e.target.value.toUpperCase())}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Player Name\"\n                                    value={playerName}\n                                    onChange={(e) => setPlayerName(e.target.value)}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button \n                                    variant=\"contained\" \n                                    onClick={handleJoinGame}\n                                    sx={{ mt: 2 }}\n                                    size=\"large\"\n                                >\n                                    Join Game\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Box>\n            </Box>\n        );\n    }\n\n    return (\n        <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n            {error && (\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\n                    {error}\n                </Alert>\n            )}\n\n            {game && (\n                <>\n                    <Box sx={{ \n                        display: 'flex', \n                        justifyContent: 'space-between', \n                        alignItems: 'center',\n                        mb: 3\n                    }}>\n                        <Box>\n                            <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                                Game ID: {game.id}\n                            </Typography>\n                            <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                                Game Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                            </Typography>\n                        </Box>\n                        {(game.status === 'in_progress' || game.status === 'completed') && startTime && (\n                            <Typography variant=\"h6\" sx={{ color: 'text.secondary' }}>\n                                Time: {formatTimeFromMs(game.status === 'completed' && endTime ? endTime - startTime : currentTime)}\n                            </Typography>\n                        )}\n                    </Box>\n\n                    {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleStartGame}\n                            sx={{ mb: 3 }}\n                        >\n                            Start Game\n                        </Button>\n                    )}\n\n                    <Grid container spacing={3}>\n                        {/* Left column: Player cards */}\n                        <Grid item xs={12} md={7}>\n                            <Stack spacing={3}>\n                                {game.players.map(renderPlayer)}\n                            </Stack>\n                        </Grid>\n\n                        {/* Right column: Results and statistics */}\n                        <Grid item xs={12} md={5}>\n                            {renderStatistics()}\n                        </Grid>\n                    </Grid>\n                </>\n            )}\n        </Box>\n    );\n}; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACIC,GAAG,EACHC,MAAM,EACNC,IAAI,EACJC,WAAW,EACXC,UAAU,EACVC,IAAI,EACJC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,IAAI,EACJC,GAAG,EACHC,KAAK,EACLC,IAAI,EACJC,SAAS,EACTC,KAAK,EACLC,cAAc,EACdC,KAAK,EACLC,SAAS,EACTC,SAAS,EACTC,SAAS,EACTC,QAAQ,EACRC,KAAK,QACF,eAAe;AACtB,SAAyCC,UAAU,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,UAAU;AAC7F,SAASC,WAAW,EAAEC,gBAAgB,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAMxE,OAAO,MAAMC,IAAyB,GAAGA,CAAC;EAAEC,MAAM,EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,cAAA;EACpE,MAAM,CAACH,MAAM,EAAEI,SAAS,CAAC,GAAGxC,QAAQ,CAAqBqC,aAAa,CAAC;EACvE,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAG1C,QAAQ,CAAkB,IAAI,CAAC;EACvD,MAAM,CAAC2C,UAAU,EAAEC,aAAa,CAAC,GAAG5C,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC6C,QAAQ,EAAEC,WAAW,CAAC,GAAG9C,QAAQ,CAAgB,IAAI,CAAC;EAC7D,MAAM,CAAC+C,SAAS,EAAEC,YAAY,CAAC,GAAGhD,QAAQ,CAA0B,IAAI,CAAC;EACzE,MAAM,CAACiD,cAAc,EAAEC,iBAAiB,CAAC,GAAGlD,QAAQ,CAAC,CAACqC,aAAa,CAAC;EACpE,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGpD,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACqD,UAAU,EAAEC,aAAa,CAAC,GAAGtD,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACuD,aAAa,EAAEC,gBAAgB,CAAC,GAAGxD,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACyD,UAAU,EAAEC,aAAa,CAAC,GAAG1D,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC2D,KAAK,EAAEC,QAAQ,CAAC,GAAG5D,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAAC6D,SAAS,EAAEC,YAAY,CAAC,GAAG9D,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAAC+D,SAAS,EAAEC,YAAY,CAAC,GAAGhE,QAAQ,CAAgB,IAAI,CAAC;EAC/D,MAAM,CAACiE,OAAO,EAAEC,UAAU,CAAC,GAAGlE,QAAQ,CAAgB,IAAI,CAAC;EAC3D,MAAM,CAACmE,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGpE,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAACqE,WAAW,EAAEC,cAAc,CAAC,GAAGtE,QAAQ,CAAS,CAAC,CAAC;EACzD,MAAM,CAACuE,cAAc,EAAEC,iBAAiB,CAAC,GAAGxE,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACyE,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG1E,QAAQ,CAI7D,CAAC,CAAC,CAAC;EACN,MAAM,CAAC2E,eAAe,EAAEC,kBAAkB,CAAC,GAAG5E,QAAQ,CAInD,CAAC,CAAC,CAAC;EACN,MAAM,CAAC6E,eAAe,EAAEC,kBAAkB,CAAC,GAAG9E,QAAQ,CAInD,CAAC,CAAC,CAAC;;EAEN;EACA,MAAM,CAAC+E,cAAc,EAAEC,iBAAiB,CAAC,GAAGhF,QAAQ,CAKjD,CAAC,CAAC,CAAC;;EAEN;EACA,MAAM,CAACiF,YAAY,EAAEC,eAAe,CAAC,GAAGlF,QAAQ,CAAc,IAAImF,GAAG,CAAC,CAAC,CAAC;EAExElF,SAAS,CAAC,MAAM;IACZ,IAAImC,MAAM,IAAIS,QAAQ,EAAE;MACpB,MAAMuC,OAAO,GAAG,IAAItD,gBAAgB,CAACM,MAAM,EAAES,QAAQ,EAAGwC,WAAW,IAAK;QACpEC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,WAAW,CAAC;QAC/C3C,OAAO,CAAC2C,WAAW,CAAC;MACxB,CAAC,CAAC;MACFD,OAAO,CAACI,OAAO,CAAC,CAAC;MACjBxC,YAAY,CAACoC,OAAO,CAAC;;MAErB;MACA,OAAO,MAAM;QACTA,OAAO,CAACK,UAAU,CAAC,CAAC;MACxB,CAAC;IACL;EACJ,CAAC,EAAE,CAACrD,MAAM,EAAES,QAAQ,CAAC,CAAC;EAEtB5C,SAAS,CAAC,MAAM;IACZ,IAAI,CAAAwC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiD,MAAM,MAAK,aAAa,IAAI,CAAC3B,SAAS,EAAE;MAC9CC,YAAY,CAAC2B,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;IAC5B;EACJ,CAAC,EAAE,CAACnD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiD,MAAM,EAAE3B,SAAS,CAAC,CAAC;EAE7B9D,SAAS,CAAC,MAAM;IACZ,IAAI4F,aAAoC,GAAG,IAAI;IAE/C,IAAI,CAAApD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiD,MAAM,MAAK,aAAa,IAAI3B,SAAS,EAAE;MAC7C8B,aAAa,GAAGC,WAAW,CAAC,MAAM;QAC9BxB,cAAc,CAACqB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG7B,SAAS,CAAC;MAC1C,CAAC,EAAE,IAAI,CAAC;IACZ;IAEA,IAAI,CAAAtB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiD,MAAM,MAAK,WAAW,IAAI3B,SAAS,IAAI,CAACE,OAAO,EAAE;MACvDC,UAAU,CAACyB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;MACtBpB,iBAAiB,CAAC,IAAI,CAAC;MACvB,IAAIqB,aAAa,EAAE;QACfE,aAAa,CAACF,aAAa,CAAC;MAChC;IACJ;IAEA,OAAO,MAAM;MACT,IAAIA,aAAa,EAAE;QACfE,aAAa,CAACF,aAAa,CAAC;MAChC;IACJ,CAAC;EACL,CAAC,EAAE,CAACpD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiD,MAAM,EAAE3B,SAAS,EAAEE,OAAO,CAAC,CAAC;EAEtChE,SAAS,CAAC,MAAM;IACZ,IAAIwC,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEuD,KAAK,IAAIvD,IAAI,CAACwD,OAAO,EAAE;MAC7B,MAAMC,aAAa,GAAG;QAAE,GAAGvB;MAAgB,CAAC;MAC5C,MAAMwB,kBAAkB,GAAG;QAAE,GAAG1B;MAAqB,CAAC;MAEtDhC,IAAI,CAACwD,OAAO,CAACG,OAAO,CAACC,MAAM,IAAI;QAC3B,IAAI,CAACH,aAAa,CAACG,MAAM,CAACC,EAAE,CAAC,EAAE;UAC3BJ,aAAa,CAACG,MAAM,CAACC,EAAE,CAAC,GAAG,CAAC,CAAC;QACjC;QACA,IAAI,CAACH,kBAAkB,CAACE,MAAM,CAACC,EAAE,CAAC,EAAE;UAChCH,kBAAkB,CAACE,MAAM,CAACC,EAAE,CAAC,GAAG,CAAC,CAAC;QACtC;;QAEA;QACA,IAAID,MAAM,CAACE,gBAAgB,EAAE;UACzBC,MAAM,CAACC,OAAO,CAACJ,MAAM,CAACE,gBAAgB,CAAC,CAACH,OAAO,CAAC,CAAC,CAACM,QAAQ,EAAE3C,SAAS,CAAC,KAAK;YACvEmC,aAAa,CAACG,MAAM,CAACC,EAAE,CAAC,CAACK,MAAM,CAACD,QAAQ,CAAC,CAAC,GAAG3C,SAAS;UAC1D,CAAC,CAAC;QACN;;QAEA;QACA,KAAK,IAAI2C,QAAQ,GAAG,CAAC,EAAEA,QAAQ,IAAIjE,IAAI,CAACmE,WAAW,EAAEF,QAAQ,EAAE,EAAE;UAAA,IAAAG,qBAAA;UAC7D,MAAMC,UAAU,GAAGrE,IAAI,CAACuD,KAAK,CAACe,MAAM,CAACC,CAAC,IAClCA,CAAC,CAACC,YAAY,KAAKP,QAAQ,IAC3BM,CAAC,CAACE,WAAW,KAAKb,MAAM,CAACC,EAC7B,CAAC;UAED,MAAMa,SAAS,IAAAN,qBAAA,GAAGX,aAAa,CAACG,MAAM,CAACC,EAAE,CAAC,cAAAO,qBAAA,uBAAxBA,qBAAA,CAA2BH,QAAQ,CAAC;UACtD,IAAIS,SAAS,IACTL,UAAU,CAACM,MAAM,GAAG,CAAC,IACrBN,UAAU,CAACO,KAAK,CAACL,CAAC,IAAIA,CAAC,CAACtB,MAAM,KAAKhE,UAAU,CAAC4F,SAAS,CAAC,IACxD,CAACnB,kBAAkB,CAACE,MAAM,CAACC,EAAE,CAAC,CAACI,QAAQ,CAAC,EAAE;YAC1CP,kBAAkB,CAACE,MAAM,CAACC,EAAE,CAAC,CAACI,QAAQ,CAAC,GAAGf,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGuB,SAAS;UACpE;QACJ;MACJ,CAAC,CAAC;MAEFvC,kBAAkB,CAACsB,aAAa,CAAC;MACjCxB,uBAAuB,CAACyB,kBAAkB,CAAC;IAC/C;EACJ,CAAC,EAAE,CAAC1D,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEuD,KAAK,EAAEvD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEwD,OAAO,CAAC,CAAC;EAEhC,MAAMsB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAAC5E,UAAU,EAAE;MACbiB,QAAQ,CAAC,8BAA8B,CAAC;MACxC;IACJ;IAEA,IAAI;MACA,MAAM4D,SAAS,GAAG,MAAM3F,WAAW,CAAC4F,UAAU,CAACtE,WAAW,EAAEE,UAAU,EAAEE,aAAa,CAAC;MACtFf,SAAS,CAACgF,SAAS,CAAC;;MAEpB;MACA,MAAME,WAAW,GAAG,MAAM7F,WAAW,CAAC8F,QAAQ,CAACH,SAAS,EAAE7E,UAAU,CAAC;MACrEG,WAAW,CAAC4E,WAAW,CAAC;;MAExB;MACA,MAAME,SAAS,GAAG,MAAM/F,WAAW,CAACgG,YAAY,CAACL,SAAS,CAAC;MAC3D9E,OAAO,CAACkF,SAAS,CAAC;;MAElB;MACAhF,aAAa,CAAC,EAAE,CAAC;MACjBQ,cAAc,CAAC,CAAC,CAAC;MACjBE,aAAa,CAAC,CAAC,CAAC;MAChBE,gBAAgB,CAAC,CAAC,CAAC;MACnBE,aAAa,CAAC,EAAE,CAAC;MACjBE,QAAQ,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZC,QAAQ,CAAC,0CAA0C,CAAC;MACpD0B,OAAO,CAAC3B,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,MAAMmE,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACnF,UAAU,EAAE;MACbiB,QAAQ,CAAC,0BAA0B,CAAC;MACpC;IACJ;IAEA,MAAMmE,YAAY,GAAG3F,MAAM,IAAIqB,UAAU;IACzC,IAAI,CAACsE,YAAY,EAAE;MACfnE,QAAQ,CAAC,sBAAsB,CAAC;MAChC;IACJ;IAEA,IAAI;MACA,MAAMoE,MAAM,GAAG,MAAMnG,WAAW,CAACoG,eAAe,CAACF,YAAY,CAAC;MAC9D,IAAI,CAACC,MAAM,EAAE;QACTpE,QAAQ,CAAC,gBAAgB,CAAC;QAC1B;MACJ;MAEA,MAAM8D,WAAW,GAAG,MAAM7F,WAAW,CAAC8F,QAAQ,CAACI,YAAY,EAAEpF,UAAU,CAAC;MACxEG,WAAW,CAAC4E,WAAW,CAAC;MACxBlF,SAAS,CAACuF,YAAY,CAAC;MACvB7E,iBAAiB,CAAC,KAAK,CAAC;MACxB,MAAM0E,SAAS,GAAG,MAAM/F,WAAW,CAACgG,YAAY,CAACE,YAAY,CAAC;MAC9DrF,OAAO,CAACkF,SAAS,CAAC;;MAElB;MACAhF,aAAa,CAAC,EAAE,CAAC;MACjBQ,cAAc,CAAC,CAAC,CAAC;MACjBE,aAAa,CAAC,CAAC,CAAC;MAChBE,gBAAgB,CAAC,CAAC,CAAC;MACnBE,aAAa,CAAC,EAAE,CAAC;MACjBE,QAAQ,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZC,QAAQ,CAAC,wCAAwC,CAAC;MAClD0B,OAAO,CAAC3B,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC/C;EACJ,CAAC;EAED,MAAMuE,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAAC9F,MAAM,EAAE;IAEb,IAAI;MACA,MAAMP,WAAW,CAACsG,SAAS,CAAC/F,MAAM,CAAC;MACnCwB,QAAQ,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZC,QAAQ,CAAC,yCAAyC,CAAC;MACnD0B,OAAO,CAAC3B,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,MAAMyE,aAAa,GAAGnH,SAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;EAED;EACA,MAAMoH,gBAAgB,GAAIC,IAAc,IAAK;IACzC,oBACItG,OAAA,CAAC9B,GAAG;MACAqI,EAAE,EAAE;QACAC,KAAK,EAAE;UAAEC,EAAE,EAAE,MAAM;UAAEC,EAAE,EAAE;QAAO,CAAC;QACjCC,MAAM,EAAE;UAAEF,EAAE,EAAE,MAAM;UAAEC,EAAE,EAAE;QAAO,CAAC;QAClCE,YAAY,EAAE,KAAK;QACnBC,MAAM,EAAEC,KAAK,KAAK;UACdL,EAAE,EAAE,aAAaK,KAAK,CAACC,OAAO,CAACC,OAAO,CAACC,IAAI,EAAE;UAC7CP,EAAE,EAAE,aAAaI,KAAK,CAACC,OAAO,CAACC,OAAO,CAACC,IAAI;QAC/C,CAAC,CAAC;QACFC,OAAO,EAAE,MAAM;QACfC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBC,eAAe,EAAEP,KAAK,IAAIA,KAAK,CAACC,OAAO,CAACO,UAAU,CAACC,KAAK;QACxDC,KAAK,EAAEV,KAAK,IAAIA,KAAK,CAACC,OAAO,CAACU,IAAI,CAACT,OAAO;QAC1CU,QAAQ,EAAE;UAAEjB,EAAE,EAAE,QAAQ;UAAEC,EAAE,EAAE;QAAS,CAAC;QACxCiB,UAAU,EAAE,MAAM;QAClBC,YAAY,EAAE;UAAEnB,EAAE,EAAE,CAAC;UAAEC,EAAE,EAAE;QAAE,CAAC;QAC9BmB,WAAW,EAAE;MACjB,CAAE;MAAAC,QAAA,EAEDxB,IAAI,KAAK1G,QAAQ,CAACmI,KAAK,GAAG,GAAG,GAAG;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAEd,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAGA,CAAC1D,QAAgB,EAAE7D,QAAgB,KAAK;IAC7D,MAAMiE,UAAU,GAAGrE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEuD,KAAK,CAACe,MAAM,CAACC,CAAC,IACnCA,CAAC,CAACC,YAAY,KAAKP,QAAQ,IAC3BM,CAAC,CAACE,WAAW,KAAKrE,QACtB,CAAC;IACD,OAAO,CAAAiE,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEO,KAAK,CAACL,CAAC,IAAIA,CAAC,CAACtB,MAAM,KAAKhE,UAAU,CAAC4F,SAAS,CAAC,KAAI,KAAK;EAC7E,CAAC;;EAED;EACA,MAAM+C,kBAAkB,GAAIC,MAAc,IAAK;IAC3C,IAAIvH,SAAS,EAAE;MACX,MAAMwH,IAAI,GAAG9H,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEuD,KAAK,CAACwE,IAAI,CAACxD,CAAC,IAAIA,CAAC,CAACV,EAAE,KAAKgE,MAAM,CAAC;MACnD,IAAI,CAACC,IAAI,EAAE;;MAEX;MACArF,eAAe,CAACuF,IAAI,IAAI,IAAItF,GAAG,CAAC,CAAC,GAAGsF,IAAI,EAAEH,MAAM,CAAC,CAAC,CAAC;;MAEnD;MACAtF,iBAAiB,CAACyF,IAAI,KAAK;QACvB,GAAGA,IAAI;QACP,CAACH,MAAM,GAAG;UACNI,UAAU,EAAE;QAChB;MACJ,CAAC,CAAC,CAAC;;MAEH;MACAC,UAAU,CAAC,MAAM;QACb3F,iBAAiB,CAACyF,IAAI,KAAK;UACvB,GAAGA,IAAI;UACP,CAACH,MAAM,GAAG;YACNI,UAAU,EAAE;UAChB;QACJ,CAAC,CAAC,CAAC;QACH3H,SAAS,CAAC6H,YAAY,CAACN,MAAM,CAAC;MAClC,CAAC,EAAE,GAAG,CAAC;IACX;EACJ,CAAC;;EAED;EACA,MAAMO,UAAU,GAAGA,CAACvC,IAAc,EAAEoC,UAAmB,EAAEI,OAAgB,GAAG,KAAK,EAAEC,OAAoB,EAAET,MAAe,KAAK;IACzH,MAAMU,SAAS,GAAGV,MAAM,GAAGvF,cAAc,CAACuF,MAAM,CAAC,GAAGW,SAAS;IAC7D,MAAMC,SAAS,GAAGZ,MAAM,GAAGrF,YAAY,CAACkG,GAAG,CAACb,MAAM,CAAC,GAAG,KAAK;;IAE3D;IACA,MAAMc,WAAW,GAAGF,SAAS,GACtB5C,IAAI,KAAK1G,QAAQ,CAACmI,KAAK,GAAGnI,QAAQ,CAACyJ,KAAK,GAAGzJ,QAAQ,CAACmI,KAAK,GAC1DzB,IAAI;IAEV,oBACItG,OAAA,CAAC9B,GAAG;MACAqI,EAAE,EAAE;QACAC,KAAK,EAAEsC,OAAO,GAAG,EAAE,GAAG,EAAE;QACxBnC,MAAM,EAAEmC,OAAO,GAAG,EAAE,GAAG,EAAE;QACzBlC,YAAY,EAAE,KAAK;QACnBS,eAAe,EAAE+B,WAAW,KAAKxJ,QAAQ,CAACmI,KAAK,GAAG,SAAS,GAAG,SAAS;QACvElB,MAAM,EAAE,GAAGiC,OAAO,GAAG,CAAC,GAAG,CAAC,kBAAkB;QAC5CtB,KAAK,EAAE,SAAS;QAChBN,OAAO,EAAE,MAAM;QACfC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBO,UAAU,EAAE,MAAM;QAClBD,QAAQ,EAAEoB,OAAO,GAAG,QAAQ,GAAG,QAAQ;QACvCQ,WAAW,EAAE,IAAI;QACjBC,EAAE,EAAET,OAAO,GAAG,CAAC,GAAG,CAAC;QACnBU,QAAQ,EAAE,UAAU;QACpBC,MAAM,EAAEV,OAAO,GAAG,SAAS,GAAG,SAAS;QACvCW,UAAU,EAAE,gBAAgB;QAC5BC,cAAc,EAAE,aAAa;QAC7BC,SAAS,EAAEZ,SAAS,aAATA,SAAS,eAATA,SAAS,CAAEN,UAAU,GAAG,iBAAiB,GAAG,eAAe;QACtE,SAAS,EAAEK,OAAO,GAAG;UACjBa,SAAS,EAAE,aAAa;UACxBC,SAAS,EAAE;QACf,CAAC,GAAG,CAAC,CAAC;QACN,UAAU,EAAEd,OAAO,GAAG;UAClBa,SAAS,EAAE;QACf,CAAC,GAAG,CAAC,CAAC;QACN,UAAU,EAAE;UACRE,OAAO,EAAE,IAAI;UACbN,QAAQ,EAAE,UAAU;UACpBO,GAAG,EAAE,CAAC;UACNC,IAAI,EAAE,CAAC;UACPC,KAAK,EAAE,CAAC;UACRC,MAAM,EAAE,CAAC;UACTtD,YAAY,EAAE,KAAK;UACnBU,UAAU,EAAE,kGAAkG;UAC9G6C,aAAa,EAAE;QACnB;MACJ,CAAE;MACFpB,OAAO,EAAEA,OAAQ;MAAAjB,QAAA,EAEhBsB,WAAW,KAAKxJ,QAAQ,CAACmI,KAAK,GAAG,GAAG,GAAG;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAEd,CAAC;;EAED;EACAlK,SAAS,CAAC,MAAM;IACZ,IAAIwC,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEuD,KAAK,EAAE;MACb,MAAMoG,eAAe,GAAG,IAAIjH,GAAG,CAACF,YAAY,CAAC;MAC7C,IAAIoH,UAAU,GAAG,KAAK;MAEtB5J,IAAI,CAACuD,KAAK,CAACI,OAAO,CAACmE,IAAI,IAAI;QACvB;QACA,IAAIA,IAAI,CAAC7E,MAAM,KAAKhE,UAAU,CAAC4K,OAAO,IAAIF,eAAe,CAACjB,GAAG,CAACZ,IAAI,CAACjE,EAAE,CAAC,EAAE;UACpE8F,eAAe,CAACG,MAAM,CAAChC,IAAI,CAACjE,EAAE,CAAC;UAC/B+F,UAAU,GAAG,IAAI;QACrB;MACJ,CAAC,CAAC;MAEF,IAAIA,UAAU,EAAE;QACZnH,eAAe,CAACkH,eAAe,CAAC;MACpC;IACJ;EACJ,CAAC,EAAE,CAAC3J,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEuD,KAAK,CAAC,CAAC;EAEjB,MAAMwG,oBAAoB,GAAI9G,MAAoB,IAAK;IACnD,QAAQA,MAAM;MACV,KAAK/D,YAAY,CAAC8K,MAAM;QACpB,OAAO,SAAS;MACpB,KAAK9K,YAAY,CAAC+K,OAAO;QACrB,OAAO,SAAS;MACpB,KAAK/K,YAAY,CAACgL,IAAI;QAClB,OAAO,SAAS;MACpB;QACI,OAAO,SAAS;IACxB;EACJ,CAAC;EAED,MAAMC,kBAAkB,GAAIlH,MAAkB,IAAK;IAC/C,QAAQA,MAAM;MACV,KAAKhE,UAAU,CAAC4F,SAAS;QACrB,OAAO,SAAS;MACpB,KAAK5F,UAAU,CAACmL,WAAW;QACvB,OAAO,SAAS;MACpB,KAAKnL,UAAU,CAAC4K,OAAO;QACnB,OAAO,SAAS;MACpB;QACI,OAAO,SAAS;IACxB;EACJ,CAAC;EAED,MAAMQ,aAAa,GAAGA,CAAC9G,KAAa,EAAErD,UAAkB,KAAK;IACzD;IACA,MAAMoK,IAAc,GAAG,EAAE;IACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhH,KAAK,CAACoB,MAAM,EAAE4F,CAAC,IAAI,CAAC,EAAE;MACtCD,IAAI,CAACE,IAAI,CAACjH,KAAK,CAACkH,KAAK,CAACF,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,CAAC;IACpC;IAEA,OAAOD,IAAI,CAACI,GAAG,CAAC,CAACC,QAAQ,EAAEC,QAAQ,kBAC/BrL,OAAA,CAAC9B,GAAG;MAEAqI,EAAE,EAAE;QACAW,OAAO,EAAE,MAAM;QACfoE,GAAG,EAAE,CAAC;QACN/B,EAAE,EAAE,CAAC;QACLgC,QAAQ,EAAE,QAAQ;QAClBnE,cAAc,EAAE;MACpB,CAAE;MAAAU,QAAA,EAEDsD,QAAQ,CAACD,GAAG,CAAC5C,IAAI,iBACdvI,OAAA,CAAC5B,IAAI;QAEDmI,EAAE,EAAE;UACAC,KAAK,EAAE,GAAG;UACVgF,QAAQ,EAAE,GAAG;UACbnE,eAAe,EAAE,kBAAkB;UACnCmC,QAAQ,EAAE,UAAU;UACpBiC,QAAQ,EAAE;QACd,CAAE;QAAA3D,QAAA,eAEF9H,OAAA,CAAC3B,WAAW;UAACkI,EAAE,EAAE;YACbmF,CAAC,EAAE,gBAAgB;YACnBC,EAAE,EAAE,gBAAgB;YACpBzE,OAAO,EAAE,MAAM;YACf0E,aAAa,EAAE,QAAQ;YACvBzE,UAAU,EAAE;UAChB,CAAE;UAAAW,QAAA,GACGe,UAAU,CAACN,IAAI,CAACjC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM+B,kBAAkB,CAACE,IAAI,CAACjE,EAAE,CAAC,EAAEiE,IAAI,CAACjE,EAAE,CAAC,eAChFtE,OAAA,CAAC9B,GAAG;YAACqI,EAAE,EAAE;cAAEC,KAAK,EAAE,MAAM;cAAEqF,EAAE,EAAE;YAAI,CAAE;YAAA/D,QAAA,eAChC9H,OAAA,CAAChB,IAAI;cACD8M,KAAK,EAAEvD,IAAI,CAAC7E,MAAO;cACnBqI,IAAI,EAAC,OAAO;cACZxF,EAAE,EAAE;gBACAc,eAAe,EAAEuD,kBAAkB,CAACrC,IAAI,CAAC7E,MAAM,CAAC;gBAChD8D,KAAK,EAAE,OAAO;gBACdG,UAAU,EAAE,GAAG;gBACfnB,KAAK,EAAE,MAAM;gBACbG,MAAM,EAAE,MAAM;gBACd,kBAAkB,EAAE;kBAChBe,QAAQ,EAAE,SAAS;kBACnBsE,OAAO,EAAE;gBACb;cACJ;YAAE;cAAAhE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG;MAAC,GAlCT,GAAGI,IAAI,CAACjE,EAAE,IAAI3D,UAAU,IAAI4H,IAAI,CAACtD,YAAY,EAAE;QAAA+C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAmClD,CACT;IAAC,GA/CG,OAAOkD,QAAQ,EAAE;MAAArD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAgDrB,CACR,CAAC;EACN,CAAC;EAED,MAAM8D,YAAY,GAAI5H,MAAc,IAAK;IAAA,IAAA6H,qBAAA;IACrC,MAAMC,kBAAkB,GAAG9H,MAAM,CAAC+H,aAAa,CAAChH,MAAM,GAAG,CAAC,GACpDf,MAAM,CAAC+H,aAAa,CAAC,CAAC,CAAC,CAAC9F,IAAI,IAAA4F,qBAAA,GAC5B7H,MAAM,CAACgI,eAAe,CAAC7D,IAAI,CAACxD,CAAC,IAAIA,CAAC,CAACC,YAAY,KAAKZ,MAAM,CAACiI,aAAa,CAAC,cAAAJ,qBAAA,uBAAzEA,qBAAA,CAA2E5F,IAAI;IAErF,oBACItG,OAAA,CAAC5B,IAAI;MAACmI,EAAE,EAAE;QAAEI,MAAM,EAAE;MAAO,CAAE;MAAAmB,QAAA,eACzB9H,OAAA,CAAC3B,WAAW;QAACkI,EAAE,EAAE;UAAEmF,CAAC,EAAE;QAAE,CAAE;QAAA5D,QAAA,gBACtB9H,OAAA,CAAC9B,GAAG;UAACqI,EAAE,EAAE;YAAEW,OAAO,EAAE,MAAM;YAAEE,cAAc,EAAE,eAAe;YAAED,UAAU,EAAE,QAAQ;YAAEoC,EAAE,EAAE;UAAE,CAAE;UAAAzB,QAAA,gBACvF9H,OAAA,CAAC1B,UAAU;YAACiO,OAAO,EAAC,IAAI;YAAChG,EAAE,EAAE;cACzBiB,KAAK,EAAE,cAAc;cACrBE,QAAQ,EAAE;YACd,CAAE;YAAAI,QAAA,EAAEzD,MAAM,CAACmI;UAAI;YAAAxE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eAC7BnI,OAAA,CAAChB,IAAI;YACD8M,KAAK,EAAEzH,MAAM,CAACX,MAAO;YACrBqI,IAAI,EAAC,OAAO;YACZvE,KAAK,EAAEgD,oBAAoB,CAACnG,MAAM,CAACX,MAAM,CAAE;YAC3C6C,EAAE,EAAE;cACAoB,UAAU,EAAE,GAAG;cACfhB,MAAM,EAAE;YACZ;UAAE;YAAAqB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eACNnI,OAAA,CAACzB,IAAI;UAACkO,SAAS;UAACC,OAAO,EAAE,CAAE;UAACnG,EAAE,EAAE;YAAEgD,EAAE,EAAE;UAAE,CAAE;UAAAzB,QAAA,gBACtC9H,OAAA,CAACzB,IAAI;YAACoO,IAAI;YAAClG,EAAE,EAAE,EAAG;YAAAqB,QAAA,eACd9H,OAAA,CAAC9B,GAAG;cAACqI,EAAE,EAAE;gBACLW,OAAO,EAAE,MAAM;gBACfC,UAAU,EAAE,QAAQ;gBACpBmE,GAAG,EAAE,CAAC;gBACN/B,EAAE,EAAE,CAAC;gBACLlC,eAAe,EAAE,yBAAyB;gBAC1CqE,CAAC,EAAE,CAAC;gBACJ9E,YAAY,EAAE;cAClB,CAAE;cAAAkB,QAAA,gBACE9H,OAAA,CAAC1B,UAAU;gBAACiO,OAAO,EAAC,OAAO;gBAAChG,EAAE,EAAE;kBAAEoB,UAAU,EAAE;gBAAI,CAAE;gBAAAG,QAAA,GAAC,iBAClC,EAACzD,MAAM,CAACiI,aAAa,EAAC,KAAG,EAAC7L,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmE,WAAW;cAAA;gBAAAoD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClD,CAAC,EACZgE,kBAAkB,iBACfnM,OAAA,CAAC9B,GAAG;gBAACqI,EAAE,EAAE;kBAAEW,OAAO,EAAE,MAAM;kBAAEC,UAAU,EAAE,QAAQ;kBAAEmE,GAAG,EAAE;gBAAI,CAAE;gBAAAxD,QAAA,gBACzD9H,OAAA,CAAC1B,UAAU;kBAACiO,OAAO,EAAC,OAAO;kBAAChG,EAAE,EAAE;oBAAEoB,UAAU,EAAE;kBAAI,CAAE;kBAAAG,QAAA,EAAC;gBAErD;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAY,CAAC,EACZ9B,gBAAgB,CAAC8F,kBAAkB,CAAC;cAAA;gBAAAnE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACpC,CACR;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eACPnI,OAAA,CAACzB,IAAI;YAACoO,IAAI;YAAClG,EAAE,EAAE,CAAE;YAAAqB,QAAA,gBACb9H,OAAA,CAAC1B,UAAU;cAACiO,OAAO,EAAC,OAAO;cAAC/E,KAAK,EAAC,eAAe;cAAAM,QAAA,EAAC;YAAa;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eAC5EnI,OAAA,CAAC1B,UAAU;cAACiO,OAAO,EAAC,IAAI;cAAChG,EAAE,EAAE;gBAAEmB,QAAQ,EAAE;cAAS,CAAE;cAAAI,QAAA,EAAEzD,MAAM,CAAC+H,aAAa,CAAChH;YAAM;cAAA4C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAa,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7F,CAAC,eACPnI,OAAA,CAACzB,IAAI;YAACoO,IAAI;YAAClG,EAAE,EAAE,CAAE;YAAAqB,QAAA,gBACb9H,OAAA,CAAC1B,UAAU;cAACiO,OAAO,EAAC,OAAO;cAAC/E,KAAK,EAAC,eAAe;cAAAM,QAAA,EAAC;YAAS;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eACxEnI,OAAA,CAAC1B,UAAU;cAACiO,OAAO,EAAC,IAAI;cAAChG,EAAE,EAAE;gBAAEmB,QAAQ,EAAE;cAAS,CAAE;cAAAI,QAAA,EAAEzD,MAAM,CAACgI,eAAe,CAACjH;YAAM;cAAA4C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAa,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/F,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eACPnI,OAAA,CAAC9B,GAAG;UAACqI,EAAE,EAAE;YAAEsF,EAAE,EAAE;UAAE,CAAE;UAAA/D,QAAA,gBACf9H,OAAA,CAAC1B,UAAU;YAACiO,OAAO,EAAC,WAAW;YAAChG,EAAE,EAAE;cAAEiB,KAAK,EAAE,cAAc;cAAEG,UAAU,EAAE,GAAG;cAAE4B,EAAE,EAAE;YAAE,CAAE;YAAAzB,QAAA,EAAC;UAEvF;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,EACZ2C,aAAa,CAACzG,MAAM,CAAC+H,aAAa,EAAE/H,MAAM,CAACmI,IAAI,CAAC;QAAA;UAAAxE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD,CAAC,EACL9D,MAAM,CAACgI,eAAe,CAACjH,MAAM,GAAG,CAAC,IAAI3E,IAAI,IAAI4D,MAAM,CAACuI,KAAK,KAAKnM,IAAI,CAACwD,OAAO,CAACmB,MAAM,GAAG,CAAC,iBAClFpF,OAAA,CAAC9B,GAAG;UAACqI,EAAE,EAAE;YAAEsF,EAAE,EAAE;UAAE,CAAE;UAAA/D,QAAA,gBACf9H,OAAA,CAAC1B,UAAU;YAACiO,OAAO,EAAC,WAAW;YAAChG,EAAE,EAAE;cAAEiB,KAAK,EAAE,cAAc;cAAEG,UAAU,EAAE,GAAG;cAAE4B,EAAE,EAAE;YAAE,CAAE;YAAAzB,QAAA,EAAC;UAEvF;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,EACZ2C,aAAa,CAACzG,MAAM,CAACgI,eAAe,EAAEhI,MAAM,CAACmI,IAAI,CAAC;QAAA;UAAAxE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClD,CACR;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAEf,CAAC;EAED,MAAM0E,eAAe,GAAGA,CAACC,CAAuB,EAAEC,QAAgB,KAAK;IACnE;IACAjL,YAAY,CAACiL,QAAQ,CAAC;IACtBnM,aAAa,CAAC,EAAE,CAAC;IACjBQ,cAAc,CAAC,CAAC,CAAC;IACjBE,aAAa,CAAC,CAAC,CAAC;IAChBE,gBAAgB,CAAC,CAAC,CAAC;IACnBE,aAAa,CAAC,EAAE,CAAC;IACjBE,QAAQ,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,MAAMoL,kBAAkB,GAAGA,CAAA,KAAM;IAC7B9K,UAAU,CAACyB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;IACtBxB,uBAAuB,CAAC,IAAI,CAAC;EACjC,CAAC;;EAED;EACA,MAAM6K,gBAAgB,GAAIC,EAAU,IAAK;IACrC,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACH,EAAE,GAAG,IAAI,CAAC;IAC1C,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACF,YAAY,GAAG,EAAE,CAAC;IAC7C,MAAMI,OAAO,GAAGJ,YAAY,GAAG,EAAE;IACjC,OAAO,GAAGG,OAAO,IAAIC,OAAO,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EAC9D,CAAC;EAED,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;IACjC,IAAI,CAAC3L,SAAS,IAAI,CAACE,OAAO,EAAE,OAAO,IAAI;IACvC,MAAM0L,SAAS,GAAG1L,OAAO,GAAGF,SAAS;IAErC,oBACI/B,OAAA,CAACvB,MAAM;MACHmP,IAAI,EAAEzL,oBAAqB;MAC3B0L,OAAO,EAAEA,CAAA,KAAMzL,uBAAuB,CAAC,KAAK,CAAE;MAC9C0L,UAAU,EAAE;QACRvH,EAAE,EAAE;UACAK,YAAY,EAAE,CAAC;UACf8E,CAAC,EAAE;QACP;MACJ,CAAE;MAAA5D,QAAA,gBAEF9H,OAAA,CAACtB,WAAW;QAAC6H,EAAE,EAAE;UAAEwH,SAAS,EAAE,QAAQ;UAAEvG,KAAK,EAAE;QAAe,CAAE;QAAAM,QAAA,EAAC;MAEjE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,eACdnI,OAAA,CAACrB,aAAa;QAAAmJ,QAAA,eACV9H,OAAA,CAAC9B,GAAG;UAACqI,EAAE,EAAE;YACLW,OAAO,EAAE,MAAM;YACf0E,aAAa,EAAE,QAAQ;YACvBzE,UAAU,EAAE,QAAQ;YACpBmE,GAAG,EAAE,CAAC;YACN0C,EAAE,EAAE;UACR,CAAE;UAAAlG,QAAA,gBACE9H,OAAA,CAAC1B,UAAU;YAACiO,OAAO,EAAC,IAAI;YAAAzE,QAAA,GAAC,cACT,EAACmF,gBAAgB,CAACU,SAAS,CAAC;UAAA;YAAA3F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChC,CAAC,eACbnI,OAAA,CAAC1B,UAAU;YAACiO,OAAO,EAAC,OAAO;YAAC/E,KAAK,EAAC,gBAAgB;YAAAM,QAAA,EAAC;UAEnD;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACK,CAAC,eAChBnI,OAAA,CAACpB,aAAa;QAAC2H,EAAE,EAAE;UAAEa,cAAc,EAAE;QAAS,CAAE;QAAAU,QAAA,eAC5C9H,OAAA,CAAC7B,MAAM;UACHoO,OAAO,EAAC,WAAW;UACnBxD,OAAO,EAAEA,CAAA,KAAM;YACX3G,uBAAuB,CAAC,KAAK,CAAC;YAC9B6L,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;UAC9B,CAAE;UAAArG,QAAA,EACL;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAEjB,CAAC;EAED,MAAMiG,kBAAkB,GAAGA,CAAA,KAAM;IAC7B5L,iBAAiB,CAAC,IAAI,CAAC;EAC3B,CAAC;EAED,MAAM6L,kBAAkB,GAAGA,CAAA,KAAM;IAC7BJ,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;EAC5B,CAAC;EAED,MAAMG,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAACvM,SAAS,IAAI,CAACE,OAAO,EAAE,OAAO,IAAI;IACvC,MAAM0L,SAAS,GAAG1L,OAAO,GAAGF,SAAS;IAErC,oBACI/B,OAAA,CAAC9B,GAAG;MAACqI,EAAE,EAAE;QACLmF,CAAC,EAAE,CAAC;QACJrE,eAAe,EAAE,oBAAoB;QACrCkH,SAAS,EAAE,OAAO;QAClBrH,OAAO,EAAE,MAAM;QACf0E,aAAa,EAAE,QAAQ;QACvBzE,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE;MACpB,CAAE;MAAAU,QAAA,eACE9H,OAAA,CAAC5B,IAAI;QAACmI,EAAE,EAAE;UACNiI,QAAQ,EAAE,GAAG;UACbhI,KAAK,EAAE,MAAM;UACbkF,CAAC,EAAE,CAAC;UACJqC,SAAS,EAAE;QACf,CAAE;QAAAjG,QAAA,gBACE9H,OAAA,CAAC1B,UAAU;UAACiO,OAAO,EAAC,IAAI;UAAChG,EAAE,EAAE;YAAEgD,EAAE,EAAE,CAAC;YAAE/B,KAAK,EAAE;UAAe,CAAE;UAAAM,QAAA,EAAC;QAE/D;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACbnI,OAAA,CAAC1B,UAAU;UAACiO,OAAO,EAAC,IAAI;UAAChG,EAAE,EAAE;YAAEgD,EAAE,EAAE;UAAE,CAAE;UAAAzB,QAAA,GAAC,cACxB,EAACmF,gBAAgB,CAACU,SAAS,CAAC;QAAA;UAAA3F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC,eACbnI,OAAA,CAAC7B,MAAM;UACHoO,OAAO,EAAC,WAAW;UACnBxD,OAAO,EAAEsF,kBAAmB;UAC5BtC,IAAI,EAAC,OAAO;UAAAjE,QAAA,EACf;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAEd,CAAC;EAED,MAAMsG,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAAChO,IAAI,EAAE,OAAO,IAAI;IAEtB,oBACIT,OAAA,CAAC9B,GAAG;MAACqI,EAAE,EAAE;QAAEmF,CAAC,EAAE;MAAE,CAAE;MAAA5D,QAAA,gBACd9H,OAAA,CAAC1B,UAAU;QAACiO,OAAO,EAAC,IAAI;QAAChG,EAAE,EAAE;UAAEgD,EAAE,EAAE,CAAC;UAAE/B,KAAK,EAAE;QAAe,CAAE;QAAAM,QAAA,EAAC;MAE/D;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,EACZuG,KAAK,CAACC,IAAI,CAAC;QAAEvJ,MAAM,EAAE3E,IAAI,CAACmE;MAAY,CAAC,EAAE,CAACkI,CAAC,EAAE9B,CAAC,KAAKA,CAAC,GAAG,CAAC,CAAC,CAACG,GAAG,CAACzG,QAAQ,iBACnE1E,OAAA,CAAC9B,GAAG;QAAgBqI,EAAE,EAAE;UAAEgD,EAAE,EAAE;QAAE,CAAE;QAAAzB,QAAA,gBAC9B9H,OAAA,CAAC1B,UAAU;UAACiO,OAAO,EAAC,WAAW;UAAChG,EAAE,EAAE;YAAEoB,UAAU,EAAE,MAAM;YAAE4B,EAAE,EAAE;UAAE,CAAE;UAAAzB,QAAA,GAAC,QACzD,EAACpD,QAAQ;QAAA;UAAAsD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC,eACbnI,OAAA,CAACb,cAAc;UAACyP,SAAS,EAAEnP,KAAM;UAAC8G,EAAE,EAAE;YAAEgD,EAAE,EAAE;UAAE,CAAE;UAAAzB,QAAA,eAC5C9H,OAAA,CAACZ,KAAK;YAAC2M,IAAI,EAAC,OAAO;YAAAjE,QAAA,gBACf9H,OAAA,CAACX,SAAS;cAAAyI,QAAA,eACN9H,OAAA,CAACR,QAAQ;gBAAAsI,QAAA,gBACL9H,OAAA,CAACT,SAAS;kBAAAuI,QAAA,EAAC;gBAAM;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eAC7BnI,OAAA,CAACT,SAAS;kBAACsP,KAAK,EAAC,OAAO;kBAAA/G,QAAA,EAAC;gBAAI;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eACzCnI,OAAA,CAACT,SAAS;kBAACsP,KAAK,EAAC,OAAO;kBAAA/G,QAAA,EAAC;gBAAM;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACrC;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACJ,CAAC,eACZnI,OAAA,CAACV,SAAS;cAAAwI,QAAA,GACLrH,IAAI,CAACwD,OAAO,CAACkH,GAAG,CAAC9G,MAAM,IAAI;gBAAA,IAAAyK,qBAAA,EAAAC,qBAAA,EAAAC,sBAAA;gBACxB,MAAMlK,UAAU,GAAGrE,IAAI,CAACuD,KAAK,CAACe,MAAM,CAACC,CAAC,IAClCA,CAAC,CAACC,YAAY,KAAKP,QAAQ,IAC3BM,CAAC,CAACE,WAAW,KAAKb,MAAM,CAACC,EAC7B,CAAC;gBACD,MAAM2K,WAAW,GAAGnK,UAAU,CAACM,MAAM,GAAG,CAAC,IAAIN,UAAU,CAACO,KAAK,CAACL,CAAC,IAAIA,CAAC,CAACtB,MAAM,KAAKhE,UAAU,CAAC4F,SAAS,CAAC;gBACrG,MAAM4J,UAAU,GAAG,EAAAJ,qBAAA,GAAAzK,MAAM,CAACE,gBAAgB,cAAAuK,qBAAA,uBAAvBA,qBAAA,CAA0BpK,QAAQ,CAAC,KAAI,IAAI;gBAC9D,MAAMyK,cAAc,IAAAJ,qBAAA,GAAG1K,MAAM,CAAC+K,qBAAqB,cAAAL,qBAAA,uBAA5BA,qBAAA,CAA+BrK,QAAQ,CAAC;gBAC/D,MAAM3C,SAAS,IAAAiN,sBAAA,GAAG3K,MAAM,CAACE,gBAAgB,cAAAyK,sBAAA,uBAAvBA,sBAAA,CAA0BtK,QAAQ,CAAC;;gBAErD;gBACA,IAAI2K,WAAW,GAAG,GAAG;gBACrB,IAAIF,cAAc,EAAE;kBAChBE,WAAW,GAAGpC,gBAAgB,CAACkC,cAAc,CAAC;gBAClD,CAAC,MAAM,IAAID,UAAU,IAAInN,SAAS,EAAE;kBAChC,MAAMM,WAAW,GAAGsB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG7B,SAAS;kBAC1CsN,WAAW,GAAGpC,gBAAgB,CAAC5K,WAAW,CAAC;gBAC/C;gBAEA,IAAIqB,MAAM,GAAG,SAAS;gBACtB,IAAIuL,WAAW,EAAE;kBACbvL,MAAM,GAAG,WAAW;gBACxB,CAAC,MAAM,IAAIwL,UAAU,EAAE;kBACnBxL,MAAM,GAAG,aAAa;gBAC1B;gBAEA,oBACI1D,OAAA,CAACR,QAAQ;kBAAAsI,QAAA,gBACL9H,OAAA,CAACT,SAAS;oBAAAuI,QAAA,EAAEzD,MAAM,CAACmI;kBAAI;oBAAAxE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAY,CAAC,eACpCnI,OAAA,CAACT,SAAS;oBAACsP,KAAK,EAAC,OAAO;oBAAA/G,QAAA,EAAEuH;kBAAW;oBAAArH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAY,CAAC,eAClDnI,OAAA,CAACT,SAAS;oBAACsP,KAAK,EAAC,OAAO;oBAAA/G,QAAA,eACpB9H,OAAA,CAAChB,IAAI;sBACD8M,KAAK,EAAEpI,MAAO;sBACdqI,IAAI,EAAC,OAAO;sBACZvE,KAAK,EAAEyH,WAAW,GAAG,SAAS,GAAIC,UAAU,GAAG,SAAS,GAAG;oBAAW;sBAAAlH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACzE;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACK,CAAC;gBAAA,GATD9D,MAAM,CAACC,EAAE;kBAAA0D,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAUd,CAAC;cAEnB,CAAC,CAAC,eACFnI,OAAA,CAACR,QAAQ;gBAAC+G,EAAE,EAAE;kBAAEc,eAAe,EAAE;gBAAsB,CAAE;gBAAAS,QAAA,gBACrD9H,OAAA,CAACT,SAAS;kBAAAuI,QAAA,eAAC9H,OAAA;oBAAA8H,QAAA,EAAQ;kBAAK;oBAAAE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eAC7CnI,OAAA,CAACT,SAAS;kBAACsP,KAAK,EAAC,OAAO;kBAAA/G,QAAA,eACpB9H,OAAA;oBAAA8H,QAAA,EACKmF,gBAAgB,CAACxM,IAAI,CAACwD,OAAO,CAACqL,MAAM,CAAC,CAACC,GAAG,EAAE7D,CAAC;sBAAA,IAAA8D,qBAAA;sBAAA,OACzCD,GAAG,IAAI,EAAAC,qBAAA,GAAA9D,CAAC,CAAC0D,qBAAqB,cAAAI,qBAAA,uBAAvBA,qBAAA,CAA0B9K,QAAQ,CAAC,KAAI,CAAC,CAAC;oBAAA,GAChD,CACJ,CAAC;kBAAC;oBAAAsD,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACE;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACF,CAAC,eACZnI,OAAA,CAACT,SAAS;kBAAAyI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACJ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA,GApEXzD,QAAQ;QAAAsD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAqEb,CACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAEd,CAAC;EAED,IAAI5F,cAAc,EAAE;IAChB,OAAO+L,gBAAgB,CAAC,CAAC;EAC7B;EAEA,IAAI,CAAClO,MAAM,IAAI,CAACS,QAAQ,EAAE;IACtB,oBACIb,OAAA,CAAC9B,GAAG;MAACqI,EAAE,EAAE;QACLmF,CAAC,EAAE,CAAC;QACJrE,eAAe,EAAE,oBAAoB;QACrCkH,SAAS,EAAE,OAAO;QAClBrH,OAAO,EAAE,MAAM;QACf0E,aAAa,EAAE,QAAQ;QACvBzE,UAAU,EAAE;MAChB,CAAE;MAAAW,QAAA,gBACE9H,OAAA,CAAC9B,GAAG;QAACqI,EAAE,EAAE;UACLwH,SAAS,EAAE,QAAQ;UACnBxE,EAAE,EAAE,CAAC;UACLsC,EAAE,EAAE,CAAC;UACLvE,UAAU,EAAE,kDAAkD;UAC9DoE,CAAC,EAAE,CAAC;UACJ9E,YAAY,EAAE,CAAC;UACfiD,SAAS,EAAE,sCAAsC;UACjDrC,KAAK,EAAE,OAAO;UACdhB,KAAK,EAAE,MAAM;UACbgI,QAAQ,EAAE;QACd,CAAE;QAAA1G,QAAA,gBACE9H,OAAA,CAAC1B,UAAU;UAACiO,OAAO,EAAC,IAAI;UAAChG,EAAE,EAAE;YAAEoB,UAAU,EAAE,MAAM;YAAE4B,EAAE,EAAE;UAAE,CAAE;UAAAzB,QAAA,EAAC;QAE5D;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACbnI,OAAA,CAAC1B,UAAU;UAACiO,OAAO,EAAC,WAAW;UAAAzE,QAAA,EAAC;QAEhC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC,eAENnI,OAAA,CAAC9B,GAAG;QAACqI,EAAE,EAAE;UACLC,KAAK,EAAE,MAAM;UACbgI,QAAQ,EAAE,GAAG;UACbnH,eAAe,EAAE,OAAO;UACxBT,YAAY,EAAE,CAAC;UACfiD,SAAS,EAAE,4BAA4B;UACvC6B,CAAC,EAAE;QACP,CAAE;QAAA5D,QAAA,gBACE9H,OAAA,CAACnB,IAAI;UACD4Q,KAAK,EAAE5N,SAAU;UACjB6N,QAAQ,EAAE7C,eAAgB;UAC1BtG,EAAE,EAAE;YACAgD,EAAE,EAAE,CAAC;YACLoG,YAAY,EAAE,CAAC;YACfC,WAAW,EAAE;UACjB,CAAE;UAAA9H,QAAA,gBAEF9H,OAAA,CAAClB,GAAG;YAACgN,KAAK,EAAC;UAAa;YAAA9D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC3BnI,OAAA,CAAClB,GAAG;YAACgN,KAAK,EAAC;UAAW;YAAA9D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC,EAENxG,KAAK,iBACF3B,OAAA,CAACjB,KAAK;UAAC8Q,QAAQ,EAAC,OAAO;UAACtJ,EAAE,EAAE;YAAEgD,EAAE,EAAE;UAAE,CAAE;UAAAzB,QAAA,EACjCnG;QAAK;UAAAqG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACV,EAEAtG,SAAS,KAAK,CAAC,gBACZ7B,OAAA,CAACzB,IAAI;UAACkO,SAAS;UAACC,OAAO,EAAE,CAAE;UAAA5E,QAAA,gBACvB9H,OAAA,CAACzB,IAAI;YAACoO,IAAI;YAAClG,EAAE,EAAE,EAAG;YAAAqB,QAAA,eACd9H,OAAA,CAACxB,SAAS;cACNsR,SAAS;cACThE,KAAK,EAAC,WAAW;cACjB2D,KAAK,EAAE9O,UAAW;cAClB+O,QAAQ,EAAGK,CAAC,IAAKnP,aAAa,CAACmP,CAAC,CAACC,MAAM,CAACP,KAAK,CAAE;cAC/CQ,QAAQ;cACRC,YAAY,EAAC,KAAK;cAClB3J,EAAE,EAAE;gBAAEc,eAAe,EAAE;cAAQ;YAAE;cAAAW,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACPnI,OAAA,CAACzB,IAAI;YAACoO,IAAI;YAAClG,EAAE,EAAE,EAAG;YAAC0J,EAAE,EAAE,CAAE;YAAArI,QAAA,eACrB9H,OAAA,CAACxB,SAAS;cACNsR,SAAS;cACThE,KAAK,EAAC,mBAAmB;cACzBxF,IAAI,EAAC,QAAQ;cACbmJ,KAAK,EAAEtO,WAAY;cACnBuO,QAAQ,EAAGK,CAAC,IAAK3O,cAAc,CAACuD,MAAM,CAACoL,CAAC,CAACC,MAAM,CAACP,KAAK,CAAC,CAAE;cACxDW,UAAU,EAAE;gBAAEC,GAAG,EAAE,CAAC;gBAAEC,GAAG,EAAE;cAAE,CAAE;cAC/BJ,YAAY,EAAC,KAAK;cAClB3J,EAAE,EAAE;gBAAEc,eAAe,EAAE;cAAQ;YAAE;cAAAW,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACPnI,OAAA,CAACzB,IAAI;YAACoO,IAAI;YAAClG,EAAE,EAAE,EAAG;YAAC0J,EAAE,EAAE,CAAE;YAAArI,QAAA,eACrB9H,OAAA,CAACxB,SAAS;cACNsR,SAAS;cACThE,KAAK,EAAC,mBAAmB;cACzBxF,IAAI,EAAC,QAAQ;cACbmJ,KAAK,EAAEpO,UAAW;cAClBqO,QAAQ,EAAGK,CAAC,IAAKzO,aAAa,CAACqD,MAAM,CAACoL,CAAC,CAACC,MAAM,CAACP,KAAK,CAAC,CAAE;cACvDW,UAAU,EAAE;gBAAEC,GAAG,EAAE,CAAC;gBAAEC,GAAG,EAAE;cAAG,CAAE;cAChCJ,YAAY,EAAC,KAAK;cAClB3J,EAAE,EAAE;gBAAEc,eAAe,EAAE;cAAQ;YAAE;cAAAW,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACPnI,OAAA,CAACzB,IAAI;YAACoO,IAAI;YAAClG,EAAE,EAAE,EAAG;YAAC0J,EAAE,EAAE,CAAE;YAAArI,QAAA,eACrB9H,OAAA,CAACxB,SAAS;cACNsR,SAAS;cACThE,KAAK,EAAC,iBAAiB;cACvBxF,IAAI,EAAC,QAAQ;cACbmJ,KAAK,EAAElO,aAAc;cACrBmO,QAAQ,EAAGK,CAAC,IAAKvO,gBAAgB,CAACmD,MAAM,CAACoL,CAAC,CAACC,MAAM,CAACP,KAAK,CAAC,CAAE;cAC1DW,UAAU,EAAE;gBAAEC,GAAG,EAAE,CAAC;gBAAEC,GAAG,EAAE;cAAG,CAAE;cAChCJ,YAAY,EAAC,KAAK;cAClB3J,EAAE,EAAE;gBAAEc,eAAe,EAAE;cAAQ;YAAE;cAAAW,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACPnI,OAAA,CAACzB,IAAI;YAACoO,IAAI;YAAClG,EAAE,EAAE,EAAG;YAAAqB,QAAA,eACd9H,OAAA,CAAC7B,MAAM;cACHoO,OAAO,EAAC,WAAW;cACnBxD,OAAO,EAAExD,gBAAiB;cAC1BgL,QAAQ,EAAE,CAAC5P,UAAW;cACtB4F,EAAE,EAAE;gBAAEsF,EAAE,EAAE;cAAE,CAAE;cACdE,IAAI,EAAC,OAAO;cAAAjE,QAAA,EACf;YAED;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,gBAEPnI,OAAA,CAACzB,IAAI;UAACkO,SAAS;UAACC,OAAO,EAAE,CAAE;UAAA5E,QAAA,gBACvB9H,OAAA,CAACzB,IAAI;YAACoO,IAAI;YAAClG,EAAE,EAAE,EAAG;YAAC0J,EAAE,EAAE,CAAE;YAAArI,QAAA,eACrB9H,OAAA,CAACxB,SAAS;cACNsR,SAAS;cACThE,KAAK,EAAC,SAAS;cACf2D,KAAK,EAAEhO,UAAW;cAClBiO,QAAQ,EAAGK,CAAC,IAAKrO,aAAa,CAACqO,CAAC,CAACC,MAAM,CAACP,KAAK,CAACe,WAAW,CAAC,CAAC,CAAE;cAC7DN,YAAY,EAAC,KAAK;cAClB3J,EAAE,EAAE;gBAAEc,eAAe,EAAE;cAAQ;YAAE;cAAAW,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACPnI,OAAA,CAACzB,IAAI;YAACoO,IAAI;YAAClG,EAAE,EAAE,EAAG;YAAC0J,EAAE,EAAE,CAAE;YAAArI,QAAA,eACrB9H,OAAA,CAACxB,SAAS;cACNsR,SAAS;cACThE,KAAK,EAAC,aAAa;cACnB2D,KAAK,EAAE9O,UAAW;cAClB+O,QAAQ,EAAGK,CAAC,IAAKnP,aAAa,CAACmP,CAAC,CAACC,MAAM,CAACP,KAAK,CAAE;cAC/CS,YAAY,EAAC,KAAK;cAClB3J,EAAE,EAAE;gBAAEc,eAAe,EAAE;cAAQ;YAAE;cAAAW,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACPnI,OAAA,CAACzB,IAAI;YAACoO,IAAI;YAAClG,EAAE,EAAE,EAAG;YAAAqB,QAAA,eACd9H,OAAA,CAAC7B,MAAM;cACHoO,OAAO,EAAC,WAAW;cACnBxD,OAAO,EAAEjD,cAAe;cACxBS,EAAE,EAAE;gBAAEsF,EAAE,EAAE;cAAE,CAAE;cACdE,IAAI,EAAC,OAAO;cAAAjE,QAAA,EACf;YAED;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CACT;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAEd;EAEA,oBACInI,OAAA,CAAC9B,GAAG;IAACqI,EAAE,EAAE;MAAEmF,CAAC,EAAE,CAAC;MAAErE,eAAe,EAAE,oBAAoB;MAAEkH,SAAS,EAAE;IAAQ,CAAE;IAAAzG,QAAA,GACxEnG,KAAK,iBACF3B,OAAA,CAACjB,KAAK;MAAC8Q,QAAQ,EAAC,OAAO;MAACtJ,EAAE,EAAE;QAAEgD,EAAE,EAAE;MAAE,CAAE;MAAAzB,QAAA,EACjCnG;IAAK;MAAAqG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACV,EAEA1H,IAAI,iBACDT,OAAA,CAAAE,SAAA;MAAA4H,QAAA,gBACI9H,OAAA,CAAC9B,GAAG;QAACqI,EAAE,EAAE;UACLW,OAAO,EAAE,MAAM;UACfE,cAAc,EAAE,eAAe;UAC/BD,UAAU,EAAE,QAAQ;UACpBoC,EAAE,EAAE;QACR,CAAE;QAAAzB,QAAA,gBACE9H,OAAA,CAAC9B,GAAG;UAAA4J,QAAA,gBACA9H,OAAA,CAAC1B,UAAU;YAACiO,OAAO,EAAC,IAAI;YAAChG,EAAE,EAAE;cAAEgD,EAAE,EAAE,CAAC;cAAE/B,KAAK,EAAE;YAAe,CAAE;YAAAM,QAAA,GAAC,WAClD,EAACrH,IAAI,CAAC6D,EAAE;UAAA;YAAA0D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC,eACbnI,OAAA,CAAC1B,UAAU;YAACiO,OAAO,EAAC,IAAI;YAAChG,EAAE,EAAE;cAAEiB,KAAK,EAAE;YAAe,CAAE;YAAAM,QAAA,GAAC,eACvC,EAACrH,IAAI,CAACiD,MAAM,KAAK,SAAS,GAAG,SAAS,GAAGjD,IAAI,CAACiD,MAAM,KAAK,aAAa,GAAG,aAAa,GAAG,WAAW;UAAA;YAAAsE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ,CAAC,EACL,CAAC1H,IAAI,CAACiD,MAAM,KAAK,aAAa,IAAIjD,IAAI,CAACiD,MAAM,KAAK,WAAW,KAAK3B,SAAS,iBACxE/B,OAAA,CAAC1B,UAAU;UAACiO,OAAO,EAAC,IAAI;UAAChG,EAAE,EAAE;YAAEiB,KAAK,EAAE;UAAiB,CAAE;UAAAM,QAAA,GAAC,QAChD,EAACmF,gBAAgB,CAACxM,IAAI,CAACiD,MAAM,KAAK,WAAW,IAAIzB,OAAO,GAAGA,OAAO,GAAGF,SAAS,GAAGM,WAAW,CAAC;QAAA;UAAA2F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3F,CACf;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,EAEL1H,IAAI,CAACiD,MAAM,KAAK,SAAS,IAAI7C,QAAQ,OAAAN,cAAA,GAAKE,IAAI,CAACwD,OAAO,CAAC,CAAC,CAAC,cAAA1D,cAAA,uBAAfA,cAAA,CAAiB+D,EAAE,kBAC1DtE,OAAA,CAAC7B,MAAM;QACHoO,OAAO,EAAC,WAAW;QACnBxD,OAAO,EAAE7C,eAAgB;QACzBK,EAAE,EAAE;UAAEgD,EAAE,EAAE;QAAE,CAAE;QAAAzB,QAAA,EACjB;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACX,eAEDnI,OAAA,CAACzB,IAAI;QAACkO,SAAS;QAACC,OAAO,EAAE,CAAE;QAAA5E,QAAA,gBAEvB9H,OAAA,CAACzB,IAAI;UAACoO,IAAI;UAAClG,EAAE,EAAE,EAAG;UAAC0J,EAAE,EAAE,CAAE;UAAArI,QAAA,eACrB9H,OAAA,CAACd,KAAK;YAACwN,OAAO,EAAE,CAAE;YAAA5E,QAAA,EACbrH,IAAI,CAACwD,OAAO,CAACkH,GAAG,CAACc,YAAY;UAAC;YAAAjE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAGPnI,OAAA,CAACzB,IAAI;UAACoO,IAAI;UAAClG,EAAE,EAAE,EAAG;UAAC0J,EAAE,EAAE,CAAE;UAAArI,QAAA,EACpB2G,gBAAgB,CAAC;QAAC;UAAAzG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA,eACT,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC7H,EAAA,CAh8BWH,IAAyB;AAAAsQ,EAAA,GAAzBtQ,IAAyB;AAAA,IAAAsQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}