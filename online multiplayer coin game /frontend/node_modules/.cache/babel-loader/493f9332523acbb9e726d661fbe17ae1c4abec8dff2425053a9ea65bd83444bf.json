{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\nexport const gameService = {\n  createGame: async (playerCount, maxBatches = 4, tasksPerBatch = [20, 10, 5, 2]) => {\n    console.log('Creating game with params:', {\n      playerCount,\n      maxBatches,\n      tasksPerBatch\n    });\n    const response = await axios.post(`${API_URL}/games/create`, null, {\n      params: {\n        player_count: playerCount,\n        max_batches: maxBatches,\n        tasks_per_batch: tasksPerBatch\n      }\n    });\n    console.log('Game created:', response.data);\n    return response.data.game_id;\n  },\n  checkGameExists: async gameId => {\n    console.log('Checking if game exists:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n    console.log('Game exists response:', response.data);\n    return response.data.exists;\n  },\n  joinGame: async (gameId, playerName) => {\n    console.log('Joining game:', {\n      gameId,\n      playerName\n    });\n    const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n      params: {\n        player_name: playerName\n      }\n    });\n    console.log('Join game response:', response.data);\n    return response.data.player_id;\n  },\n  startGame: async gameId => {\n    console.log('Starting game:', gameId);\n    await axios.post(`${API_URL}/games/${gameId}/start`);\n    console.log('Game started');\n  },\n  getGameState: async gameId => {\n    console.log('Getting game state:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}`);\n    console.log('Game state:', response.data);\n    return response.data;\n  }\n};\nexport class WebSocketService {\n  constructor(gameId, playerId, onGameUpdate) {\n    this.ws = null;\n    this.gameId = void 0;\n    this.playerId = void 0;\n    this.onGameUpdate = void 0;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.gameId = gameId;\n    this.playerId = playerId;\n    this.onGameUpdate = onGameUpdate;\n    console.log('WebSocket service initialized:', {\n      gameId,\n      playerId\n    });\n  }\n  async connect() {\n    return new Promise((resolve, reject) => {\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const ws = new WebSocket(`${protocol}//${window.location.host}/ws/${this.gameId}/${this.playerId}`);\n      ws.onopen = () => {\n        this.ws = ws;\n        resolve();\n      };\n      ws.onerror = error => {\n        reject(error);\n      };\n      ws.onmessage = event => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'game_update') {\n          this.onGameUpdate(data.game);\n        }\n      };\n    });\n  }\n  async getGameState() {\n    try {\n      const gameState = await gameService.getGameState(this.gameId);\n      this.onGameUpdate(gameState);\n    } catch (error) {\n      console.error('Error getting game state:', error);\n    }\n  }\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      setTimeout(() => this.connect(), 1000 * this.reconnectAttempts);\n    }\n  }\n  completeTask(taskId) {\n    if (this.ws) {\n      this.ws.send(JSON.stringify({\n        type: 'complete_task',\n        task_id: taskId\n      }));\n    }\n  }\n  startGame() {\n    if (this.ws) {\n      this.ws.send(JSON.stringify({\n        type: 'start_game'\n      }));\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      console.log('Disconnecting WebSocket');\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}","map":{"version":3,"names":["axios","API_URL","WS_URL","gameService","createGame","playerCount","maxBatches","tasksPerBatch","console","log","response","post","params","player_count","max_batches","tasks_per_batch","data","game_id","checkGameExists","gameId","get","exists","joinGame","playerName","player_name","player_id","startGame","getGameState","WebSocketService","constructor","playerId","onGameUpdate","ws","reconnectAttempts","maxReconnectAttempts","connect","Promise","resolve","reject","protocol","window","location","WebSocket","host","onopen","onerror","error","onmessage","event","JSON","parse","type","game","gameState","handleReconnect","setTimeout","completeTask","taskId","send","stringify","task_id","disconnect","close"],"sources":["/Users/huanghao/Desktop/online multiplayer task game/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\n\nexport const gameService = {\n    createGame: async (playerCount: number, maxBatches: number = 4, tasksPerBatch: number[] = [20, 10, 5, 2]): Promise<string> => {\n        console.log('Creating game with params:', { playerCount, maxBatches, tasksPerBatch });\n        const response = await axios.post(`${API_URL}/games/create`, null, {\n            params: { \n                player_count: playerCount, \n                max_batches: maxBatches, \n                tasks_per_batch: tasksPerBatch \n            }\n        });\n        console.log('Game created:', response.data);\n        return response.data.game_id;\n    },\n\n    checkGameExists: async (gameId: string): Promise<boolean> => {\n        console.log('Checking if game exists:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n        console.log('Game exists response:', response.data);\n        return response.data.exists;\n    },\n\n    joinGame: async (gameId: string, playerName: string): Promise<string> => {\n        console.log('Joining game:', { gameId, playerName });\n        const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n            params: { player_name: playerName }\n        });\n        console.log('Join game response:', response.data);\n        return response.data.player_id;\n    },\n\n    startGame: async (gameId: string): Promise<void> => {\n        console.log('Starting game:', gameId);\n        await axios.post(`${API_URL}/games/${gameId}/start`);\n        console.log('Game started');\n    },\n\n    getGameState: async (gameId: string): Promise<Game> => {\n        console.log('Getting game state:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}`);\n        console.log('Game state:', response.data);\n        return response.data;\n    }\n};\n\nexport class WebSocketService {\n    private ws: WebSocket | null = null;\n    private gameId: string;\n    private playerId: string;\n    private onGameUpdate: (game: Game) => void;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = 5;\n\n    constructor(gameId: string, playerId: string, onGameUpdate: (game: Game) => void) {\n        this.gameId = gameId;\n        this.playerId = playerId;\n        this.onGameUpdate = onGameUpdate;\n        console.log('WebSocket service initialized:', { gameId, playerId });\n    }\n\n    async connect() {\n        return new Promise<void>((resolve, reject) => {\n            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n            const ws = new WebSocket(`${protocol}//${window.location.host}/ws/${this.gameId}/${this.playerId}`);\n            \n            ws.onopen = () => {\n                this.ws = ws;\n                resolve();\n            };\n            \n            ws.onerror = (error) => {\n                reject(error);\n            };\n            \n            ws.onmessage = (event) => {\n                const data = JSON.parse(event.data);\n                if (data.type === 'game_update') {\n                    this.onGameUpdate(data.game);\n                }\n            };\n        });\n    }\n\n    private async getGameState() {\n        try {\n            const gameState = await gameService.getGameState(this.gameId);\n            this.onGameUpdate(gameState);\n        } catch (error) {\n            console.error('Error getting game state:', error);\n        }\n    }\n\n    private handleReconnect() {\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.reconnectAttempts++;\n            console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n            setTimeout(() => this.connect(), 1000 * this.reconnectAttempts);\n        }\n    }\n\n    completeTask(taskId: string) {\n        if (this.ws) {\n            this.ws.send(JSON.stringify({\n                type: 'complete_task',\n                task_id: taskId\n            }));\n        }\n    }\n\n    startGame() {\n        if (this.ws) {\n            this.ws.send(JSON.stringify({\n                type: 'start_game'\n            }));\n        }\n    }\n\n    disconnect() {\n        if (this.ws) {\n            console.log('Disconnecting WebSocket');\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}