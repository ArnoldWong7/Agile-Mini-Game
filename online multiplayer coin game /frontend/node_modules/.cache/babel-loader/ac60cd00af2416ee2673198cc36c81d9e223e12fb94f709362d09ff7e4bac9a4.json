{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\nconst gameService = {\n  createGame: async (playerCount, maxBatches, tasksPerBatch) => {\n    console.log('Creating game with params:', {\n      playerCount,\n      maxBatches,\n      tasksPerBatch\n    });\n    const response = await axios.post(`${API_URL}/games/create`, null, {\n      params: {\n        player_count: playerCount,\n        max_batches: maxBatches,\n        tasks_per_batch: tasksPerBatch\n      }\n    });\n    console.log('Game created:', response.data);\n    return response.data.game_id;\n  },\n  checkGameExists: async gameId => {\n    console.log('Checking if game exists:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n    console.log('Game exists response:', response.data);\n    return response.data.exists;\n  },\n  joinGame: async (gameId, playerName) => {\n    console.log('Joining game:', {\n      gameId,\n      playerName\n    });\n    const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n      params: {\n        player_name: playerName\n      }\n    });\n    console.log('Join game response:', response.data);\n    return response.data.player_id;\n  },\n  startGame: async gameId => {\n    console.log('Starting game:', gameId);\n    await axios.post(`${API_URL}/games/${gameId}/start`);\n    console.log('Game started');\n  },\n  getGameState: async gameId => {\n    console.log('Getting game state:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}`);\n    console.log('Game state:', response.data);\n    return response.data;\n  },\n  flipCoin: async (gameId, taskId) => {\n    console.log('Flipping coin:', {\n      gameId,\n      taskId\n    });\n    await axios.post(`${API_URL}/games/${gameId}/flip`, null, {\n      params: {\n        task_id: taskId\n      }\n    });\n    console.log('Coin flipped');\n  },\n  updateGame: async (gameId, updatedGame) => {\n    const response = await axios.put(`${API_URL}/games/${gameId}`, updatedGame);\n    return response.data;\n  }\n};\nexport { gameService };\nexport class WebSocketService {\n  constructor(gameId, playerId, onGameUpdate) {\n    this.ws = null;\n    this.gameId = void 0;\n    this.playerId = void 0;\n    this.onGameUpdate = void 0;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.gameId = gameId;\n    this.playerId = playerId;\n    this.onGameUpdate = onGameUpdate;\n    console.log('WebSocket service initialized:', {\n      gameId,\n      playerId\n    });\n  }\n  connect() {\n    console.log('Connecting WebSocket...');\n    this.ws = new WebSocket(`${WS_URL}/ws/${this.playerId}`);\n    this.ws.onmessage = event => {\n      const message = JSON.parse(event.data);\n      console.log('WebSocket message received:', message);\n      if (message.type === 'game_update' || message.type === 'game_started') {\n        console.log('Updating game state:', message.data);\n        this.onGameUpdate(message.data);\n      }\n    };\n    this.ws.onopen = () => {\n      console.log('WebSocket connection opened');\n      this.reconnectAttempts = 0;\n      // Request initial game state\n      this.getGameState();\n    };\n    this.ws.onclose = () => {\n      console.log('WebSocket connection closed');\n      this.handleReconnect();\n    };\n    this.ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  async getGameState() {\n    try {\n      const gameState = await gameService.getGameState(this.gameId);\n      this.onGameUpdate(gameState);\n    } catch (error) {\n      console.error('Error getting game state:', error);\n    }\n  }\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      setTimeout(() => this.connect(), 1000 * this.reconnectAttempts);\n    }\n  }\n  completeTask(taskId) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      const message = {\n        type: 'complete_task',\n        game_id: this.gameId,\n        task_id: taskId\n      };\n      console.log('Sending complete task message:', message);\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket not connected');\n      // Try to reconnect and queue the message\n      this.connect();\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      console.log('Disconnecting WebSocket');\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}","map":{"version":3,"names":["axios","API_URL","WS_URL","gameService","createGame","playerCount","maxBatches","tasksPerBatch","console","log","response","post","params","player_count","max_batches","tasks_per_batch","data","game_id","checkGameExists","gameId","get","exists","joinGame","playerName","player_name","player_id","startGame","getGameState","flipCoin","taskId","task_id","updateGame","updatedGame","put","WebSocketService","constructor","playerId","onGameUpdate","ws","reconnectAttempts","maxReconnectAttempts","connect","WebSocket","onmessage","event","message","JSON","parse","type","onopen","onclose","handleReconnect","onerror","error","gameState","setTimeout","completeTask","readyState","OPEN","send","stringify","disconnect","close"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game 2/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\n\ninterface GameService {\n    createGame: (playerCount: number, maxBatches: number, tasksPerBatch: number) => Promise<string>;\n    checkGameExists: (gameId: string) => Promise<boolean>;\n    joinGame: (gameId: string, playerName: string) => Promise<string>;\n    startGame: (gameId: string) => Promise<void>;\n    getGameState: (gameId: string) => Promise<Game>;\n    flipCoin: (gameId: string, taskId: string) => Promise<void>;\n    updateGame: (gameId: string, updatedGame: Game) => Promise<Game>;\n}\n\nconst gameService: GameService = {\n    createGame: async (playerCount: number, maxBatches: number, tasksPerBatch: number): Promise<string> => {\n        console.log('Creating game with params:', { playerCount, maxBatches, tasksPerBatch });\n        const response = await axios.post(`${API_URL}/games/create`, null, {\n            params: { player_count: playerCount, max_batches: maxBatches, tasks_per_batch: tasksPerBatch }\n        });\n        console.log('Game created:', response.data);\n        return response.data.game_id;\n    },\n\n    checkGameExists: async (gameId: string): Promise<boolean> => {\n        console.log('Checking if game exists:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n        console.log('Game exists response:', response.data);\n        return response.data.exists;\n    },\n\n    joinGame: async (gameId: string, playerName: string): Promise<string> => {\n        console.log('Joining game:', { gameId, playerName });\n        const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n            params: { player_name: playerName }\n        });\n        console.log('Join game response:', response.data);\n        return response.data.player_id;\n    },\n\n    startGame: async (gameId: string): Promise<void> => {\n        console.log('Starting game:', gameId);\n        await axios.post(`${API_URL}/games/${gameId}/start`);\n        console.log('Game started');\n    },\n\n    getGameState: async (gameId: string): Promise<Game> => {\n        console.log('Getting game state:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}`);\n        console.log('Game state:', response.data);\n        return response.data;\n    },\n\n    flipCoin: async (gameId: string, taskId: string): Promise<void> => {\n        console.log('Flipping coin:', { gameId, taskId });\n        await axios.post(`${API_URL}/games/${gameId}/flip`, null, {\n            params: { task_id: taskId }\n        });\n        console.log('Coin flipped');\n    },\n\n    updateGame: async (gameId: string, updatedGame: Game): Promise<Game> => {\n        const response = await axios.put(`${API_URL}/games/${gameId}`, updatedGame);\n        return response.data;\n    }\n};\n\nexport { gameService };\n\nexport class WebSocketService {\n    private ws: WebSocket | null = null;\n    private gameId: string;\n    private playerId: string;\n    private onGameUpdate: (game: Game) => void;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = 5;\n\n    constructor(gameId: string, playerId: string, onGameUpdate: (game: Game) => void) {\n        this.gameId = gameId;\n        this.playerId = playerId;\n        this.onGameUpdate = onGameUpdate;\n        console.log('WebSocket service initialized:', { gameId, playerId });\n    }\n\n    connect() {\n        console.log('Connecting WebSocket...');\n        this.ws = new WebSocket(`${WS_URL}/ws/${this.playerId}`);\n        \n        this.ws.onmessage = (event) => {\n            const message = JSON.parse(event.data);\n            console.log('WebSocket message received:', message);\n            \n            if (message.type === 'game_update' || message.type === 'game_started') {\n                console.log('Updating game state:', message.data);\n                this.onGameUpdate(message.data);\n            }\n        };\n\n        this.ws.onopen = () => {\n            console.log('WebSocket connection opened');\n            this.reconnectAttempts = 0;\n            // Request initial game state\n            this.getGameState();\n        };\n\n        this.ws.onclose = () => {\n            console.log('WebSocket connection closed');\n            this.handleReconnect();\n        };\n\n        this.ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n    }\n\n    private async getGameState() {\n        try {\n            const gameState = await gameService.getGameState(this.gameId);\n            this.onGameUpdate(gameState);\n        } catch (error) {\n            console.error('Error getting game state:', error);\n        }\n    }\n\n    private handleReconnect() {\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.reconnectAttempts++;\n            console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n            setTimeout(() => this.connect(), 1000 * this.reconnectAttempts);\n        }\n    }\n\n    completeTask(taskId: string) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            const message = {\n                type: 'complete_task',\n                game_id: this.gameId,\n                task_id: taskId\n            };\n            console.log('Sending complete task message:', message);\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.error('WebSocket not connected');\n            // Try to reconnect and queue the message\n            this.connect();\n        }\n    }\n\n    disconnect() {\n        if (this.ws) {\n            console.log('Disconnecting WebSocket');\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}