{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\nexport const gameService = {\n  createGame: async (playerCount, maxBatches, tasksPerBatch) => {\n    console.log('Creating game with params:', {\n      playerCount,\n      maxBatches,\n      tasksPerBatch\n    });\n    const response = await axios.post(`${API_URL}/games/create`, null, {\n      params: {\n        player_count: playerCount,\n        max_batches: maxBatches,\n        tasks_per_batch: tasksPerBatch\n      }\n    });\n    console.log('Game created:', response.data);\n    return response.data.game_id;\n  },\n  checkGameExists: async gameId => {\n    console.log('Checking if game exists:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n    console.log('Game exists response:', response.data);\n    return response.data.exists;\n  },\n  joinGame: async (gameId, playerName) => {\n    console.log('Joining game:', {\n      gameId,\n      playerName\n    });\n    const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n      params: {\n        player_name: playerName\n      }\n    });\n    console.log('Join game response:', response.data);\n    return response.data.player_id;\n  },\n  startGame: async gameId => {\n    console.log('Starting game:', gameId);\n    await axios.post(`${API_URL}/games/${gameId}/start`);\n    console.log('Game started');\n  },\n  getGameState: async gameId => {\n    console.log('Getting game state:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}`);\n    console.log('Game state:', response.data);\n    return response.data;\n  },\n  flipCoin: async (gameId, taskId) => {\n    console.log('Flipping coin:', {\n      gameId,\n      taskId\n    });\n    await axios.post(`${API_URL}/games/${gameId}/flip/${taskId}`);\n    console.log('Coin flipped');\n  }\n};\nexport class WebSocketService {\n  constructor(gameId, playerId, onGameUpdate) {\n    this.ws = null;\n    this.gameId = void 0;\n    this.playerId = void 0;\n    this.onGameUpdate = void 0;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.messageQueue = [];\n    this.gameId = gameId;\n    this.playerId = playerId;\n    this.onGameUpdate = onGameUpdate;\n    console.log('WebSocket service initialized:', {\n      gameId,\n      playerId\n    });\n  }\n  setGameUpdateCallback(callback) {\n    this.onGameUpdate = callback;\n  }\n  connect() {\n    console.log('Connecting WebSocket...');\n    this.ws = new WebSocket(`${WS_URL}/ws/${this.playerId}`);\n    this.ws.onmessage = event => {\n      const message = JSON.parse(event.data);\n      console.log('WebSocket message received:', message);\n      switch (message.type) {\n        case 'game_update':\n        case 'game_started':\n        case 'task_completed':\n        case 'batch_passed':\n          console.log('Updating game state:', message.data);\n          this.onGameUpdate(message.data);\n          break;\n        case 'coin_flipped':\n          console.log('Coin flip state update:', message.data);\n          this.onGameUpdate({\n            ...message.data,\n            coin_flip_animation: {\n              task_id: message.data.task_id,\n              player_id: message.data.player_id,\n              timestamp: message.data.timestamp\n            }\n          });\n          break;\n        default:\n          console.log('Unknown message type:', message.type);\n      }\n    };\n    this.ws.onopen = () => {\n      console.log('WebSocket connection opened');\n      this.reconnectAttempts = 0;\n      this.processMessageQueue();\n      this.getGameState();\n    };\n    this.ws.onclose = () => {\n      console.log('WebSocket connection closed');\n      this.handleReconnect();\n    };\n    this.ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  processMessageQueue() {\n    while (this.messageQueue.length > 0 && ((_this$ws = this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.readyState) === WebSocket.OPEN) {\n      var _this$ws;\n      const message = this.messageQueue.shift();\n      if (message) {\n        console.log('Sending queued message:', message);\n        this.ws.send(JSON.stringify(message));\n      }\n    }\n  }\n  queueMessage(message) {\n    var _this$ws2;\n    this.messageQueue.push(message);\n    if (((_this$ws2 = this.ws) === null || _this$ws2 === void 0 ? void 0 : _this$ws2.readyState) === WebSocket.OPEN) {\n      this.processMessageQueue();\n    } else {\n      this.connect();\n    }\n  }\n  async getGameState() {\n    try {\n      const gameState = await gameService.getGameState(this.gameId);\n      this.onGameUpdate(gameState);\n    } catch (error) {\n      console.error('Error getting game state:', error);\n    }\n  }\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      setTimeout(() => this.connect(), 1000 * this.reconnectAttempts);\n    }\n  }\n  completeTask(taskId) {\n    var _this$ws3;\n    const message = {\n      type: 'complete_task',\n      game_id: this.gameId,\n      task_id: taskId,\n      player_id: this.playerId,\n      timestamp: Date.now()\n    };\n    if (((_this$ws3 = this.ws) === null || _this$ws3 === void 0 ? void 0 : _this$ws3.readyState) === WebSocket.OPEN) {\n      console.log('Sending complete task message:', message);\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.log('Queuing complete task message:', message);\n      this.queueMessage(message);\n    }\n  }\n  flipCoin(taskId) {\n    var _this$ws4;\n    const message = {\n      type: 'flip_coin',\n      game_id: this.gameId,\n      task_id: taskId,\n      player_id: this.playerId,\n      timestamp: Date.now()\n    };\n    if (((_this$ws4 = this.ws) === null || _this$ws4 === void 0 ? void 0 : _this$ws4.readyState) === WebSocket.OPEN) {\n      console.log('Sending flip coin message:', message);\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.log('Queuing flip coin message:', message);\n      this.queueMessage(message);\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      console.log('Disconnecting WebSocket');\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}","map":{"version":3,"names":["axios","API_URL","WS_URL","gameService","createGame","playerCount","maxBatches","tasksPerBatch","console","log","response","post","params","player_count","max_batches","tasks_per_batch","data","game_id","checkGameExists","gameId","get","exists","joinGame","playerName","player_name","player_id","startGame","getGameState","flipCoin","taskId","WebSocketService","constructor","playerId","onGameUpdate","ws","reconnectAttempts","maxReconnectAttempts","messageQueue","setGameUpdateCallback","callback","connect","WebSocket","onmessage","event","message","JSON","parse","type","coin_flip_animation","task_id","timestamp","onopen","processMessageQueue","onclose","handleReconnect","onerror","error","length","_this$ws","readyState","OPEN","shift","send","stringify","queueMessage","_this$ws2","push","gameState","setTimeout","completeTask","_this$ws3","Date","now","_this$ws4","disconnect","close"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\n const API_URL = 'http://172.20.10.4:8000';\n const WS_URL = 'ws://172.20.10.4:8000';\n\nexport const gameService = {\n    createGame: async (playerCount: number, maxBatches: number, tasksPerBatch: number): Promise<string> => {\n        console.log('Creating game with params:', { playerCount, maxBatches, tasksPerBatch });\n        const response = await axios.post(`${API_URL}/games/create`, null, {\n            params: { player_count: playerCount, max_batches: maxBatches, tasks_per_batch: tasksPerBatch }\n        });\n        console.log('Game created:', response.data);\n        return response.data.game_id;\n    },\n\n    checkGameExists: async (gameId: string): Promise<boolean> => {\n        console.log('Checking if game exists:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n        console.log('Game exists response:', response.data);\n        return response.data.exists;\n    },\n\n    joinGame: async (gameId: string, playerName: string): Promise<string> => {\n        console.log('Joining game:', { gameId, playerName });\n        const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n            params: { player_name: playerName }\n        });\n        console.log('Join game response:', response.data);\n        return response.data.player_id;\n    },\n\n    startGame: async (gameId: string): Promise<void> => {\n        console.log('Starting game:', gameId);\n        await axios.post(`${API_URL}/games/${gameId}/start`);\n        console.log('Game started');\n    },\n\n    getGameState: async (gameId: string): Promise<Game> => {\n        console.log('Getting game state:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}`);\n        console.log('Game state:', response.data);\n        return response.data;\n    },\n\n    flipCoin: async (gameId: string, taskId: string): Promise<void> => {\n        console.log('Flipping coin:', { gameId, taskId });\n        await axios.post(`${API_URL}/games/${gameId}/flip/${taskId}`);\n        console.log('Coin flipped');\n    },\n};\n\nexport class WebSocketService {\n    private ws: WebSocket | null = null;\n    private gameId: string;\n    private playerId: string;\n    private onGameUpdate: (game: Game) => void;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = 5;\n    private messageQueue: any[] = [];\n\n    constructor(gameId: string, playerId: string, onGameUpdate: (game: Game) => void) {\n        this.gameId = gameId;\n        this.playerId = playerId;\n        this.onGameUpdate = onGameUpdate;\n        console.log('WebSocket service initialized:', { gameId, playerId });\n    }\n\n    public setGameUpdateCallback(callback: (game: Game) => void) {\n        this.onGameUpdate = callback;\n    }\n\n    connect() {\n        console.log('Connecting WebSocket...');\n        this.ws = new WebSocket(`${WS_URL}/ws/${this.playerId}`);\n        \n        this.ws.onmessage = (event) => {\n            const message = JSON.parse(event.data);\n            console.log('WebSocket message received:', message);\n            \n            switch (message.type) {\n                case 'game_update':\n                case 'game_started':\n                case 'task_completed':\n                case 'batch_passed':\n                    console.log('Updating game state:', message.data);\n                    this.onGameUpdate(message.data);\n                    break;\n                case 'coin_flipped':\n                    console.log('Coin flip state update:', message.data);\n                    this.onGameUpdate({\n                        ...message.data,\n                        coin_flip_animation: {\n                            task_id: message.data.task_id,\n                            player_id: message.data.player_id,\n                            timestamp: message.data.timestamp\n                        }\n                    });\n                    break;\n                default:\n                    console.log('Unknown message type:', message.type);\n            }\n        };\n\n        this.ws.onopen = () => {\n            console.log('WebSocket connection opened');\n            this.reconnectAttempts = 0;\n            this.processMessageQueue();\n            this.getGameState();\n        };\n\n        this.ws.onclose = () => {\n            console.log('WebSocket connection closed');\n            this.handleReconnect();\n        };\n\n        this.ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n    }\n\n    private processMessageQueue() {\n        while (this.messageQueue.length > 0 && this.ws?.readyState === WebSocket.OPEN) {\n            const message = this.messageQueue.shift();\n            if (message) {\n                console.log('Sending queued message:', message);\n                this.ws.send(JSON.stringify(message));\n            }\n        }\n    }\n\n    private queueMessage(message: any) {\n        this.messageQueue.push(message);\n        if (this.ws?.readyState === WebSocket.OPEN) {\n            this.processMessageQueue();\n        } else {\n            this.connect();\n        }\n    }\n\n    private async getGameState() {\n        try {\n            const gameState = await gameService.getGameState(this.gameId);\n            this.onGameUpdate(gameState);\n        } catch (error) {\n            console.error('Error getting game state:', error);\n        }\n    }\n\n    private handleReconnect() {\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.reconnectAttempts++;\n            console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n            setTimeout(() => this.connect(), 1000 * this.reconnectAttempts);\n        }\n    }\n\n    completeTask(taskId: string) {\n        const message = {\n            type: 'complete_task',\n            game_id: this.gameId,\n            task_id: taskId,\n            player_id: this.playerId,\n            timestamp: Date.now()\n        };\n\n        if (this.ws?.readyState === WebSocket.OPEN) {\n            console.log('Sending complete task message:', message);\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.log('Queuing complete task message:', message);\n            this.queueMessage(message);\n        }\n    }\n\n    flipCoin(taskId: string) {\n        const message = {\n            type: 'flip_coin',\n            game_id: this.gameId,\n            task_id: taskId,\n            player_id: this.playerId,\n            timestamp: Date.now()\n        };\n        \n        if (this.ws?.readyState === WebSocket.OPEN) {\n            console.log('Sending flip coin message:', message);\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.log('Queuing flip coin message:', message);\n            this.queueMessage(message);\n        }\n    }\n\n    disconnect() {\n        if (this.ws) {\n            console.log('Disconnecting WebSocket');\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}