{"ast":null,"code":"import _objectSpread from\"/Users/huanghao/Desktop/online multiplayer coin game/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import{Box,Button,Card,CardContent,Typography,Grid,TextField,Dialog,DialogTitle,DialogContent,DialogActions,Tabs,Tab,Alert,Chip,Stack,TableContainer,Table,TableHead,TableBody,TableCell,TableRow,Paper,Container,CircularProgress,IconButton,List,ListItem,ListItemText}from'@mui/material';import{TaskStatus,PlayerStatus,TaskType}from'../types';import{gameService,WebSocketService}from'../services/gameService';import HelpIcon from'@mui/icons-material/Help';// 添加类型定义\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export const Game=_ref=>{let{gameId:initialGameId}=_ref;const[gameId,setGameId]=useState(initialGameId);const[game,setGame]=useState(null);const[playerName,setPlayerName]=useState('');const[playerId,setPlayerId]=useState(null);const[wsService,setWsService]=useState(null);const[showJoinDialog,setShowJoinDialog]=useState(!initialGameId);const[playerCount,setPlayerCount]=useState(2);const[maxBatches,setMaxBatches]=useState(3);const[coinsPerBatch,setCoinsPerBatch]=useState(20);const[joinGameId,setJoinGameId]=useState('');const[error,setError]=useState(null);const[activeTab,setActiveTab]=useState(0);const[startTime,setStartTime]=useState(null);const[endTime,setEndTime]=useState(null);const[showCompletionDialog,setShowCompletionDialog]=useState(false);const[currentTime,setCurrentTime]=useState(0);const[showResultPage,setShowResultPage]=useState(false);const[batchCompletionTimes,setBatchCompletionTimes]=useState({});const[batchStartTimes,setBatchStartTimes]=useState({});const[batchFlipStates,setBatchFlipStates]=useState({});const[flipCoins,setFlipCoins]=useState([]);const syncFlippedCoins=taskId=>{if(!flipCoins.includes(taskId)){setFlipCoins(prev=>[...prev,taskId]);}};// 修改翻转状态的类型定义，加入玩家ID\nconst[flippedCoins,setFlippedCoins]=useState({});const[pendingBatchCompletion,setPendingBatchCompletion]=useState({});// 添加翻转动画状态\nconst[flipStates,setFlipStates]=useState({});// 添加翻转动画状态\nconst[flippingCoins,setFlippingCoins]=useState({});// 修改计时器状态和开始时间状态\nconst[elapsedTime,setElapsedTime]=useState(0);// 添加批次统计时间的状态\nconst[batchStats,setBatchStats]=useState({});// 添加当前子批次的useEffect\nconst[currentSubBatch,setCurrentSubBatch]=useState(0);// 添加已完成子批次的状态\nconst[completedSubBatches,setCompletedSubBatches]=useState(new Set());// 添加永久翻转状态的记录\nconst[permanentFlippedCoins,setPermanentFlippedCoins]=useState({});const[showHelpDialog,setShowHelpDialog]=useState(false);// 添加一个新的state来跟踪每个批次的累计时间\nconst[batchElapsedTimes,setBatchElapsedTimes]=useState({});useEffect(()=>{if(gameId&&playerId){const service=new WebSocketService(gameId,playerId,updatedGame=>{console.log('Game state updated:',updatedGame);setGame(updatedGame);},syncFlippedCoins);service.connect();setWsService(service);// Cleanup function\nreturn()=>{service.disconnect();};}},[gameId,playerId]);useEffect(()=>{if((game===null||game===void 0?void 0:game.status)==='in_progress'&&!startTime){setStartTime(Date.now());}},[game===null||game===void 0?void 0:game.status,startTime]);useEffect(()=>{let timerInterval=null;if((game===null||game===void 0?void 0:game.status)==='in_progress'&&playerId){const currentPlayer=game.players.find(p=>p.id===playerId);if((currentPlayer===null||currentPlayer===void 0?void 0:currentPlayer.status)===PlayerStatus.ACTIVE){var _batchStartTimes$curr;const currentBatch=currentPlayer.current_batch;const currentTime=Date.now();// 确保有开始时间\nif(!((_batchStartTimes$curr=batchStartTimes[currentBatch])!==null&&_batchStartTimes$curr!==void 0&&_batchStartTimes$curr[currentBatch])){setBatchStartTimes(prev=>_objectSpread(_objectSpread({},prev),{},{[currentBatch]:_objectSpread(_objectSpread({},prev[currentBatch]||{}),{},{[currentBatch]:currentTime})}));}timerInterval=setInterval(()=>{const batchStartTime=(batchStartTimes[currentBatch]||{})[currentBatch];if(batchStartTime){const previousTime=(batchElapsedTimes[currentBatch]||{})[playerId]||0;const newElapsed=Date.now()-batchStartTime+previousTime;setCurrentTime(newElapsed);}},1000);}}if((game===null||game===void 0?void 0:game.status)==='completed'&&startTime&&!endTime){setEndTime(Date.now());setShowResultPage(true);if(timerInterval){clearInterval(timerInterval);}}return()=>{if(timerInterval){clearInterval(timerInterval);}};},[game===null||game===void 0?void 0:game.status,game===null||game===void 0?void 0:game.players,playerId,batchStartTimes,batchElapsedTimes]);useEffect(()=>{let intervalId;if(startTime&&(game===null||game===void 0?void 0:game.status)==='in_progress'){intervalId=setInterval(()=>{setElapsedTime(prev=>Date.now()-startTime);},1000);}return()=>{if(intervalId){clearInterval(intervalId);}};},[startTime,game===null||game===void 0?void 0:game.status]);useEffect(()=>{if(game!==null&&game!==void 0&&game.tasks&&game.players){const newStartTimes=_objectSpread({},batchStartTimes);const newCompletionTimes=_objectSpread({},batchCompletionTimes);let hasChanges=false;game.players.forEach(player=>{var _newCompletionTimes$p;// 获取玩家当前批次的所有任务\nconst currentBatchTasks=game.tasks.filter(t=>t.batch_number===player.current_batch&&t.assigned_to===player.id);// 检查是否有新的子批次任务（所有任务都是PENDING状态）\nif(currentBatchTasks.length>0&&currentBatchTasks.every(t=>t.status===TaskStatus.PENDING)){const currentTime=Date.now();if(!newStartTimes[player.current_batch]){newStartTimes[player.current_batch]={};}// 更新开始时间，确保计时器继续\nnewStartTimes[player.current_batch][player.current_batch]=currentTime;hasChanges=true;// 更新全局startTime\nsetStartTime(currentTime);}// 处理批次完成时间\nif(currentBatchTasks.length>0&&currentBatchTasks.every(t=>t.status===TaskStatus.COMPLETED)&&!((_newCompletionTimes$p=newCompletionTimes[player.current_batch])!==null&&_newCompletionTimes$p!==void 0&&_newCompletionTimes$p[player.id])){var _newStartTimes$player;if(!newCompletionTimes[player.current_batch]){newCompletionTimes[player.current_batch]={};}const batchStartTime=(_newStartTimes$player=newStartTimes[player.current_batch])===null||_newStartTimes$player===void 0?void 0:_newStartTimes$player[player.current_batch];if(batchStartTime){newCompletionTimes[player.current_batch][player.id]=Date.now()-batchStartTime;hasChanges=true;}}});if(hasChanges){setBatchStartTimes(newStartTimes);setBatchCompletionTimes(newCompletionTimes);}}},[game===null||game===void 0?void 0:game.tasks,game===null||game===void 0?void 0:game.players]);// 添加一个新的useEffect来监听游戏状态变化\nuseEffect(()=>{if((game===null||game===void 0?void 0:game.status)==='in_progress'&&playerId){const currentPlayer=game.players.find(p=>p.id===playerId);if(currentPlayer){const currentBatchTasks=game.tasks.filter(t=>t.batch_number===currentPlayer.current_batch&&t.assigned_to===playerId);// 如果玩家有新的PENDING任务，确保计时器在运行\nif(currentBatchTasks.length>0&&currentBatchTasks.every(t=>t.status===TaskStatus.PENDING)){const currentTime=Date.now();setStartTime(currentTime);}}}},[game===null||game===void 0?void 0:game.status,game===null||game===void 0?void 0:game.tasks,game===null||game===void 0?void 0:game.players,playerId]);useEffect(()=>{if(game!==null&&game!==void 0&&game.tasks){let shouldUpdate=false;const newFlippedCoins=_objectSpread({},flippedCoins);// 检查是否有新的批次开始\ngame.players.forEach(player=>{const playerTasks=game.tasks.filter(t=>t.assigned_to===player.id);const currentBatchTasks=playerTasks.filter(t=>t.batch_number===player.current_batch);// 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\nif(currentBatchTasks.length>0&&currentBatchTasks.every(t=>t.status===TaskStatus.PENDING)){// 清理上一个批次的翻转状态\nconst prevBatchTasks=playerTasks.filter(t=>t.batch_number===player.current_batch-1);const prevBatchTaskIds=prevBatchTasks.map(t=>t.id);if(newFlippedCoins[player.id]){newFlippedCoins[player.id]=newFlippedCoins[player.id].filter(id=>!prevBatchTaskIds.includes(id));shouldUpdate=true;}}});// 只在有变化时更新状态\nif(shouldUpdate){setFlippedCoins(newFlippedCoins);}}},[game===null||game===void 0?void 0:game.tasks]);// 修改游戏状态更新的effect，确保永久翻转的硬币不会被重置\nuseEffect(()=>{if(game!==null&&game!==void 0&&game.tasks&&playerId){const currentPlayer=game.players.find(p=>p.id===playerId);if(!currentPlayer)return;const playerTasks=game.tasks.filter(t=>t.assigned_to===playerId);const currentBatchTasks=playerTasks.filter(t=>t.batch_number===currentPlayer.current_batch);const shouldUpdateFlips=currentBatchTasks.some(t=>t.status===TaskStatus.COMPLETED)||currentBatchTasks.every(t=>t.status===TaskStatus.PENDING);if(shouldUpdateFlips){setFlippedCoins(prev=>{const otherPlayersStates=_objectSpread({},prev);const permanentFlips=permanentFlippedCoins[playerId]||[];const completedTaskIds=playerTasks.filter(t=>t.status===TaskStatus.COMPLETED).map(t=>t.id);// 使用Array.from替代Set的扩展运算符\nconst allFlippedCoins=Array.from(new Set([...permanentFlips,...completedTaskIds]));return _objectSpread(_objectSpread({},otherPlayersStates),{},{[playerId]:allFlippedCoins});});}}},[game===null||game===void 0?void 0:game.tasks,playerId,permanentFlippedCoins]);// 修改handleCoinFlip函数，记录永久翻转状态\nconst handleCoinFlip=taskId=>{if(!playerId)return;// 立即更新当前玩家的翻转状态\nsetFlippedCoins(prev=>{const currentPlayerFlips=prev[playerId]||[];if(!currentPlayerFlips.includes(taskId)){// 同时更新永久翻转状态\nsetPermanentFlippedCoins(prevPermanent=>_objectSpread(_objectSpread({},prevPermanent),{},{[playerId]:[...(prevPermanent[playerId]||[]),taskId]}));return _objectSpread(_objectSpread({},prev),{},{[playerId]:[...currentPlayerFlips,taskId]});}return prev;});gameService.syncFlipCoin(gameId||'',taskId);// 设置翻转动画\nsetFlippingCoins(prev=>_objectSpread(_objectSpread({},prev),{},{[taskId]:{isFlipping:true}}));setTimeout(()=>{setFlippingCoins(prev=>_objectSpread(_objectSpread({},prev),{},{[taskId]:{isFlipping:false}}));},500);};// 处理批次完成\nconst handleCompleteBatch=batchNum=>{const pendingTasks=pendingBatchCompletion[batchNum]||[];if(pendingTasks.length===0)return;// 发送所有任务完成的请求\npendingTasks.forEach(taskId=>{if(wsService){wsService.completeTask(taskId);}});// 清理这个批次的待完成状态\nsetPendingBatchCompletion(prev=>{const newState=_objectSpread({},prev);delete newState[batchNum];return newState;});};// 修改渲染硬币的函数\nconst renderCoin=function(type,isFlipping){let isSmall=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let onClick=arguments.length>3?arguments[3]:undefined;let taskId=arguments.length>4?arguments[4]:undefined;if(!taskId)return null;const flipState=taskId?flippingCoins[taskId]:undefined;const isFlipped=taskId&&playerId&&flippedCoins[playerId]?flippedCoins[playerId].includes(taskId):false;// 决定显示哪一面\nlet displayType=isFlipped?type===TaskType.HEADS?TaskType.TAILS:TaskType.HEADS:type;if(flipCoins.includes(taskId))displayType=TaskType.HEADS;else displayType=TaskType.TAILS;return/*#__PURE__*/_jsx(Box,{sx:{width:isSmall?20:32,height:isSmall?20:32,borderRadius:'50%',backgroundColor:displayType===TaskType.HEADS?'#FFD700':'#DAA520',border:\"\".concat(isSmall?1:2,\"px solid #B8860B\"),color:'#704214',display:'flex',alignItems:'center',justifyContent:'center',fontWeight:'bold',fontSize:isSmall?'0.6rem':'0.8rem',perspective:1000,mb:isSmall?0:1,position:'relative',cursor:onClick?'pointer':'default',transition:'transform 0.6s',transformStyle:'preserve-3d',transform:flipState!==null&&flipState!==void 0&&flipState.isFlipping?'rotateY(360deg)':'rotateY(0deg)','&:hover':onClick?{transform:'scale(1.05)',boxShadow:'0 2px 4px rgba(0,0,0,0.2)'}:{},'&:active':onClick?{transform:'scale(0.95)'}:{},'&::after':{content:'\"\"',position:'absolute',top:0,left:0,right:0,bottom:0,borderRadius:'50%',background:'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',pointerEvents:'none'}},onClick:onClick,children:displayType===TaskType.HEADS?'H':'T'});};// 监听游戏状态变化\nuseEffect(()=>{if(game!==null&&game!==void 0&&game.tasks&&playerId){const currentPlayer=game.players.find(p=>p.id===playerId);if(!currentPlayer)return;const playerTasks=game.tasks.filter(t=>t.assigned_to===playerId);const currentBatchTasks=playerTasks.filter(t=>t.batch_number===currentPlayer.current_batch);// 只有当前玩家的新批次开始时才清理状态\nif(currentBatchTasks.length>0&&currentBatchTasks.every(t=>t.status===TaskStatus.PENDING)){// 清理当前玩家上一个批次的翻转状态\nconst prevBatchTasks=playerTasks.filter(t=>t.batch_number===currentPlayer.current_batch-1);const prevBatchTaskIds=prevBatchTasks.map(t=>t.id);setFlippedCoins(prev=>{var _prev$playerId;return _objectSpread(_objectSpread({},prev),{},{[playerId]:((_prev$playerId=prev[playerId])===null||_prev$playerId===void 0?void 0:_prev$playerId.filter(id=>!prevBatchTaskIds.includes(id)))||[]});});}}},[game===null||game===void 0?void 0:game.tasks,playerId]);// 检查当前批次是否可以执行\nconst canExecuteBatch=(batchNum,subBatchIndex)=>{if(!game||!playerId)return false;// 获取当前玩家的所有任务\nconst playerTasks=game.tasks.filter(t=>t.assigned_to===playerId);// 获取所有之前的子批次\nconst previousSubBatches=playerTasks.filter(t=>t.batch_number<batchNum||t.batch_number===batchNum&&t.sub_batch_number<subBatchIndex);// 如果还有之前的子批次未完成，则不能执行当前批次\nreturn!previousSubBatches.some(t=>t.status!==TaskStatus.COMPLETED);};// 修改renderTaskRow函数中的按钮显示逻辑\nconst renderTaskRow=(tasks,batchNum,playerStatus)=>{if(playerStatus===PlayerStatus.WAITING){return/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",children:\"Waiting for your turn...\"});}const structure=getBatchStructure(batchNum);const currentPlayer=game===null||game===void 0?void 0:game.players.find(p=>p.id===playerId);return/*#__PURE__*/_jsx(Box,{children:structure.map(_ref2=>{var _subBatchTasks$;let{subBatchIndex,coinsCount}=_ref2;const subBatchTasks=tasks.filter(t=>t.sub_batch_number===subBatchIndex);if(subBatchTasks.length===0)return null;const currentBatchTarget=((_subBatchTasks$=subBatchTasks[0])===null||_subBatchTasks$===void 0?void 0:_subBatchTasks$.type)||TaskType.HEADS;const flippedCount=playerId&&flippedCoins[playerId]?subBatchTasks.filter(t=>flippedCoins[playerId].includes(t.id)).length:0;const isComplete=isSubBatchComplete(batchNum,subBatchIndex,(currentPlayer===null||currentPlayer===void 0?void 0:currentPlayer.id)||'');const canExecute=canExecuteBatch(batchNum,subBatchIndex);// 检查是否是当前活动的子批次\nconst isActiveSubBatch=(currentPlayer===null||currentPlayer===void 0?void 0:currentPlayer.status)===PlayerStatus.ACTIVE&&canExecute&&!isComplete;// 检查子批次是否已经完成并提交\nconst isSubmitted=subBatchTasks.every(t=>t.status===TaskStatus.COMPLETED);// 使用包含玩家ID的buttonKey确保按钮状态的独立性\nconst buttonKey=\"\".concat(playerId,\"-\").concat(batchNum,\"-\").concat(subBatchIndex);const isButtonDisabled=completedSubBatches.has(buttonKey);return/*#__PURE__*/_jsxs(Box,{sx:{mb:2},children:[/*#__PURE__*/_jsx(Box,{sx:{display:'flex',alignItems:'center',mb:1},children:isComplete&&(currentPlayer===null||currentPlayer===void 0?void 0:currentPlayer.status)===PlayerStatus.ACTIVE&&!isSubmitted&&!isButtonDisabled&&/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",size:\"small\",onClick:()=>handleCompleteSubBatch(batchNum,subBatchIndex),disabled:!canExecute,children:\"Complete this batch\"})}),/*#__PURE__*/_jsx(Box,{sx:{display:'flex',flexWrap:'wrap',gap:1,opacity:isActiveSubBatch?1:0.5,pointerEvents:isActiveSubBatch?'auto':'none'},children:subBatchTasks.map(task=>{var _flippingCoins$task$i;return/*#__PURE__*/_jsx(Box,{children:renderCoin(task.type,((_flippingCoins$task$i=flippingCoins[task.id])===null||_flippingCoins$task$i===void 0?void 0:_flippingCoins$task$i.isFlipping)||false,false,isActiveSubBatch?()=>handleCoinFlip(task.id):undefined,task.id)},task.id);})})]},buttonKey);})});};// 渲染玩家卡片\nconst renderPlayer=player=>{var _currentBatchTasks$;const currentBatchTasks=(game===null||game===void 0?void 0:game.tasks.filter(t=>t.batch_number===player.current_batch&&t.assigned_to===player.id))||[];const currentBatchTarget=(_currentBatchTasks$=currentBatchTasks[0])===null||_currentBatchTasks$===void 0?void 0:_currentBatchTasks$.type;const requiredCoins=getRequiredCoinsForBatch(player.current_batch);const currentFlippedCount=currentBatchTasks.filter(t=>{var _flippedCoins$player$;return(_flippedCoins$player$=flippedCoins[player.id])===null||_flippedCoins$player$===void 0?void 0:_flippedCoins$player$.includes(t.id);}).length;return/*#__PURE__*/_jsx(Card,{sx:{mb:2},children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',justifyContent:'space-between',alignItems:'center',mb:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:player.name}),/*#__PURE__*/_jsx(Chip,{label:player.status,color:player.status===PlayerStatus.ACTIVE?\"success\":\"default\",size:\"small\"})]}),/*#__PURE__*/_jsxs(Box,{sx:{mb:2,bgcolor:'background.default',p:2,borderRadius:1},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"subtitle2\",sx:{mb:1},children:[\"Current Round: \",player.current_batch,\" / \",game===null||game===void 0?void 0:game.max_batches,currentBatchTarget&&player.status===PlayerStatus.ACTIVE&&/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',mt:1},children:[/*#__PURE__*/_jsx(Typography,{variant:\"body2\",sx:{mr:1},children:\"Required flips:\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",sx:{ml:2},children:requiredCoins})]})]}),/*#__PURE__*/_jsx(Box,{sx:{mb:2},children:renderTaskRow(currentBatchTasks,player.current_batch,player.status)})]})]})},player.id);};const getPlayerStatusColor=status=>{switch(status){case PlayerStatus.ACTIVE:return'success';case PlayerStatus.WAITING:return'warning';case PlayerStatus.IDLE:return'default';default:return'default';}};const getTaskStatusColor=status=>{switch(status){case TaskStatus.COMPLETED:return'#4caf50';case TaskStatus.IN_PROGRESS:return'#ff9800';case TaskStatus.PENDING:return'#9e9e9e';default:return'#9e9e9e';}};const handleTabChange=(_,newValue)=>{// Reset all fields when switching tabs\nsetActiveTab(newValue);setPlayerName('');setPlayerCount(2);setMaxBatches(3);setCoinsPerBatch(20);setJoinGameId('');setError(null);};const handleGameComplete=()=>{setEndTime(Date.now());setShowCompletionDialog(true);};// 添加一个辅助函数来处理毫秒到时间的转换\nconst formatTimeFromMs=ms=>{const totalSeconds=Math.floor(ms/1000);const minutes=Math.floor(totalSeconds/60);const seconds=totalSeconds%60;return\"\".concat(minutes,\":\").concat(seconds.toString().padStart(2,'0'));};const renderCompletionDialog=()=>{if(!startTime||!endTime)return null;const totalTime=endTime-startTime;return/*#__PURE__*/_jsxs(Dialog,{open:showCompletionDialog,onClose:()=>setShowCompletionDialog(false),PaperProps:{sx:{borderRadius:2,p:2}},children:[/*#__PURE__*/_jsx(DialogTitle,{sx:{textAlign:'center',color:'primary.main'},children:\"Game Completed!\"}),/*#__PURE__*/_jsx(DialogContent,{children:/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',flexDirection:'column',alignItems:'center',gap:2,py:2},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",children:[\"Total Time: \",formatTimeFromMs(endTime-startTime)]}),/*#__PURE__*/_jsx(Typography,{variant:\"body1\",color:\"text.secondary\",children:\"All players have successfully completed their tasks!\"})]})}),/*#__PURE__*/_jsx(DialogActions,{sx:{justifyContent:'center'},children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:()=>{setShowCompletionDialog(false);window.location.reload();// Reset the game\n},children:\"Start New Game\"})})]});};const handleCompleteGame=()=>{setShowResultPage(true);};// 修改返回主菜单的处理函数\nconst handleReturnToMainMenu=()=>{// 清除游戏状态\nsetGameId('');setGame(null);setWsService(null);setStartTime(null);setEndTime(null);// 清除输入记录\nsetPlayerName('');setPlayerCount(2);setJoinGameId('');setError(null);};const renderResultPage=()=>{if(!startTime||!endTime)return null;const totalTime=endTime-startTime;return/*#__PURE__*/_jsx(Box,{sx:{p:3,backgroundColor:'background.default',minHeight:'100vh',display:'flex',flexDirection:'column',alignItems:'center',justifyContent:'center'},children:/*#__PURE__*/_jsxs(Card,{sx:{maxWidth:600,width:'100%',p:4,textAlign:'center'},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",sx:{mb:3,color:'primary.main'},children:\"Game Complete! \\uD83C\\uDF89\"}),/*#__PURE__*/_jsxs(Typography,{variant:\"h5\",sx:{mb:4},children:[\"Total Time: \",formatTimeFromMs(totalTime)]}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:handleReturnToMainMenu,size:\"large\",children:\"Return to Main Menu\"})]})});};const renderStatistics=()=>{if(!game)return null;return/*#__PURE__*/_jsxs(Box,{sx:{p:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",sx:{mb:2,color:'primary.main'},children:\"Game Statistics\"}),Array.from({length:game.max_batches},(_,i)=>i+1).map(batchNum=>/*#__PURE__*/_jsxs(Box,{sx:{mb:3},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"subtitle1\",sx:{fontWeight:'bold',mb:1},children:[\"Round \",batchNum]}),/*#__PURE__*/_jsx(TableContainer,{component:Paper,sx:{mb:2},children:/*#__PURE__*/_jsxs(Table,{size:\"small\",children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:\"Player\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"Time\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"Status\"})]})}),/*#__PURE__*/_jsxs(TableBody,{children:[game.players.map(player=>{var _player$batch_start_t,_player$batch_complet,_player$batch_start_t2;const batchTasks=game.tasks.filter(t=>t.batch_number===batchNum&&t.assigned_to===player.id);const isCompleted=batchTasks.length>0&&batchTasks.every(t=>t.status===TaskStatus.COMPLETED);const hasStarted=((_player$batch_start_t=player.batch_start_time)===null||_player$batch_start_t===void 0?void 0:_player$batch_start_t[batchNum])!=null;const completionTime=(_player$batch_complet=player.batch_completion_time)===null||_player$batch_complet===void 0?void 0:_player$batch_complet[batchNum];const startTime=(_player$batch_start_t2=player.batch_start_time)===null||_player$batch_start_t2===void 0?void 0:_player$batch_start_t2[batchNum];// 计算当前时间（如果批次已开始但未完成）\nlet displayTime='-';if(completionTime){displayTime=formatTimeFromMs(completionTime);}else if(hasStarted&&startTime){const currentTime=Date.now()-startTime;displayTime=formatTimeFromMs(currentTime);}let status='Pending';if(isCompleted){status='Completed';}else if(hasStarted){status='In Progress';}return/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:player.name}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:displayTime}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:/*#__PURE__*/_jsx(Chip,{label:status,size:\"small\",color:isCompleted?'success':hasStarted?'primary':'default'})})]},player.id);}),/*#__PURE__*/_jsxs(TableRow,{sx:{backgroundColor:'rgba(0, 0, 0, 0.04)'},children:[/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsx(\"strong\",{children:\"Total\"})}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:/*#__PURE__*/_jsx(\"strong\",{children:formatTimeFromMs(game.players.reduce((sum,p)=>{var _p$batch_completion_t;return sum+(((_p$batch_completion_t=p.batch_completion_time)===null||_p$batch_completion_t===void 0?void 0:_p$batch_completion_t[batchNum])||0);},0))})}),/*#__PURE__*/_jsx(TableCell,{})]})]})]})})]},batchNum))]});};// 使用useMemo来记忆计算结果\nconst getTasksForBatch=React.useMemo(()=>{if(!(game!==null&&game!==void 0&&game.tasks))return{};const tasksByBatch={};game.tasks.forEach(task=>{if(!tasksByBatch[task.batch_number]){tasksByBatch[task.batch_number]=[];}tasksByBatch[task.batch_number].push(task);});return tasksByBatch;},[game===null||game===void 0?void 0:game.tasks]);// 使用useMemo来记忆玩家任务\nconst getPlayerTasks=React.useMemo(()=>{if(!(game!==null&&game!==void 0&&game.tasks)||!(game!==null&&game!==void 0&&game.players))return{};const playerTasks={};game.players.forEach(player=>{playerTasks[player.id]=game.tasks.filter(t=>t.assigned_to===player.id);});return playerTasks;},[game===null||game===void 0?void 0:game.tasks,game===null||game===void 0?void 0:game.players]);useEffect(()=>{if(!(game!==null&&game!==void 0&&game.tasks)||!startTime)return;const newStats=_objectSpread({},batchStats);// 遍历每个批次\nfor(let batchNum=1;batchNum<=(game.max_batches||0);batchNum++){if(!newStats[batchNum]){newStats[batchNum]={};}// 遍历每个玩家\ngame.players.forEach(player=>{const batchTasks=game.tasks.filter(t=>t.batch_number===batchNum&&t.assigned_to===player.id);const completedTasks=batchTasks.filter(t=>t.status===TaskStatus.COMPLETED);// 如果这个批次的所有任务都完成了，记录完成时间\nif(batchTasks.length>0&&completedTasks.length===batchTasks.length){// 只在第一次完成时记录时间\nif(!newStats[batchNum][player.id]){newStats[batchNum][player.id]={completionTime:elapsedTime,tasksCompleted:completedTasks.length,totalTasks:batchTasks.length};}}else if(batchTasks.length>0){// 更新进行中的任务状态\nnewStats[batchNum][player.id]={completionTime:0,tasksCompleted:completedTasks.length,totalTasks:batchTasks.length};}});}setBatchStats(newStats);},[game===null||game===void 0?void 0:game.tasks,startTime,elapsedTime]);useEffect(()=>{if(!(game!==null&&game!==void 0&&game.tasks)||!startTime)return;const newCompletionTimes=_objectSpread({},batchCompletionTimes);const newStartTimes=_objectSpread({},batchStartTimes);let hasChanges=false;Object.entries(getTasksForBatch).forEach(_ref3=>{let[batchNum,tasks]=_ref3;const batchNumber=parseInt(batchNum);if(!newStartTimes[batchNumber]){newStartTimes[batchNumber]={};hasChanges=true;}if(!newCompletionTimes[batchNumber]){newCompletionTimes[batchNumber]={};hasChanges=true;}game.players.forEach(player=>{const playerTasks=tasks.filter(t=>t.assigned_to===player.id);if(playerTasks.length>0&&playerTasks.every(t=>t.status===TaskStatus.COMPLETED)&&!newCompletionTimes[batchNumber][player.id]){var _newStartTimes$batchN;const batchStartTime=(_newStartTimes$batchN=newStartTimes[batchNumber])===null||_newStartTimes$batchN===void 0?void 0:_newStartTimes$batchN[batchNumber];newCompletionTimes[batchNumber][player.id]=Date.now()-batchStartTime;hasChanges=true;}});});// 只在有变化时更新状态\nif(hasChanges){setBatchStartTimes(newStartTimes);setBatchCompletionTimes(newCompletionTimes);}},[game===null||game===void 0?void 0:game.players,getTasksForBatch,startTime]);useEffect(()=>{if(game!==null&&game!==void 0&&game.tasks&&startTime){const newStats=_objectSpread({},batchStats);// 遍历每个批次\nfor(let batchNum=1;batchNum<=(game.max_batches||0);batchNum++){if(!newStats[batchNum]){newStats[batchNum]={};}// 遍历每个玩家\ngame.players.forEach(player=>{const batchTasks=game.tasks.filter(t=>t.batch_number===batchNum&&t.assigned_to===player.id);const completedTasks=batchTasks.filter(t=>t.status===TaskStatus.COMPLETED);// 如果这个批次的所有任务都完成了，记录完成时间\nif(batchTasks.length>0&&completedTasks.length===batchTasks.length){// 只在第一次完成时记录时间\nif(!newStats[batchNum][player.id]){newStats[batchNum][player.id]={completionTime:elapsedTime,tasksCompleted:completedTasks.length,totalTasks:batchTasks.length};}}else if(batchTasks.length>0){// 更新进行中的任务状态\nnewStats[batchNum][player.id]={completionTime:0,tasksCompleted:completedTasks.length,totalTasks:batchTasks.length};}});}setBatchStats(newStats);}},[game===null||game===void 0?void 0:game.tasks,startTime,elapsedTime]);// 修改统计页面中的完成时间显示\nconst renderBatchStatistics=(batchNum,player)=>{var _batchStats$batchNum;const stats=(_batchStats$batchNum=batchStats[batchNum])===null||_batchStats$batchNum===void 0?void 0:_batchStats$batchNum[player.id];return/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:player.name}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:stats!==null&&stats!==void 0&&stats.completionTime?formatTimeFromMs(stats.completionTime):'-'}),/*#__PURE__*/_jsxs(TableCell,{align:\"right\",children:[stats===null||stats===void 0?void 0:stats.tasksCompleted,\"/\",(stats===null||stats===void 0?void 0:stats.totalTasks)||0]})]},player.id);};// 渲染主菜单\nconst renderMainMenu=()=>/*#__PURE__*/_jsxs(Card,{sx:{maxWidth:600,width:'100%',mx:'auto',mt:4},children:[/*#__PURE__*/_jsxs(Box,{sx:{background:'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',p:4,borderTopLeftRadius:8,borderTopRightRadius:8,position:'relative'},children:[/*#__PURE__*/_jsx(IconButton,{onClick:()=>setShowHelpDialog(true),sx:{position:'absolute',top:8,right:8,color:'primary.main'},children:/*#__PURE__*/_jsx(HelpIcon,{})}),/*#__PURE__*/_jsx(Typography,{variant:\"h3\",sx:{fontWeight:'bold',background:'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',WebkitBackgroundClip:'text',WebkitTextFillColor:'transparent',textShadow:'2px 2px 4px rgba(0,0,0,0.1)',textAlign:'center',mb:1},children:\"Online Multiplayer Coin Game\"}),/*#__PURE__*/_jsx(Typography,{variant:\"subtitle1\",color:\"text.secondary\",align:\"center\",children:\"Flip coins with your friends in this multiplayer game!\"})]}),/*#__PURE__*/_jsxs(Box,{sx:{background:'#ffffff',p:4,borderBottomLeftRadius:8,borderBottomRightRadius:8},children:[/*#__PURE__*/_jsxs(Tabs,{value:activeTab,onChange:(e,newValue)=>{setActiveTab(newValue);// 切换标签时也清除输入\nsetPlayerName('');setPlayerCount(2);setJoinGameId('');setError(null);},sx:{mb:3},children:[/*#__PURE__*/_jsx(Tab,{label:\"CREATE GAME\"}),/*#__PURE__*/_jsx(Tab,{label:\"JOIN GAME\"})]}),activeTab===0?/*#__PURE__*/// Create game form\n_jsxs(Box,{component:\"form\",onSubmit:handleCreateGame,children:[/*#__PURE__*/_jsx(TextField,{fullWidth:true,label:\"Your Name\",required:true,value:playerName,onChange:e=>setPlayerName(e.target.value),sx:{mb:2},autoComplete:\"off\"}),/*#__PURE__*/_jsx(TextField,{fullWidth:true,label:\"Number of Players\",type:\"number\",required:true,value:playerCount,onChange:e=>setPlayerCount(Number(e.target.value)),inputProps:{min:2,max:5},helperText:\"Minimum 2\",sx:{mb:3},autoComplete:\"off\"}),/*#__PURE__*/_jsx(Button,{fullWidth:true,variant:\"contained\",type:\"submit\",disabled:!playerName||playerCount<2||playerCount>5,children:\"Create Game\"})]}):/*#__PURE__*/// Join game form\n_jsxs(Box,{component:\"form\",onSubmit:handleJoinGame,children:[/*#__PURE__*/_jsx(TextField,{fullWidth:true,label:\"Your Name\",required:true,value:playerName,onChange:e=>setPlayerName(e.target.value),sx:{mb:2},autoComplete:\"off\"}),/*#__PURE__*/_jsx(TextField,{fullWidth:true,label:\"Game Code\",required:true,value:joinGameId,onChange:e=>setJoinGameId(e.target.value),sx:{mb:3},autoComplete:\"off\"}),/*#__PURE__*/_jsx(Button,{fullWidth:true,variant:\"contained\",type:\"submit\",disabled:!playerName||!joinGameId,children:\"Join Game\"})]})]})]});const renderHelpDialog=()=>{return/*#__PURE__*/_jsxs(Dialog,{open:showHelpDialog,onClose:()=>setShowHelpDialog(false),maxWidth:\"md\",fullWidth:true,children:[/*#__PURE__*/_jsx(DialogTitle,{children:\"Game Instructions\"}),/*#__PURE__*/_jsx(DialogContent,{children:/*#__PURE__*/_jsxs(List,{children:[/*#__PURE__*/_jsx(ListItem,{children:/*#__PURE__*/_jsx(ListItemText,{primary:\"Game Overview\",secondary:\"This is a multiplayer coin flipping game where players take turns flipping coins to complete specific patterns.\"})}),/*#__PURE__*/_jsx(ListItem,{children:/*#__PURE__*/_jsx(ListItemText,{primary:\"Game Setup\",secondary:\"1. Create a new game or join an existing one using the game code 2. Wait for all players to join 3. The game creator can start the game when everyone is ready\"})}),/*#__PURE__*/_jsx(ListItem,{children:/*#__PURE__*/_jsx(ListItemText,{primary:\"Gameplay\",secondary:\"1. Each player takes turns flipping coins 2. The goal is to flip coins to match the required pattern 3. Complete all batches to win the game 4. The game tracks completion time for each round\"})}),/*#__PURE__*/_jsx(ListItem,{children:/*#__PURE__*/_jsx(ListItemText,{primary:\"Controls\",secondary:\"1. Click on coins to flip them 2. Use the 'Complete Batch' button when you've finished a batch 3. The game automatically tracks your progress\"})})]})}),/*#__PURE__*/_jsx(DialogActions,{children:/*#__PURE__*/_jsx(Button,{onClick:()=>setShowHelpDialog(false),color:\"primary\",children:\"Close\"})})]});};const renderGame=()=>{var _game$players$;if(!game)return null;return/*#__PURE__*/_jsxs(Box,{sx:{p:3,backgroundColor:'background.default',minHeight:'100vh'},children:[/*#__PURE__*/_jsx(Box,{sx:{display:'flex',justifyContent:'space-between',alignItems:'center',mb:3},children:/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h4\",sx:{mb:1,color:'primary.main'},children:[\"Game ID: \",game.id]}),/*#__PURE__*/_jsxs(Typography,{variant:\"h5\",sx:{color:'text.primary'},children:[\"Status: \",game.status==='waiting'?'Waiting':game.status==='in_progress'?'In Progress':'Completed']})]})}),game.status==='waiting'&&playerId===((_game$players$=game.players[0])===null||_game$players$===void 0?void 0:_game$players$.id)&&/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:handleStartGame,sx:{mb:3},children:\"Start Game\"}),/*#__PURE__*/_jsxs(Grid,{container:true,spacing:3,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:7,children:/*#__PURE__*/_jsx(Stack,{spacing:3,children:game.players.map(renderPlayer)})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:5,children:renderStatistics()})]}),game.status==='completed'&&/*#__PURE__*/_jsx(Box,{sx:{mt:4,textAlign:'center'},children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:handleReturnToMainMenu,sx:{minWidth:200,borderRadius:2},children:\"Return to Main Menu\"})})]});};// 获取每轮需要翻转的硬币数量\nconst getRequiredCoinsForBatch=batchNum=>{return 20;// 所有批次都需要20个硬币\n};// 获取每轮的子批次结构\nconst getBatchStructure=batchNum=>{const structure={1:[{subBatchIndex:0,coinsCount:20}],// 第1轮：1个批次×20枚\n2:[// 第2轮：2个批次×10枚\n{subBatchIndex:0,coinsCount:10},{subBatchIndex:1,coinsCount:10}],3:[// 第3轮：4个批次×5枚\n{subBatchIndex:0,coinsCount:5},{subBatchIndex:1,coinsCount:5},{subBatchIndex:2,coinsCount:5},{subBatchIndex:3,coinsCount:5}],4:Array.from({length:10},(_,i)=>({// 第4轮：10个批次×2枚\nsubBatchIndex:i,coinsCount:2}))};return structure[batchNum]||[];};// 获取当前子批次的硬币数量\nconst getSubBatchSize=(batchNum,subBatchIndex)=>{const structure=getBatchStructure(batchNum);const subBatch=structure.find(sb=>sb.subBatchIndex===subBatchIndex);return(subBatch===null||subBatch===void 0?void 0:subBatch.coinsCount)||0;};// 修改isSubBatchComplete函数\nconst isSubBatchComplete=(batchNum,subBatchIndex,currentPlayerId)=>{if(!game)return false;const subBatchTasks=game.tasks.filter(t=>t.batch_number===batchNum&&t.sub_batch_number===subBatchIndex&&t.assigned_to===currentPlayerId);const flippedCount=subBatchTasks.filter(t=>{var _flippedCoins$current;return(_flippedCoins$current=flippedCoins[currentPlayerId])===null||_flippedCoins$current===void 0?void 0:_flippedCoins$current.includes(t.id);}).length;return flippedCount>=getSubBatchSize(batchNum,subBatchIndex);};// 添加错误处理函数\nconst handleGameUpdate=updatedGame=>{setGame(updatedGame);if(updatedGame.status==='completed'&&!endTime){setEndTime(Date.now());}};// 添加创建游戏的处理函数\nconst handleCreateGame=async e=>{e.preventDefault();try{setError(null);// 固定为4轮游戏，每轮20个硬币\nconst gameId=await gameService.createGame(playerCount,4,20);if(gameId){// 加入游戏\nconst playerId=await gameService.joinGame(gameId,playerName);// 更新状态\nsetGameId(gameId);setPlayerId(playerId);// 创建WebSocket连接\nconst ws=new WebSocketService(gameId,playerName,handleGameUpdate,syncFlippedCoins);setWsService(ws);// 获取初始游戏状态\nconst initialGameState=await gameService.getGameState(gameId);setGame(initialGameState);// 设置开始时间\nsetStartTime(Date.now());console.log('Game created successfully:',{gameId,playerId});}}catch(err){console.error('Error creating game:',err);setError(err instanceof Error?err.message:'Failed to create game');}};// 添加加入游戏的处理函数\nconst handleJoinGame=async e=>{e.preventDefault();try{setError(null);if(joinGameId){// 检查游戏是否存在\nconst exists=await gameService.checkGameExists(joinGameId);if(!exists){setError('Game not found');return;}// 加入游戏\nconst playerId=await gameService.joinGame(joinGameId,playerName);// 更新状态\nsetGameId(joinGameId);setPlayerId(playerId);// 创建WebSocket连接\nconst ws=new WebSocketService(joinGameId,playerName,handleGameUpdate,syncFlippedCoins);setWsService(ws);// 获取游戏状态\nconst gameState=await gameService.getGameState(joinGameId);setGame(gameState);// 设置开始时间\nsetStartTime(Date.now());console.log('Joined game successfully:',{gameId:joinGameId,playerId});}}catch(err){console.error('Error joining game:',err);setError(err instanceof Error?err.message:'Failed to join game');}};// 添加开始游戏的处理函数\nconst handleStartGame=async()=>{if(!gameId)return;try{await gameService.startGame(gameId);const currentTime=Date.now();setStartTime(currentTime);setBatchStartTimes(prev=>_objectSpread(_objectSpread({},prev),{},{1:{1:currentTime}}));}catch(err){setError(err instanceof Error?err.message:'Failed to start game');}};// 修改handleCompleteSubBatch函数，记录永久翻转状态\nconst handleCompleteSubBatch=async(batchNum,subBatchIndex)=>{if(!game||!playerId||!wsService)return;try{if(!canExecuteBatch(batchNum,subBatchIndex)){setError('Please complete previous batches first');return;}const subBatchTasks=game.tasks.filter(t=>t.batch_number===batchNum&&t.sub_batch_number===subBatchIndex&&t.assigned_to===playerId);const buttonKey=\"\".concat(playerId,\"-\").concat(batchNum,\"-\").concat(subBatchIndex);setCompletedSubBatches(prev=>{const newSet=new Set(Array.from(prev));newSet.add(buttonKey);return newSet;});// 完成当前子批次的任务\nfor(const task of subBatchTasks){await wsService.completeTask(task.id);}// 检查是否完成了当前批次的所有子批次\nconst allSubBatchesInCurrentBatch=game.tasks.filter(t=>t.batch_number===batchNum&&t.assigned_to===playerId);const allSubBatchesCompleted=allSubBatchesInCurrentBatch.every(t=>t.status===TaskStatus.COMPLETED);// 如果完成了当前批次的所有子批次，设置下一批次的开始时间\nif(allSubBatchesCompleted&&batchNum<game.max_batches){const nextBatchNum=batchNum+1;const currentTime=Date.now();setBatchStartTimes(prev=>_objectSpread(_objectSpread({},prev),{},{[nextBatchNum]:_objectSpread(_objectSpread({},prev[nextBatchNum]),{},{[nextBatchNum]:currentTime})}));// 更新全局startTime\nsetStartTime(currentTime);}// 更新永久翻转状态\nconst permanentFlips=permanentFlippedCoins[playerId]||[];const currentFlips=flippedCoins[playerId]||[];const allFlips=Array.from(new Set([...permanentFlips,...currentFlips]));setFlippedCoins(prev=>_objectSpread(_objectSpread({},prev),{},{[playerId]:allFlips}));// 保存当前批次的累计时间\nconst batchStartTime=(batchStartTimes[batchNum]||{})[batchNum];if(batchStartTime){const previousTime=(batchElapsedTimes[batchNum]||{})[playerId]||0;const elapsedTime=currentTime-batchStartTime+previousTime;setBatchElapsedTimes(prev=>_objectSpread(_objectSpread({},prev),{},{[batchNum]:_objectSpread(_objectSpread({},prev[batchNum]||{}),{},{[playerId]:elapsedTime})}));}}catch(error){console.error('Error completing sub-batch:',error);setError('Failed to complete sub-batch');}};// 添加一个新的useEffect来处理新任务的接收\nuseEffect(()=>{if(!game||!playerId)return;const currentPlayer=game.players.find(p=>p.id===playerId);if(!currentPlayer)return;const currentBatchTasks=game.tasks.filter(t=>t.batch_number===currentPlayer.current_batch&&t.assigned_to===playerId);// 当收到新的PENDING任务时，设置新的开始时间\nif(currentBatchTasks.length>0&&currentBatchTasks.every(t=>t.status===TaskStatus.PENDING)&&currentPlayer.status===PlayerStatus.ACTIVE){const currentTime=Date.now();const currentBatch=currentPlayer.current_batch;// 设置新批次的开始时间\nsetBatchStartTimes(prev=>_objectSpread(_objectSpread({},prev),{},{[currentBatch]:_objectSpread(_objectSpread({},prev[currentBatch]||{}),{},{[currentBatch]:currentTime})}));}},[game===null||game===void 0?void 0:game.tasks,game===null||game===void 0?void 0:game.players,playerId]);// 添加一个新的useEffect来监听玩家状态变化\nuseEffect(()=>{if(!game||!playerId)return;const currentPlayer=game.players.find(p=>p.id===playerId);if(!currentPlayer)return;// 当玩家状态变为ACTIVE时，立即开始计时\nif(currentPlayer.status===PlayerStatus.ACTIVE){const currentTime=Date.now();const currentBatch=currentPlayer.current_batch;// 设置新的开始时间\nsetBatchStartTimes(prev=>_objectSpread(_objectSpread({},prev),{},{[currentBatch]:_objectSpread(_objectSpread({},prev[currentBatch]||{}),{},{[currentBatch]:currentTime})}));}},[game===null||game===void 0?void 0:game.players,playerId]);return/*#__PURE__*/_jsxs(Container,{children:[!gameId?/*#__PURE__*/_jsxs(_Fragment,{children:[renderMainMenu(),renderHelpDialog()]}):game?renderGame():/*#__PURE__*/_jsx(CircularProgress,{}),error&&/*#__PURE__*/_jsx(Alert,{severity:\"error\",sx:{mt:2},children:error})]});};","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","Stack","TableContainer","Table","TableHead","TableBody","TableCell","TableRow","Paper","Container","CircularProgress","IconButton","List","ListItem","ListItemText","TaskStatus","PlayerStatus","TaskType","gameService","WebSocketService","HelpIcon","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Game","_ref","gameId","initialGameId","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","currentTime","setCurrentTime","showResultPage","setShowResultPage","batchCompletionTimes","setBatchCompletionTimes","batchStartTimes","setBatchStartTimes","batchFlipStates","setBatchFlipStates","flipCoins","setFlipCoins","syncFlippedCoins","taskId","includes","prev","flippedCoins","setFlippedCoins","pendingBatchCompletion","setPendingBatchCompletion","flipStates","setFlipStates","flippingCoins","setFlippingCoins","elapsedTime","setElapsedTime","batchStats","setBatchStats","currentSubBatch","setCurrentSubBatch","completedSubBatches","setCompletedSubBatches","Set","permanentFlippedCoins","setPermanentFlippedCoins","showHelpDialog","setShowHelpDialog","batchElapsedTimes","setBatchElapsedTimes","service","updatedGame","console","log","connect","disconnect","status","Date","now","timerInterval","currentPlayer","players","find","p","id","ACTIVE","_batchStartTimes$curr","currentBatch","current_batch","_objectSpread","setInterval","batchStartTime","previousTime","newElapsed","clearInterval","intervalId","tasks","newStartTimes","newCompletionTimes","hasChanges","forEach","player","_newCompletionTimes$p","currentBatchTasks","filter","t","batch_number","assigned_to","length","every","PENDING","COMPLETED","_newStartTimes$player","shouldUpdate","newFlippedCoins","playerTasks","prevBatchTasks","prevBatchTaskIds","map","shouldUpdateFlips","some","otherPlayersStates","permanentFlips","completedTaskIds","allFlippedCoins","Array","from","handleCoinFlip","currentPlayerFlips","prevPermanent","syncFlipCoin","isFlipping","setTimeout","handleCompleteBatch","batchNum","pendingTasks","completeTask","newState","renderCoin","type","isSmall","arguments","undefined","onClick","flipState","isFlipped","displayType","HEADS","TAILS","sx","width","height","borderRadius","backgroundColor","border","concat","color","display","alignItems","justifyContent","fontWeight","fontSize","perspective","mb","position","cursor","transition","transformStyle","transform","boxShadow","content","top","left","right","bottom","background","pointerEvents","children","_prev$playerId","canExecuteBatch","subBatchIndex","previousSubBatches","sub_batch_number","renderTaskRow","playerStatus","WAITING","variant","structure","getBatchStructure","_ref2","_subBatchTasks$","coinsCount","subBatchTasks","currentBatchTarget","flippedCount","isComplete","isSubBatchComplete","canExecute","isActiveSubBatch","isSubmitted","buttonKey","isButtonDisabled","has","size","handleCompleteSubBatch","disabled","flexWrap","gap","opacity","task","_flippingCoins$task$i","renderPlayer","_currentBatchTasks$","requiredCoins","getRequiredCoinsForBatch","currentFlippedCount","_flippedCoins$player$","name","label","bgcolor","max_batches","mt","mr","ml","getPlayerStatusColor","IDLE","getTaskStatusColor","IN_PROGRESS","handleTabChange","_","newValue","handleGameComplete","formatTimeFromMs","ms","totalSeconds","Math","floor","minutes","seconds","toString","padStart","renderCompletionDialog","totalTime","open","onClose","PaperProps","textAlign","flexDirection","py","window","location","reload","handleCompleteGame","handleReturnToMainMenu","renderResultPage","minHeight","maxWidth","renderStatistics","i","component","align","_player$batch_start_t","_player$batch_complet","_player$batch_start_t2","batchTasks","isCompleted","hasStarted","batch_start_time","completionTime","batch_completion_time","displayTime","reduce","sum","_p$batch_completion_t","getTasksForBatch","useMemo","tasksByBatch","push","getPlayerTasks","newStats","completedTasks","tasksCompleted","totalTasks","Object","entries","_ref3","batchNumber","parseInt","_newStartTimes$batchN","renderBatchStatistics","_batchStats$batchNum","stats","renderMainMenu","mx","borderTopLeftRadius","borderTopRightRadius","WebkitBackgroundClip","WebkitTextFillColor","textShadow","borderBottomLeftRadius","borderBottomRightRadius","value","onChange","e","onSubmit","handleCreateGame","fullWidth","required","target","autoComplete","Number","inputProps","min","max","helperText","handleJoinGame","renderHelpDialog","primary","secondary","renderGame","_game$players$","handleStartGame","container","spacing","item","xs","md","minWidth","getSubBatchSize","subBatch","sb","currentPlayerId","_flippedCoins$current","handleGameUpdate","preventDefault","createGame","joinGame","ws","initialGameState","getGameState","err","Error","message","exists","checkGameExists","gameState","startGame","newSet","add","allSubBatchesInCurrentBatch","allSubBatchesCompleted","nextBatchNum","currentFlips","allFlips","severity"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes,\n    Stack,\n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableCell,\n    TableRow,\n    Paper,\n    Container,\n    CircularProgress,\n    IconButton,\n    List,\n    ListItem,\n    ListItemText\n} from '@mui/material';\nimport { Game as GameType, Player, Task, TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport HelpIcon from '@mui/icons-material/Help';\n\ninterface GameProps {\n    gameId?: string;\n}\n\ntype TabType = 0 | 1;\n\n// 添加类型定义\ninterface BatchTimes {\n    [key: number]: {\n        [key: string]: number;\n    };\n}\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | undefined>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(20);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState<TabType>(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n    const [batchCompletionTimes, setBatchCompletionTimes] = useState<{[key: number]: {[key: string]: number}}>({});\n    const [batchStartTimes, setBatchStartTimes] = useState<BatchTimes>({});\n\n    const [batchFlipStates, setBatchFlipStates] = useState<{\n        [batchNum: number]: {\n            [taskId: string]: boolean;  // true means flipped\n        };\n    }>({});\n\n    const [flipCoins, setFlipCoins] = useState<string[]>([]);\n    const syncFlippedCoins = (taskId: string) => {\n        if (!flipCoins.includes(taskId)) {\n            setFlipCoins(prev => [...prev, taskId]);\n        }\n    };\n\n    // 修改翻转状态的类型定义，加入玩家ID\n    const [flippedCoins, setFlippedCoins] = useState<{[playerId: string]: string[]}>({});\n    const [pendingBatchCompletion, setPendingBatchCompletion] = useState<{\n        [batchNum: number]: string[];\n    }>({});\n\n    // 添加翻转动画状态\n    interface FlipState {\n        isFlipping: boolean;\n        showOpposite: boolean;\n    }\n    const [flipStates, setFlipStates] = useState<{\n        [key: string]: FlipState;\n    }>({});\n\n    // 添加翻转动画状态\n    const [flippingCoins, setFlippingCoins] = useState<{[key: string]: { isFlipping: boolean }}>({});\n\n    // 修改计时器状态和开始时间状态\n    const [elapsedTime, setElapsedTime] = useState<number>(0);\n\n    // 添加批次统计时间的状态\n    const [batchStats, setBatchStats] = useState<{\n        [batchNum: number]: {\n            [playerId: string]: {\n                completionTime: number;\n                tasksCompleted: number;\n                totalTasks: number;\n            }\n        }\n    }>({});\n\n    // 添加当前子批次的useEffect\n    const [currentSubBatch, setCurrentSubBatch] = useState<number>(0);\n\n    // 添加已完成子批次的状态\n    const [completedSubBatches, setCompletedSubBatches] = useState<Set<string>>(new Set());\n\n    // 添加永久翻转状态的记录\n    const [permanentFlippedCoins, setPermanentFlippedCoins] = useState<{[playerId: string]: string[]}>({});\n\n    const [showHelpDialog, setShowHelpDialog] = useState(false);\n\n    // 添加一个新的state来跟踪每个批次的累计时间\n    const [batchElapsedTimes, setBatchElapsedTimes] = useState<BatchTimes>({});\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, (updatedGame) => {\n                console.log('Game state updated:', updatedGame);\n                setGame(updatedGame);\n            }, syncFlippedCoins);\n            service.connect();\n            setWsService(service);\n\n            // Cleanup function\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && playerId) {\n            const currentPlayer = game.players.find(p => p.id === playerId);\n            if (currentPlayer?.status === PlayerStatus.ACTIVE) {\n                const currentBatch = currentPlayer.current_batch;\n                const currentTime = Date.now();\n                \n                // 确保有开始时间\n                if (!batchStartTimes[currentBatch]?.[currentBatch]) {\n                    setBatchStartTimes(prev => ({\n                        ...prev,\n                        [currentBatch]: {\n                            ...(prev[currentBatch] || {}),\n                            [currentBatch]: currentTime\n                        }\n                    }));\n                }\n\n                timerInterval = setInterval(() => {\n                    const batchStartTime = (batchStartTimes[currentBatch] || {})[currentBatch];\n                    if (batchStartTime) {\n                        const previousTime = (batchElapsedTimes[currentBatch] || {})[playerId] || 0;\n                        const newElapsed = Date.now() - batchStartTime + previousTime;\n                        setCurrentTime(newElapsed);\n                    }\n                }, 1000);\n            }\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, game?.players, playerId, batchStartTimes, batchElapsedTimes]);\n\n    useEffect(() => {\n        let intervalId: NodeJS.Timeout;\n        \n        if (startTime && game?.status === 'in_progress') {\n            intervalId = setInterval(() => {\n                setElapsedTime(prev => Date.now() - startTime);\n            }, 1000);\n        }\n        \n        return () => {\n            if (intervalId) {\n                clearInterval(intervalId);\n            }\n        };\n    }, [startTime, game?.status]);\n\n    useEffect(() => {\n        if (game?.tasks && game.players) {\n            const newStartTimes = { ...batchStartTimes };\n            const newCompletionTimes = { ...batchCompletionTimes };\n            let hasChanges = false;\n\n            game.players.forEach(player => {\n                // 获取玩家当前批次的所有任务\n                const currentBatchTasks = game.tasks.filter(t => \n                    t.batch_number === player.current_batch && \n                    t.assigned_to === player.id\n                );\n\n                // 检查是否有新的子批次任务（所有任务都是PENDING状态）\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                    const currentTime = Date.now();\n                    if (!newStartTimes[player.current_batch]) {\n                        newStartTimes[player.current_batch] = {};\n                    }\n                    // 更新开始时间，确保计时器继续\n                    newStartTimes[player.current_batch][player.current_batch] = currentTime;\n                    hasChanges = true;\n                    // 更新全局startTime\n                    setStartTime(currentTime);\n                }\n\n                // 处理批次完成时间\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.COMPLETED) &&\n                    !newCompletionTimes[player.current_batch]?.[player.id]) {\n                    if (!newCompletionTimes[player.current_batch]) {\n                        newCompletionTimes[player.current_batch] = {};\n                    }\n                    const batchStartTime = newStartTimes[player.current_batch]?.[player.current_batch];\n                    if (batchStartTime) {\n                        newCompletionTimes[player.current_batch][player.id] = Date.now() - batchStartTime;\n                        hasChanges = true;\n                    }\n                }\n            });\n\n            if (hasChanges) {\n                setBatchStartTimes(newStartTimes);\n                setBatchCompletionTimes(newCompletionTimes);\n            }\n        }\n    }, [game?.tasks, game?.players]);\n\n    // 添加一个新的useEffect来监听游戏状态变化\n    useEffect(() => {\n        if (game?.status === 'in_progress' && playerId) {\n            const currentPlayer = game.players.find(p => p.id === playerId);\n            if (currentPlayer) {\n                const currentBatchTasks = game.tasks.filter(t => \n                    t.batch_number === currentPlayer.current_batch && \n                    t.assigned_to === playerId\n                );\n                \n                // 如果玩家有新的PENDING任务，确保计时器在运行\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                    const currentTime = Date.now();\n                    setStartTime(currentTime);\n                }\n            }\n        }\n    }, [game?.status, game?.tasks, game?.players, playerId]);\n\n    useEffect(() => {\n        if (game?.tasks) {\n            let shouldUpdate = false;\n            const newFlippedCoins: {[playerId: string]: string[]} = {...flippedCoins};\n\n            // 检查是否有新的批次开始\n            game.players.forEach(player => {\n                const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n                const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n                \n                // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                    // 清理上一个批次的翻转状态\n                    const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n                    const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n                    if (newFlippedCoins[player.id]) {\n                        newFlippedCoins[player.id] = newFlippedCoins[player.id].filter(id => !prevBatchTaskIds.includes(id));\n                        shouldUpdate = true;\n                    }\n                }\n            });\n\n            // 只在有变化时更新状态\n            if (shouldUpdate) {\n                setFlippedCoins(newFlippedCoins);\n            }\n        }\n    }, [game?.tasks]);\n\n    // 修改游戏状态更新的effect，确保永久翻转的硬币不会被重置\n    useEffect(() => {\n        if (game?.tasks && playerId) {\n            const currentPlayer = game.players.find(p => p.id === playerId);\n            if (!currentPlayer) return;\n\n            const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n            const currentBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch);\n            \n            const shouldUpdateFlips = currentBatchTasks.some(t => t.status === TaskStatus.COMPLETED) ||\n                currentBatchTasks.every(t => t.status === TaskStatus.PENDING);\n\n            if (shouldUpdateFlips) {\n                setFlippedCoins(prev => {\n                    const otherPlayersStates = { ...prev };\n                    const permanentFlips = permanentFlippedCoins[playerId] || [];\n                    const completedTaskIds = playerTasks\n                        .filter(t => t.status === TaskStatus.COMPLETED)\n                        .map(t => t.id);\n                    \n                    // 使用Array.from替代Set的扩展运算符\n                    const allFlippedCoins = Array.from(new Set([...permanentFlips, ...completedTaskIds]));\n                    \n                    return {\n                        ...otherPlayersStates,\n                        [playerId]: allFlippedCoins\n                    };\n                });\n            }\n        }\n    }, [game?.tasks, playerId, permanentFlippedCoins]);\n\n    // 修改handleCoinFlip函数，记录永久翻转状态\n    const handleCoinFlip = (taskId: string) => {\n        if (!playerId) return;\n        \n        // 立即更新当前玩家的翻转状态\n        setFlippedCoins(prev => {\n            const currentPlayerFlips = prev[playerId] || [];\n            if (!currentPlayerFlips.includes(taskId)) {\n                // 同时更新永久翻转状态\n                setPermanentFlippedCoins(prevPermanent => ({\n                    ...prevPermanent,\n                    [playerId]: [...(prevPermanent[playerId] || []), taskId]\n                }));\n                \n                return {\n                    ...prev,\n                    [playerId]: [...currentPlayerFlips, taskId]\n                };\n            }\n            return prev;\n        });\n        gameService.syncFlipCoin(gameId || '', taskId);\n        // 设置翻转动画\n        setFlippingCoins(prev => ({\n            ...prev,\n            [taskId]: { isFlipping: true }\n        }));\n\n        setTimeout(() => {\n            setFlippingCoins(prev => ({\n                ...prev,\n                [taskId]: { isFlipping: false }\n            }));\n        }, 500);\n    };\n\n    // 处理批次完成\n    const handleCompleteBatch = (batchNum: number) => {\n        const pendingTasks = pendingBatchCompletion[batchNum] || [];\n        if (pendingTasks.length === 0) return;\n\n        // 发送所有任务完成的请求\n        pendingTasks.forEach((taskId: string) => {\n            if (wsService) {\n                wsService.completeTask(taskId);\n            }\n        });\n\n        // 清理这个批次的待完成状态\n        setPendingBatchCompletion((prev: {[batchNum: number]: string[]}) => {\n            const newState = { ...prev };\n            delete newState[batchNum];\n            return newState;\n        });\n    };\n\n    // 修改渲染硬币的函数\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void, taskId?: string) => {\n        if (!taskId) return null;\n        const flipState = taskId ? flippingCoins[taskId] : undefined;\n        const isFlipped = taskId && playerId && flippedCoins[playerId] ? flippedCoins[playerId].includes(taskId) : false;\n        \n        // 决定显示哪一面\n        let displayType = isFlipped\n            ? (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) \n            : type;\n        if (flipCoins.includes(taskId))\n            displayType = TaskType.HEADS;\n        else\n            displayType = TaskType.TAILS;\n        return (\n            <Box\n                sx={{\n                    width: isSmall ? 20 : 32,\n                    height: isSmall ? 20 : 32,\n                    borderRadius: '50%',\n                    backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                    border: `${isSmall ? 1 : 2}px solid #B8860B`,\n                    color: '#704214',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontWeight: 'bold',\n                    fontSize: isSmall ? '0.6rem' : '0.8rem',\n                    perspective: 1000,\n                    mb: isSmall ? 0 : 1,\n                    position: 'relative',\n                    cursor: onClick ? 'pointer' : 'default',\n                    transition: 'transform 0.6s',\n                    transformStyle: 'preserve-3d',\n                    transform: flipState?.isFlipping ? 'rotateY(360deg)' : 'rotateY(0deg)',\n                    '&:hover': onClick ? {\n                        transform: 'scale(1.05)',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                    } : {},\n                    '&:active': onClick ? {\n                        transform: 'scale(0.95)'\n                    } : {},\n                    '&::after': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        borderRadius: '50%',\n                        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                        pointerEvents: 'none'\n                    }\n                }}\n                onClick={onClick}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 监听游戏状态变化\n    useEffect(() => {\n        if (game?.tasks && playerId) {\n            const currentPlayer = game.players.find(p => p.id === playerId);\n            if (!currentPlayer) return;\n\n            const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n            const currentBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch);\n            \n            // 只有当前玩家的新批次开始时才清理状态\n            if (currentBatchTasks.length > 0 && \n                currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                // 清理当前玩家上一个批次的翻转状态\n                const prevBatchTasks = playerTasks.filter(t => t.batch_number === currentPlayer.current_batch - 1);\n                const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n                setFlippedCoins(prev => ({\n                    ...prev,\n                    [playerId]: prev[playerId]?.filter(id => !prevBatchTaskIds.includes(id)) || []\n                }));\n            }\n        }\n    }, [game?.tasks, playerId]);\n\n    // 检查当前批次是否可以执行\n    const canExecuteBatch = (batchNum: number, subBatchIndex: number): boolean => {\n        if (!game || !playerId) return false;\n\n        // 获取当前玩家的所有任务\n        const playerTasks = game.tasks.filter(t => t.assigned_to === playerId);\n        \n        // 获取所有之前的子批次\n        const previousSubBatches = playerTasks.filter(t => \n            (t.batch_number < batchNum) || \n            (t.batch_number === batchNum && t.sub_batch_number < subBatchIndex)\n        );\n\n        // 如果还有之前的子批次未完成，则不能执行当前批次\n        return !previousSubBatches.some(t => t.status !== TaskStatus.COMPLETED);\n    };\n\n    // 修改renderTaskRow函数中的按钮显示逻辑\n    const renderTaskRow = (tasks: Task[], batchNum: number, playerStatus: PlayerStatus) => {\n        if (playerStatus === PlayerStatus.WAITING) {\n            return (\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                    Waiting for your turn...\n                </Typography>\n            );\n        }\n\n        const structure = getBatchStructure(batchNum);\n        const currentPlayer = game?.players.find(p => p.id === playerId);\n        \n        return (\n            <Box>\n                {structure.map(({ subBatchIndex, coinsCount }) => {\n                    const subBatchTasks = tasks.filter(t => t.sub_batch_number === subBatchIndex);\n                    if (subBatchTasks.length === 0) return null;\n\n                    const currentBatchTarget = subBatchTasks[0]?.type || TaskType.HEADS;\n                    const flippedCount = playerId && flippedCoins[playerId] \n                        ? subBatchTasks.filter(t => flippedCoins[playerId].includes(t.id)).length \n                        : 0;\n                    const isComplete = isSubBatchComplete(batchNum, subBatchIndex, currentPlayer?.id || '');\n                    const canExecute = canExecuteBatch(batchNum, subBatchIndex);\n                    \n                    // 检查是否是当前活动的子批次\n                    const isActiveSubBatch = currentPlayer?.status === PlayerStatus.ACTIVE && \n                                           canExecute && \n                                           !isComplete;\n\n                    // 检查子批次是否已经完成并提交\n                    const isSubmitted = subBatchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                    // 使用包含玩家ID的buttonKey确保按钮状态的独立性\n                    const buttonKey = `${playerId}-${batchNum}-${subBatchIndex}`;\n                    const isButtonDisabled = completedSubBatches.has(buttonKey);\n\n                    return (\n                        <Box key={buttonKey} sx={{ mb: 2 }}>\n                            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                                {isComplete && currentPlayer?.status === PlayerStatus.ACTIVE && !isSubmitted && !isButtonDisabled && (\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        size=\"small\"\n                                        onClick={() => handleCompleteSubBatch(batchNum, subBatchIndex)}\n                                        disabled={!canExecute}\n                                    >\n                                        Complete this batch\n                                    </Button>\n                                )}\n                            </Box>\n                            <Box sx={{ \n                                display: 'flex', \n                                flexWrap: 'wrap', \n                                gap: 1,\n                                opacity: isActiveSubBatch ? 1 : 0.5,\n                                pointerEvents: isActiveSubBatch ? 'auto' : 'none'\n                            }}>\n                                {subBatchTasks.map((task) => (\n                                    <Box key={task.id}>\n                                        {renderCoin(\n                                            task.type,\n                                            flippingCoins[task.id]?.isFlipping || false,\n                                            false,\n                                            isActiveSubBatch ? () => handleCoinFlip(task.id) : undefined,\n                                            task.id\n                                        )}\n                                    </Box>\n                                ))}\n                            </Box>\n                        </Box>\n                    );\n                })}\n            </Box>\n        );\n    };\n\n    // 渲染玩家卡片\n    const renderPlayer = (player: Player) => {\n        const currentBatchTasks = game?.tasks.filter(t => \n            t.batch_number === player.current_batch && \n            t.assigned_to === player.id\n        ) || [];\n\n        const currentBatchTarget = currentBatchTasks[0]?.type;\n        const requiredCoins = getRequiredCoinsForBatch(player.current_batch);\n        const currentFlippedCount = currentBatchTasks.filter(t => flippedCoins[player.id]?.includes(t.id)).length;\n\n        return (\n            <Card key={player.id} sx={{ mb: 2 }}>\n                <CardContent>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                        <Typography variant=\"h6\">\n                            {player.name}\n                        </Typography>\n                        <Chip \n                            label={player.status}\n                            color={player.status === PlayerStatus.ACTIVE ? \"success\" : \"default\"}\n                            size=\"small\"\n                        />\n                    </Box>\n\n                    <Box sx={{ mb: 2, bgcolor: 'background.default', p: 2, borderRadius: 1 }}>\n                        <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n                            Current Round: {player.current_batch} / {game?.max_batches}\n                            {currentBatchTarget && player.status === PlayerStatus.ACTIVE && (\n                                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\n                                    <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                                        Required flips:\n                                    </Typography>\n                                    <Typography variant=\"body2\" sx={{ ml: 2 }}>\n                                        {requiredCoins}\n                                    </Typography>\n                                </Box>\n                            )}\n                        </Typography>\n\n                        <Box sx={{ mb: 2 }}>\n                            {renderTaskRow(currentBatchTasks, player.current_batch, player.status)}\n                        </Box>\n                    </Box>\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue as TabType);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(20);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    // 添加一个辅助函数来处理毫秒到时间的转换\n    const formatTimeFromMs = (ms: number) => {\n        const totalSeconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed!\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTimeFromMs(endTime - startTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    // 修改返回主菜单的处理函数\n    const handleReturnToMainMenu = () => {\n        // 清除游戏状态\n        setGameId('');\n        setGame(null);\n        setWsService(null);\n        setStartTime(null);\n        setEndTime(null);\n        // 清除输入记录\n        setPlayerName('');\n        setPlayerCount(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTimeFromMs(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMainMenu}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    const renderStatistics = () => {\n        if (!game) return null;\n\n        return (\n            <Box sx={{ p: 2 }}>\n                <Typography variant=\"h6\" sx={{ mb: 2, color: 'primary.main' }}>\n                    Game Statistics\n                </Typography>\n                {Array.from({ length: game.max_batches }, (_, i) => i + 1).map(batchNum => (\n                    <Box key={batchNum} sx={{ mb: 3 }}>\n                        <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                            Round {batchNum}\n                        </Typography>\n                        <TableContainer component={Paper} sx={{ mb: 2 }}>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Player</TableCell>\n                                        <TableCell align=\"right\">Time</TableCell>\n                                        <TableCell align=\"right\">Status</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {game.players.map(player => {\n                                        const batchTasks = game.tasks.filter(t => \n                                            t.batch_number === batchNum && \n                                            t.assigned_to === player.id\n                                        );\n                                        const isCompleted = batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                                        const hasStarted = player.batch_start_time?.[batchNum] != null;\n                                        const completionTime = player.batch_completion_time?.[batchNum];\n                                        const startTime = player.batch_start_time?.[batchNum];\n                                        \n                                        // 计算当前时间（如果批次已开始但未完成）\n                                        let displayTime = '-';\n                                        if (completionTime) {\n                                            displayTime = formatTimeFromMs(completionTime);\n                                        } else if (hasStarted && startTime) {\n                                            const currentTime = Date.now() - startTime;\n                                            displayTime = formatTimeFromMs(currentTime);\n                                        }\n\n                                        let status = 'Pending';\n                                        if (isCompleted) {\n                                            status = 'Completed';\n                                        } else if (hasStarted) {\n                                            status = 'In Progress';\n                                        }\n\n                                        return (\n                                            <TableRow key={player.id}>\n                                                <TableCell>{player.name}</TableCell>\n                                                <TableCell align=\"right\">{displayTime}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Chip \n                                                        label={status}\n                                                        size=\"small\"\n                                                        color={isCompleted ? 'success' : (hasStarted ? 'primary' : 'default')}\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                    <TableRow sx={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}>\n                                        <TableCell><strong>Total</strong></TableCell>\n                                        <TableCell align=\"right\">\n                                            <strong>\n                                                {formatTimeFromMs(game.players.reduce((sum, p) => \n                                                    sum + (p.batch_completion_time?.[batchNum] || 0), \n                                                    0\n                                                ))}\n                                            </strong>\n                                        </TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    // 使用useMemo来记忆计算结果\n    const getTasksForBatch = React.useMemo(() => {\n        if (!game?.tasks) return {};\n        const tasksByBatch: { [key: number]: Task[] } = {};\n        game.tasks.forEach(task => {\n            if (!tasksByBatch[task.batch_number]) {\n                tasksByBatch[task.batch_number] = [];\n            }\n            tasksByBatch[task.batch_number].push(task);\n        });\n        return tasksByBatch;\n    }, [game?.tasks]);\n\n    // 使用useMemo来记忆玩家任务\n    const getPlayerTasks = React.useMemo(() => {\n        if (!game?.tasks || !game?.players) return {};\n        const playerTasks: { [key: string]: Task[] } = {};\n        game.players.forEach(player => {\n            playerTasks[player.id] = game.tasks.filter(t => t.assigned_to === player.id);\n        });\n        return playerTasks;\n    }, [game?.tasks, game?.players]);\n\n    useEffect(() => {\n        if (!game?.tasks || !startTime) return;\n\n        const newStats = { ...batchStats };\n        \n        // 遍历每个批次\n        for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n            if (!newStats[batchNum]) {\n                newStats[batchNum] = {};\n            }\n            \n            // 遍历每个玩家\n            game.players.forEach(player => {\n                const batchTasks = game.tasks.filter(t => \n                    t.batch_number === batchNum && \n                    t.assigned_to === player.id\n                );\n                \n                const completedTasks = batchTasks.filter(t => \n                    t.status === TaskStatus.COMPLETED\n                );\n                \n                // 如果这个批次的所有任务都完成了，记录完成时间\n                if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n                    // 只在第一次完成时记录时间\n                    if (!newStats[batchNum][player.id]) {\n                        newStats[batchNum][player.id] = {\n                            completionTime: elapsedTime,\n                            tasksCompleted: completedTasks.length,\n                            totalTasks: batchTasks.length\n                        };\n                    }\n                } else if (batchTasks.length > 0) {\n                    // 更新进行中的任务状态\n                    newStats[batchNum][player.id] = {\n                        completionTime: 0,\n                        tasksCompleted: completedTasks.length,\n                        totalTasks: batchTasks.length\n                    };\n                }\n            });\n        }\n        \n        setBatchStats(newStats);\n    }, [game?.tasks, startTime, elapsedTime]);\n\n    useEffect(() => {\n        if (!game?.tasks || !startTime) return;\n\n        const newCompletionTimes = { ...batchCompletionTimes };\n        const newStartTimes = { ...batchStartTimes };\n        let hasChanges = false;\n\n        Object.entries(getTasksForBatch).forEach(([batchNum, tasks]) => {\n            const batchNumber = parseInt(batchNum);\n            if (!newStartTimes[batchNumber]) {\n                newStartTimes[batchNumber] = {};\n                hasChanges = true;\n            }\n            if (!newCompletionTimes[batchNumber]) {\n                newCompletionTimes[batchNumber] = {};\n                hasChanges = true;\n            }\n\n            game.players.forEach(player => {\n                const playerTasks = tasks.filter(t => t.assigned_to === player.id);\n                if (playerTasks.length > 0 && \n                    playerTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                    !newCompletionTimes[batchNumber][player.id]) {\n                    const batchStartTime = newStartTimes[batchNumber]?.[batchNumber];\n                    newCompletionTimes[batchNumber][player.id] = Date.now() - batchStartTime;\n                    hasChanges = true;\n                }\n            });\n        });\n\n        // 只在有变化时更新状态\n        if (hasChanges) {\n            setBatchStartTimes(newStartTimes);\n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.players, getTasksForBatch, startTime]);\n\n    useEffect(() => {\n        if (game?.tasks && startTime) {\n            const newStats = { ...batchStats };\n            \n            // 遍历每个批次\n            for (let batchNum = 1; batchNum <= (game.max_batches || 0); batchNum++) {\n                if (!newStats[batchNum]) {\n                    newStats[batchNum] = {};\n                }\n                \n                // 遍历每个玩家\n                game.players.forEach(player => {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const completedTasks = batchTasks.filter(t => \n                        t.status === TaskStatus.COMPLETED\n                    );\n                    \n                    // 如果这个批次的所有任务都完成了，记录完成时间\n                    if (batchTasks.length > 0 && completedTasks.length === batchTasks.length) {\n                        // 只在第一次完成时记录时间\n                        if (!newStats[batchNum][player.id]) {\n                            newStats[batchNum][player.id] = {\n                                completionTime: elapsedTime,\n                                tasksCompleted: completedTasks.length,\n                                totalTasks: batchTasks.length\n                            };\n                        }\n                    } else if (batchTasks.length > 0) {\n                        // 更新进行中的任务状态\n                        newStats[batchNum][player.id] = {\n                            completionTime: 0,\n                            tasksCompleted: completedTasks.length,\n                            totalTasks: batchTasks.length\n                        };\n                    }\n                });\n            }\n            \n            setBatchStats(newStats);\n        }\n    }, [game?.tasks, startTime, elapsedTime]);\n\n    // 修改统计页面中的完成时间显示\n    const renderBatchStatistics = (batchNum: number, player: Player) => {\n        const stats = batchStats[batchNum]?.[player.id];\n        \n        return (\n            <TableRow key={player.id}>\n                <TableCell>{player.name}</TableCell>\n                <TableCell align=\"right\">\n                    {stats?.completionTime ? formatTimeFromMs(stats.completionTime) : '-'}\n                </TableCell>\n                <TableCell align=\"right\">\n                    {stats?.tasksCompleted}/{stats?.totalTasks || 0}\n                </TableCell>\n            </TableRow>\n        );\n    };\n\n    // 渲染主菜单\n    const renderMainMenu = () => (\n        <Card sx={{\n            maxWidth: 600,\n            width: '100%',\n            mx: 'auto',\n            mt: 4\n        }}>\n            {/* Top section with title and subtitle */}\n            <Box sx={{\n                background: 'linear-gradient(180deg, #f5f9ff 0%, #e8f3ff 100%)',\n                p: 4,\n                borderTopLeftRadius: 8,\n                borderTopRightRadius: 8,\n                position: 'relative'\n            }}>\n                <IconButton\n                    onClick={() => setShowHelpDialog(true)}\n                    sx={{\n                        position: 'absolute',\n                        top: 8,\n                        right: 8,\n                        color: 'primary.main'\n                    }}\n                >\n                    <HelpIcon />\n                </IconButton>\n                <Typography variant=\"h3\" sx={{\n                    fontWeight: 'bold',\n                    background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n                    WebkitBackgroundClip: 'text',\n                    WebkitTextFillColor: 'transparent',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n                    textAlign: 'center',\n                    mb: 1\n                }}>\n                    Online Multiplayer Coin Game\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"text.secondary\" align=\"center\">\n                    Flip coins with your friends in this multiplayer game!\n                </Typography>\n            </Box>\n\n            {/* Bottom section with form */}\n            <Box sx={{\n                background: '#ffffff',\n                p: 4,\n                borderBottomLeftRadius: 8,\n                borderBottomRightRadius: 8\n            }}>\n                <Tabs value={activeTab} onChange={(e, newValue) => {\n                    setActiveTab(newValue as TabType);\n                    // 切换标签时也清除输入\n                    setPlayerName('');\n                    setPlayerCount(2);\n                    setJoinGameId('');\n                    setError(null);\n                }} sx={{ mb: 3 }}>\n                    <Tab label=\"CREATE GAME\" />\n                    <Tab label=\"JOIN GAME\" />\n                </Tabs>\n\n                {activeTab === 0 ? (\n                    // Create game form\n                    <Box component=\"form\" onSubmit={handleCreateGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Number of Players\"\n                            type=\"number\"\n                            required\n                            value={playerCount}\n                            onChange={(e) => setPlayerCount(Number(e.target.value))}\n                            inputProps={{ min: 2, max: 5 }}\n                            helperText=\"Minimum 2\"\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || playerCount < 2 || playerCount > 5}\n                        >\n                            Create Game\n                        </Button>\n                    </Box>\n                ) : (\n                    // Join game form\n                    <Box component=\"form\" onSubmit={handleJoinGame}>\n                        <TextField\n                            fullWidth\n                            label=\"Your Name\"\n                            required\n                            value={playerName}\n                            onChange={(e) => setPlayerName(e.target.value)}\n                            sx={{ mb: 2 }}\n                            autoComplete=\"off\"\n                        />\n                        <TextField\n                            fullWidth\n                            label=\"Game Code\"\n                            required\n                            value={joinGameId}\n                            onChange={(e) => setJoinGameId(e.target.value)}\n                            sx={{ mb: 3 }}\n                            autoComplete=\"off\"\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={!playerName || !joinGameId}\n                        >\n                            Join Game\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        </Card>\n    );\n\n    const renderHelpDialog = () => {\n        return (\n            <Dialog\n                open={showHelpDialog}\n                onClose={() => setShowHelpDialog(false)}\n                maxWidth=\"md\"\n                fullWidth\n            >\n                <DialogTitle>\n                    Game Instructions\n                </DialogTitle>\n                <DialogContent>\n                    <List>\n                        <ListItem>\n                            <ListItemText\n                                primary=\"Game Overview\"\n                                secondary=\"This is a multiplayer coin flipping game where players take turns flipping coins to complete specific patterns.\"\n                            />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText\n                                primary=\"Game Setup\"\n                                secondary=\"1. Create a new game or join an existing one using the game code\n                                         2. Wait for all players to join\n                                         3. The game creator can start the game when everyone is ready\"\n                            />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText\n                                primary=\"Gameplay\"\n                                secondary=\"1. Each player takes turns flipping coins\n                                         2. The goal is to flip coins to match the required pattern\n                                         3. Complete all batches to win the game\n                                         4. The game tracks completion time for each round\"\n                            />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText\n                                primary=\"Controls\"\n                                secondary=\"1. Click on coins to flip them\n                                         2. Use the 'Complete Batch' button when you've finished a batch\n                                         3. The game automatically tracks your progress\"\n                            />\n                        </ListItem>\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setShowHelpDialog(false)} color=\"primary\">\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const renderGame = () => {\n        if (!game) return null;\n        \n        return (\n            <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n                {/* 游戏头部信息 */}\n                <Box sx={{ \n                    display: 'flex', \n                    justifyContent: 'space-between', \n                    alignItems: 'center',\n                    mb: 3\n                }}>\n                    <Box>\n                        <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                            Game ID: {game.id}\n                        </Typography>\n                        <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                            Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                        </Typography>\n                    </Box>\n                </Box>\n\n                {/* 开始游戏按钮 */}\n                {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleStartGame}\n                        sx={{ mb: 3 }}\n                    >\n                        Start Game\n                    </Button>\n                )}\n\n                {/* 游戏内容 */}\n                <Grid container spacing={3}>\n                    {/* Left column: Player cards */}\n                    <Grid item xs={12} md={7}>\n                        <Stack spacing={3}>\n                            {game.players.map(renderPlayer)}\n                        </Stack>\n                    </Grid>\n\n                    {/* Right column: Results and statistics */}\n                    <Grid item xs={12} md={5}>\n                        {renderStatistics()}\n                    </Grid>\n                </Grid>\n\n                {/* 返回主菜单按钮 - 只在游戏完成时显示 */}\n                {game.status === 'completed' && (\n                    <Box sx={{ mt: 4, textAlign: 'center' }}>\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleReturnToMainMenu}\n                            sx={{\n                                minWidth: 200,\n                                borderRadius: 2\n                            }}\n                        >\n                            Return to Main Menu\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        );\n    };\n\n    // 获取每轮需要翻转的硬币数量\n    const getRequiredCoinsForBatch = (batchNum: number): number => {\n        return 20; // 所有批次都需要20个硬币\n    };\n\n    // 获取每轮的子批次结构\n    const getBatchStructure = (batchNum: number): { subBatchIndex: number, coinsCount: number }[] => {\n        const structure = {\n            1: [{ subBatchIndex: 0, coinsCount: 20 }],  // 第1轮：1个批次×20枚\n            2: [  // 第2轮：2个批次×10枚\n                { subBatchIndex: 0, coinsCount: 10 },\n                { subBatchIndex: 1, coinsCount: 10 }\n            ],\n            3: [  // 第3轮：4个批次×5枚\n                { subBatchIndex: 0, coinsCount: 5 },\n                { subBatchIndex: 1, coinsCount: 5 },\n                { subBatchIndex: 2, coinsCount: 5 },\n                { subBatchIndex: 3, coinsCount: 5 }\n            ],\n            4: Array.from({ length: 10 }, (_, i) => ({  // 第4轮：10个批次×2枚\n                subBatchIndex: i,\n                coinsCount: 2\n            }))\n        };\n        return structure[batchNum as keyof typeof structure] || [];\n    };\n\n    // 获取当前子批次的硬币数量\n    const getSubBatchSize = (batchNum: number, subBatchIndex: number): number => {\n        const structure = getBatchStructure(batchNum);\n        const subBatch = structure.find(sb => sb.subBatchIndex === subBatchIndex);\n        return subBatch?.coinsCount || 0;\n    };\n\n    // 修改isSubBatchComplete函数\n    const isSubBatchComplete = (batchNum: number, subBatchIndex: number, currentPlayerId: string): boolean => {\n        if (!game) return false;\n        const subBatchTasks = game.tasks.filter(t => \n            t.batch_number === batchNum && \n            t.sub_batch_number === subBatchIndex &&\n            t.assigned_to === currentPlayerId\n        );\n        const flippedCount = subBatchTasks.filter(t => flippedCoins[currentPlayerId]?.includes(t.id)).length;\n        return flippedCount >= getSubBatchSize(batchNum, subBatchIndex);\n    };\n\n    // 添加错误处理函数\n    const handleGameUpdate = (updatedGame: GameType) => {\n        setGame(updatedGame);\n        if (updatedGame.status === 'completed' && !endTime) {\n            setEndTime(Date.now());\n        }\n    };\n\n    // 添加创建游戏的处理函数\n    const handleCreateGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            // 固定为4轮游戏，每轮20个硬币\n            const gameId = await gameService.createGame(playerCount, 4, 20);\n            if (gameId) {\n                // 加入游戏\n                const playerId = await gameService.joinGame(gameId, playerName);\n                \n                // 更新状态\n                setGameId(gameId);\n                setPlayerId(playerId);\n                \n                // 创建WebSocket连接\n                const ws = new WebSocketService(\n                    gameId,\n                    playerName,\n                    handleGameUpdate,\n                    syncFlippedCoins\n                );\n                setWsService(ws);\n                \n                // 获取初始游戏状态\n                const initialGameState = await gameService.getGameState(gameId);\n                setGame(initialGameState);\n                \n                // 设置开始时间\n                setStartTime(Date.now());\n                \n                console.log('Game created successfully:', { gameId, playerId });\n            }\n        } catch (err) {\n            console.error('Error creating game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to create game');\n        }\n    };\n\n    // 添加加入游戏的处理函数\n    const handleJoinGame = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            setError(null);\n            if (joinGameId) {\n                // 检查游戏是否存在\n                const exists = await gameService.checkGameExists(joinGameId);\n                if (!exists) {\n                    setError('Game not found');\n                    return;\n                }\n                \n                // 加入游戏\n                const playerId = await gameService.joinGame(joinGameId, playerName);\n                \n                // 更新状态\n                setGameId(joinGameId);\n                setPlayerId(playerId);\n                \n                // 创建WebSocket连接\n                const ws = new WebSocketService(\n                    joinGameId,\n                    playerName,\n                    handleGameUpdate,\n                    syncFlippedCoins\n                );\n                setWsService(ws);\n                \n                // 获取游戏状态\n                const gameState = await gameService.getGameState(joinGameId);\n                setGame(gameState);\n                \n                // 设置开始时间\n                setStartTime(Date.now());\n                \n                console.log('Joined game successfully:', { gameId: joinGameId, playerId });\n            }\n        } catch (err) {\n            console.error('Error joining game:', err);\n            setError(err instanceof Error ? err.message : 'Failed to join game');\n        }\n    };\n\n    // 添加开始游戏的处理函数\n    const handleStartGame = async () => {\n        if (!gameId) return;\n        \n        try {\n            await gameService.startGame(gameId);\n            const currentTime = Date.now();\n            setStartTime(currentTime);\n            setBatchStartTimes(prev => ({\n                ...prev,\n                1: { 1: currentTime }\n            }));\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Failed to start game');\n        }\n    };\n\n    // 修改handleCompleteSubBatch函数，记录永久翻转状态\n    const handleCompleteSubBatch = async (batchNum: number, subBatchIndex: number) => {\n        if (!game || !playerId || !wsService) return;\n        \n        try {\n            if (!canExecuteBatch(batchNum, subBatchIndex)) {\n                setError('Please complete previous batches first');\n                return;\n            }\n\n            const subBatchTasks = game.tasks.filter(t => \n                t.batch_number === batchNum && \n                t.sub_batch_number === subBatchIndex &&\n                t.assigned_to === playerId\n            );\n\n            const buttonKey = `${playerId}-${batchNum}-${subBatchIndex}`;\n            setCompletedSubBatches(prev => {\n                const newSet = new Set(Array.from(prev));\n                newSet.add(buttonKey);\n                return newSet;\n            });\n\n            // 完成当前子批次的任务\n            for (const task of subBatchTasks) {\n                await wsService.completeTask(task.id);\n            }\n\n            // 检查是否完成了当前批次的所有子批次\n            const allSubBatchesInCurrentBatch = game.tasks.filter(t =>\n                t.batch_number === batchNum &&\n                t.assigned_to === playerId\n            );\n\n            const allSubBatchesCompleted = allSubBatchesInCurrentBatch.every(t =>\n                t.status === TaskStatus.COMPLETED\n            );\n\n            // 如果完成了当前批次的所有子批次，设置下一批次的开始时间\n            if (allSubBatchesCompleted && batchNum < game.max_batches) {\n                const nextBatchNum = batchNum + 1;\n                const currentTime = Date.now();\n                setBatchStartTimes(prev => ({\n                    ...prev,\n                    [nextBatchNum]: {\n                        ...prev[nextBatchNum],\n                        [nextBatchNum]: currentTime\n                    }\n                }));\n                // 更新全局startTime\n                setStartTime(currentTime);\n            }\n\n            // 更新永久翻转状态\n            const permanentFlips = permanentFlippedCoins[playerId] || [];\n            const currentFlips = flippedCoins[playerId] || [];\n            const allFlips = Array.from(new Set([...permanentFlips, ...currentFlips]));\n\n            setFlippedCoins(prev => ({\n                ...prev,\n                [playerId]: allFlips\n            }));\n\n            // 保存当前批次的累计时间\n            const batchStartTime = (batchStartTimes[batchNum] || {})[batchNum];\n            if (batchStartTime) {\n                const previousTime = (batchElapsedTimes[batchNum] || {})[playerId] || 0;\n                const elapsedTime = currentTime - batchStartTime + previousTime;\n                setBatchElapsedTimes(prev => ({\n                    ...prev,\n                    [batchNum]: {\n                        ...(prev[batchNum] || {}),\n                        [playerId]: elapsedTime\n                    }\n                }));\n            }\n\n        } catch (error) {\n            console.error('Error completing sub-batch:', error);\n            setError('Failed to complete sub-batch');\n        }\n    };\n\n    // 添加一个新的useEffect来处理新任务的接收\n    useEffect(() => {\n        if (!game || !playerId) return;\n\n        const currentPlayer = game.players.find(p => p.id === playerId);\n        if (!currentPlayer) return;\n\n        const currentBatchTasks = game.tasks.filter(t => \n            t.batch_number === currentPlayer.current_batch && \n            t.assigned_to === playerId\n        );\n\n        // 当收到新的PENDING任务时，设置新的开始时间\n        if (currentBatchTasks.length > 0 && \n            currentBatchTasks.every(t => t.status === TaskStatus.PENDING) &&\n            currentPlayer.status === PlayerStatus.ACTIVE) {\n            const currentTime = Date.now();\n            const currentBatch = currentPlayer.current_batch;\n            \n            // 设置新批次的开始时间\n            setBatchStartTimes(prev => ({\n                ...prev,\n                [currentBatch]: {\n                    ...(prev[currentBatch] || {}),\n                    [currentBatch]: currentTime\n                }\n            }));\n        }\n    }, [game?.tasks, game?.players, playerId]);\n\n    // 添加一个新的useEffect来监听玩家状态变化\n    useEffect(() => {\n        if (!game || !playerId) return;\n\n        const currentPlayer = game.players.find(p => p.id === playerId);\n        if (!currentPlayer) return;\n\n        // 当玩家状态变为ACTIVE时，立即开始计时\n        if (currentPlayer.status === PlayerStatus.ACTIVE) {\n            const currentTime = Date.now();\n            const currentBatch = currentPlayer.current_batch;\n            \n            // 设置新的开始时间\n            setBatchStartTimes(prev => ({\n                ...prev,\n                [currentBatch]: {\n                    ...(prev[currentBatch] || {}),\n                    [currentBatch]: currentTime\n                }\n            }));\n        }\n    }, [game?.players, playerId]);\n\n    return (\n        <Container>\n            {!gameId ? (\n                <>\n                    {renderMainMenu()}\n                    {renderHelpDialog()}\n                </>\n            ) : game ? (\n                renderGame()\n            ) : (\n                <CircularProgress />\n            )}\n            \n            {error && (\n                <Alert severity=\"error\" sx={{ mt: 2 }}>\n                    {error}\n                </Alert>\n            )}\n        </Container>\n    );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}