{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000';\nexport const gameService = {\n  async createGame(playerCount, maxBatches, tasksPerBatch) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/games/create?player_count=${playerCount}&max_batches=${maxBatches}&tasks_per_batch=${tasksPerBatch}`, {\n        method: 'POST'\n      });\n      const data = await response.json();\n      return data.game_id;\n    } catch (error) {\n      console.error('Error creating game:', error);\n      throw error;\n    }\n  },\n  async joinGame(gameId, playerName) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/games/${gameId}/join?player_name=${encodeURIComponent(playerName)}`, {\n        method: 'POST'\n      });\n      const data = await response.json();\n      return data.player_id;\n    } catch (error) {\n      console.error('Error joining game:', error);\n      throw error;\n    }\n  },\n  async startGame(gameId) {\n    try {\n      await fetch(`${API_BASE_URL}/games/${gameId}/start`, {\n        method: 'POST'\n      });\n    } catch (error) {\n      console.error('Error starting game:', error);\n      throw error;\n    }\n  },\n  async getGameState(gameId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/games/${gameId}`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting game state:', error);\n      throw error;\n    }\n  },\n  async checkGameExists(gameId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/games/${gameId}/exists`);\n      const data = await response.json();\n      return data.exists;\n    } catch (error) {\n      console.error('Error checking game existence:', error);\n      throw error;\n    }\n  }\n};\nexport class WebSocketService {\n  constructor(gameId, playerId, onGameUpdate) {\n    this.ws = null;\n    this.gameId = void 0;\n    this.playerId = void 0;\n    this.onGameUpdate = void 0;\n    this.gameId = gameId;\n    this.playerId = playerId;\n    this.onGameUpdate = onGameUpdate;\n  }\n  connect() {\n    const wsUrl = `ws://localhost:8000/ws/${this.gameId}/${this.playerId}`;\n    this.ws = new WebSocket(wsUrl);\n    this.ws.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'game_update' || data.type === 'game_started') {\n        this.onGameUpdate(data.data);\n      }\n    };\n    this.ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  async flipCoin(taskId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/games/${this.gameId}/flip/${taskId}`, {\n        method: 'POST'\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('Error flipping coin:', error);\n      return false;\n    }\n  }\n  async completeTask(taskId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/games/${this.gameId}/complete/${taskId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          player_id: this.playerId\n        })\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('Error completing task:', error);\n      return false;\n    }\n  }\n}","map":{"version":3,"names":["API_BASE_URL","gameService","createGame","playerCount","maxBatches","tasksPerBatch","response","fetch","method","data","json","game_id","error","console","joinGame","gameId","playerName","encodeURIComponent","player_id","startGame","getGameState","checkGameExists","exists","WebSocketService","constructor","playerId","onGameUpdate","ws","connect","wsUrl","WebSocket","onmessage","event","JSON","parse","type","onerror","disconnect","close","flipCoin","taskId","ok","completeTask","headers","body","stringify"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game 2/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\nexport const gameService = {\n    async createGame(playerCount: number, maxBatches: number, tasksPerBatch: number): Promise<string> {\n        try {\n            const response = await fetch(`${API_BASE_URL}/games/create?player_count=${playerCount}&max_batches=${maxBatches}&tasks_per_batch=${tasksPerBatch}`, {\n                method: 'POST'\n            });\n            const data = await response.json();\n            return data.game_id;\n        } catch (error) {\n            console.error('Error creating game:', error);\n            throw error;\n        }\n    },\n\n    async joinGame(gameId: string, playerName: string): Promise<string> {\n        try {\n            const response = await fetch(`${API_BASE_URL}/games/${gameId}/join?player_name=${encodeURIComponent(playerName)}`, {\n                method: 'POST'\n            });\n            const data = await response.json();\n            return data.player_id;\n        } catch (error) {\n            console.error('Error joining game:', error);\n            throw error;\n        }\n    },\n\n    async startGame(gameId: string): Promise<void> {\n        try {\n            await fetch(`${API_BASE_URL}/games/${gameId}/start`, {\n                method: 'POST'\n            });\n        } catch (error) {\n            console.error('Error starting game:', error);\n            throw error;\n        }\n    },\n\n    async getGameState(gameId: string): Promise<Game> {\n        try {\n            const response = await fetch(`${API_BASE_URL}/games/${gameId}`);\n            return await response.json();\n        } catch (error) {\n            console.error('Error getting game state:', error);\n            throw error;\n        }\n    },\n\n    async checkGameExists(gameId: string): Promise<boolean> {\n        try {\n            const response = await fetch(`${API_BASE_URL}/games/${gameId}/exists`);\n            const data = await response.json();\n            return data.exists;\n        } catch (error) {\n            console.error('Error checking game existence:', error);\n            throw error;\n        }\n    }\n};\n\nexport class WebSocketService {\n    private ws: WebSocket | null = null;\n    private gameId: string;\n    private playerId: string;\n    private onGameUpdate: (game: Game) => void;\n\n    constructor(gameId: string, playerId: string, onGameUpdate: (game: Game) => void) {\n        this.gameId = gameId;\n        this.playerId = playerId;\n        this.onGameUpdate = onGameUpdate;\n    }\n\n    connect() {\n        const wsUrl = `ws://localhost:8000/ws/${this.gameId}/${this.playerId}`;\n        this.ws = new WebSocket(wsUrl);\n\n        this.ws.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            if (data.type === 'game_update' || data.type === 'game_started') {\n                this.onGameUpdate(data.data);\n            }\n        };\n\n        this.ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n    }\n\n    disconnect() {\n        if (this.ws) {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n\n    async flipCoin(taskId: string): Promise<boolean> {\n        try {\n            const response = await fetch(`${API_BASE_URL}/games/${this.gameId}/flip/${taskId}`, {\n                method: 'POST'\n            });\n            return response.ok;\n        } catch (error) {\n            console.error('Error flipping coin:', error);\n            return false;\n        }\n    }\n\n    async completeTask(taskId: string): Promise<boolean> {\n        try {\n            const response = await fetch(`${API_BASE_URL}/games/${this.gameId}/complete/${taskId}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ player_id: this.playerId })\n            });\n            return response.ok;\n        } catch (error) {\n            console.error('Error completing task:', error);\n            return false;\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}