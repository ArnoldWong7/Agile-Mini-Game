{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Tabs, Tab, Alert, Chip, keyframes, Stack, TableContainer, Table, TableHead, TableBody, TableCell, TableRow, Paper } from '@mui/material';\nimport { TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Game = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  var _game$players$;\n  const [gameId, setGameId] = useState(initialGameId);\n  const [game, setGame] = useState(null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerId, setPlayerId] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n  const [playerCount, setPlayerCount] = useState(2);\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showResultPage, setShowResultPage] = useState(false);\n  const [batchCompletionTimes, setBatchCompletionTimes] = useState({});\n  const [batchStartTimes, setBatchStartTimes] = useState({});\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, updatedGame => {\n        console.log('Game state updated:', updatedGame);\n        setGame(updatedGame);\n      });\n      service.connect();\n      setWsService(service);\n\n      // Cleanup function\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  useEffect(() => {\n    let timerInterval = null;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && startTime) {\n      timerInterval = setInterval(() => {\n        setCurrentTime(Date.now() - startTime);\n      }, 1000);\n    }\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'completed' && startTime && !endTime) {\n      setEndTime(Date.now());\n      setShowResultPage(true);\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime, endTime]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && game.players) {\n      const newStartTimes = {\n        ...batchStartTimes\n      };\n      const newCompletionTimes = {\n        ...batchCompletionTimes\n      };\n      game.players.forEach(player => {\n        if (!newStartTimes[player.id]) {\n          newStartTimes[player.id] = {};\n        }\n        if (!newCompletionTimes[player.id]) {\n          newCompletionTimes[player.id] = {};\n        }\n\n        // Track when a player starts a new batch\n        if (player.current_batch && !newStartTimes[player.id][player.current_batch]) {\n          newStartTimes[player.id][player.current_batch] = Date.now();\n        }\n\n        // Calculate completion times for each batch\n        for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n          var _newStartTimes$player;\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const startedAt = (_newStartTimes$player = newStartTimes[player.id]) === null || _newStartTimes$player === void 0 ? void 0 : _newStartTimes$player[batchNum];\n          if (startedAt && batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[player.id][batchNum]) {\n            newCompletionTimes[player.id][batchNum] = Date.now() - startedAt;\n          }\n        }\n      });\n      setBatchStartTimes(newStartTimes);\n      setBatchCompletionTimes(newCompletionTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players]);\n  const handleCreateGame = async () => {\n    if (!playerName) {\n      setError('Please enter your name first');\n      return;\n    }\n    try {\n      const newGameId = await gameService.createGame(playerCount, maxBatches, coinsPerBatch);\n      setGameId(newGameId);\n\n      // Automatically join the game as the creator\n      const newPlayerId = await gameService.joinGame(newGameId, playerName);\n      setPlayerId(newPlayerId);\n\n      // Get initial game state\n      const gameState = await gameService.getGameState(newGameId);\n      setGame(gameState);\n\n      // Reset all input fields\n      setPlayerName('');\n      setPlayerCount(2);\n      setMaxBatches(3);\n      setCoinsPerBatch(2);\n      setJoinGameId('');\n      setError(null);\n    } catch (error) {\n      setError('Failed to create game. Please try again.');\n      console.error('Error creating game:', error);\n    }\n  };\n  const handleJoinGame = async () => {\n    if (!playerName) {\n      setError('Please enter player name');\n      return;\n    }\n    const targetGameId = gameId || joinGameId;\n    if (!targetGameId) {\n      setError('Please enter game ID');\n      return;\n    }\n    try {\n      const exists = await gameService.checkGameExists(targetGameId);\n      if (!exists) {\n        setError('Game not found');\n        return;\n      }\n      const newPlayerId = await gameService.joinGame(targetGameId, playerName);\n      setPlayerId(newPlayerId);\n      setGameId(targetGameId);\n      setShowJoinDialog(false);\n      const gameState = await gameService.getGameState(targetGameId);\n      setGame(gameState);\n\n      // Reset all input fields\n      setPlayerName('');\n      setPlayerCount(2);\n      setMaxBatches(3);\n      setCoinsPerBatch(2);\n      setJoinGameId('');\n      setError(null);\n    } catch (error) {\n      setError('Failed to join game. Please try again.');\n      console.error('Error joining game:', error);\n    }\n  };\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      setError(null);\n    } catch (error) {\n      setError('Failed to start game. Please try again.');\n      console.error('Error starting game:', error);\n    }\n  };\n  const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n  const [flippingStates, setFlippingStates] = useState({});\n  const renderCoin = (type, isFlipping, isSmall = false, onClick, taskId) => {\n    const flipState = taskId ? flippingStates[taskId] : undefined;\n    const displayType = flipState !== null && flipState !== void 0 && flipState.showOpposite ? type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS : type;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: isSmall ? 20 : 32,\n        height: isSmall ? 20 : 32,\n        borderRadius: '50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n        border: `${isSmall ? 1 : 2}px solid #B8860B`,\n        color: '#704214',\n        fontWeight: 'bold',\n        fontSize: isSmall ? '0.6rem' : '0.8rem',\n        animation: isFlipping ? `${flipAnimation} 0.6s ease-in-out` : 'none',\n        perspective: 1000,\n        mb: isSmall ? 0 : 1,\n        position: 'relative',\n        cursor: onClick ? 'pointer' : 'default',\n        transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n        '&:hover': onClick ? {\n          transform: 'scale(1.05)',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n        } : {},\n        '&:active': onClick ? {\n          transform: 'scale(0.95)'\n        } : {},\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          borderRadius: '50%',\n          background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n          pointerEvents: 'none'\n        }\n      },\n      onClick: onClick,\n      children: displayType === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteTask = taskId => {\n    if (wsService) {\n      // 开始翻转动画\n      setFlippingStates(prev => ({\n        ...prev,\n        [taskId]: {\n          isFlipping: true,\n          showOpposite: false\n        }\n      }));\n\n      // 在动画中途改变显示的面\n      setTimeout(() => {\n        setFlippingStates(prev => ({\n          ...prev,\n          [taskId]: {\n            isFlipping: true,\n            showOpposite: true\n          }\n        }));\n      }, 300);\n\n      // 动画结束后发送完成信息\n      setTimeout(() => {\n        wsService.completeTask(taskId);\n        setFlippingStates(prev => {\n          const newState = {\n            ...prev\n          };\n          delete newState[taskId];\n          return newState;\n        });\n      }, 600);\n    }\n  };\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n  const renderTaskRow = (tasks, playerName) => {\n    // 将任务分组为每行最多5个\n    const rows = [];\n    for (let i = 0; i < tasks.length; i += 5) {\n      rows.push(tasks.slice(i, i + 5));\n    }\n    return rows.map((rowTasks, rowIndex) => /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        gap: 1,\n        mb: 1,\n        flexWrap: 'nowrap',\n        justifyContent: 'flex-start'\n      },\n      children: rowTasks.map(task => {\n        var _flippingStates$task$, _flippingStates$task$2;\n        return /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            width: 100,\n            minWidth: 100,\n            backgroundColor: 'background.paper',\n            position: 'relative',\n            overflow: 'visible'\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            sx: {\n              p: '8px !important',\n              pb: '8px !important',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center'\n            },\n            children: [renderCoin(task.type, ((_flippingStates$task$ = flippingStates[task.id]) === null || _flippingStates$task$ === void 0 ? void 0 : _flippingStates$task$.isFlipping) || false, false, task.status === TaskStatus.PENDING && task.assigned_to === playerId && !((_flippingStates$task$2 = flippingStates[task.id]) !== null && _flippingStates$task$2 !== void 0 && _flippingStates$task$2.isFlipping) ? () => handleCompleteTask(task.id) : undefined, task.id), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: '100%',\n                mt: 0.5\n              },\n              children: /*#__PURE__*/_jsxDEV(Chip, {\n                label: task.status,\n                size: \"small\",\n                sx: {\n                  backgroundColor: getTaskStatusColor(task.status),\n                  color: 'white',\n                  fontWeight: 500,\n                  width: '100%',\n                  height: '20px',\n                  '& .MuiChip-label': {\n                    fontSize: '0.65rem',\n                    padding: '0 4px'\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 25\n          }, this)\n        }, `${task.id}-${playerName}-${task.batch_number}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 21\n        }, this);\n      })\n    }, `row-${rowIndex}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 13\n    }, this));\n  };\n  const renderPlayer = player => {\n    var _player$completed_tas;\n    const currentBatchTarget = player.current_tasks.length > 0 ? player.current_tasks[0].type : (_player$completed_tas = player.completed_tasks.find(t => t.batch_number === player.current_batch)) === null || _player$completed_tas === void 0 ? void 0 : _player$completed_tas.type;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        height: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        sx: {\n          p: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              color: 'primary.main',\n              fontSize: '1.1rem'\n            },\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: player.status,\n            size: \"small\",\n            color: getPlayerStatusColor(player.status),\n            sx: {\n              fontWeight: 500,\n              height: '24px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: 1,\n                mb: 1,\n                backgroundColor: 'rgba(33, 150, 243, 0.1)',\n                p: 1,\n                borderRadius: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  fontWeight: 500\n                },\n                children: [\"Current Batch: \", player.current_batch, \" / \", game === null || game === void 0 ? void 0 : game.max_batches]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 33\n              }, this), currentBatchTarget && /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: 0.5\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  sx: {\n                    fontWeight: 500\n                  },\n                  children: \"Target:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 463,\n                  columnNumber: 41\n                }, this), renderCoin(currentBatchTarget, false, true)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"textSecondary\",\n              children: \"Current Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                fontSize: '1.1rem'\n              },\n              children: player.current_tasks.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"textSecondary\",\n              children: \"Completed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                fontSize: '1.1rem'\n              },\n              children: player.completed_tasks.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              color: 'primary.main',\n              fontWeight: 500,\n              mb: 1\n            },\n            children: \"Current Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 25\n          }, this), renderTaskRow(player.current_tasks, player.name)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 21\n        }, this), player.completed_tasks.length > 0 && game && player.order === game.players.length - 1 && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              color: 'primary.main',\n              fontWeight: 500,\n              mb: 1\n            },\n            children: \"Completed Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 29\n          }, this), renderTaskRow(player.completed_tasks, player.name)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 13\n    }, this);\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n  const formatTime = milliseconds => {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTime(totalTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteGame = () => {\n    setShowResultPage(true);\n  };\n  const handleReturnToMain = () => {\n    window.location.reload();\n  };\n  const renderResultPage = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 600,\n          width: '100%',\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            mb: 3,\n            color: 'primary.main'\n          },\n          children: \"Game Complete! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            mb: 4\n          },\n          children: [\"Total Time: \", formatTime(totalTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMain,\n          size: \"large\",\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 13\n    }, this);\n  };\n  const renderStatistics = () => {\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mb: 2,\n          color: 'primary.main'\n        },\n        children: \"Game Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 17\n      }, this), Array.from({\n        length: game.max_batches\n      }, (_, i) => i + 1).map(batchNum => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: [\"Batch \", batchNum]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          sx: {\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Player\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 634,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 635,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 636,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 633,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [game.players.map(player => {\n                var _batchStartTimes$play, _batchCompletionTimes;\n                const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n                const isCompleted = batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                const hasStarted = ((_batchStartTimes$play = batchStartTimes[player.id]) === null || _batchStartTimes$play === void 0 ? void 0 : _batchStartTimes$play[batchNum]) != null;\n                const completionTime = (_batchCompletionTimes = batchCompletionTimes[player.id]) === null || _batchCompletionTimes === void 0 ? void 0 : _batchCompletionTimes[batchNum];\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: player.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 651,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: completionTime ? formatTime(completionTime) : '-'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 652,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: /*#__PURE__*/_jsxDEV(Chip, {\n                      label: isCompleted ? 'Completed' : hasStarted ? 'In Progress' : 'Pending',\n                      size: \"small\",\n                      color: isCompleted ? 'success' : hasStarted ? 'primary' : 'default'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 656,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 655,\n                    columnNumber: 49\n                  }, this)]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 650,\n                  columnNumber: 45\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(TableRow, {\n                sx: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                },\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 666,\n                    columnNumber: 52\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 666,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: formatTime(Math.max(...game.players.map(p => {\n                      var _batchCompletionTimes2;\n                      return ((_batchCompletionTimes2 = batchCompletionTimes[p.id]) === null || _batchCompletionTimes2 === void 0 ? void 0 : _batchCompletionTimes2[batchNum]) || 0;\n                    })))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 668,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 667,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 674,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 665,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 25\n        }, this)]\n      }, batchNum, true, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 13\n    }, this);\n  };\n  if (showResultPage) {\n    return renderResultPage();\n  }\n  if (!gameId || !playerId) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          mb: 4,\n          mt: 4,\n          background: 'linear-gradient(45deg, #2196f3 30%, #21CBF3 90%)',\n          p: 3,\n          borderRadius: 2,\n          boxShadow: '0 3px 5px 2px rgba(33, 150, 243, .3)',\n          color: 'white',\n          width: '100%',\n          maxWidth: 800\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: \"Online Multiplayer Coin Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          children: \"Flip coins with your friends in this multiplayer game!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: '100%',\n          maxWidth: 800,\n          backgroundColor: 'white',\n          borderRadius: 2,\n          boxShadow: '0 3px 10px rgba(0,0,0,0.1)',\n          p: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tabs, {\n          value: activeTab,\n          onChange: handleTabChange,\n          sx: {\n            mb: 3,\n            borderBottom: 1,\n            borderColor: 'divider'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 736,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 21\n        }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          sx: {\n            mb: 2\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 25\n        }, this), activeTab === 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Your Name\",\n              value: playerName,\n              onChange: e => setPlayerName(e.target.value),\n              required: true,\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 749,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Number of Players\",\n              type: \"number\",\n              value: playerCount,\n              onChange: e => setPlayerCount(Number(e.target.value)),\n              inputProps: {\n                min: 2,\n                max: 5\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 760,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 759,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Number of Batches\",\n              type: \"number\",\n              value: maxBatches,\n              onChange: e => setMaxBatches(Number(e.target.value)),\n              inputProps: {\n                min: 1,\n                max: 10\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 772,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 771,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Coins per Batch\",\n              type: \"number\",\n              value: coinsPerBatch,\n              onChange: e => setCoinsPerBatch(Number(e.target.value)),\n              inputProps: {\n                min: 1,\n                max: 10\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 784,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 783,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleCreateGame,\n              disabled: !playerName,\n              sx: {\n                mt: 2\n              },\n              size: \"large\",\n              children: \"Create Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 796,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 795,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Game ID\",\n              value: joinGameId,\n              onChange: e => setJoinGameId(e.target.value.toUpperCase()),\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 810,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 809,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Player Name\",\n              value: playerName,\n              onChange: e => setPlayerName(e.target.value),\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 820,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 819,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleJoinGame,\n              sx: {\n                mt: 2\n              },\n              size: \"large\",\n              children: \"Join Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 830,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 829,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3,\n      backgroundColor: 'background.default',\n      minHeight: '100vh'\n    },\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 849,\n      columnNumber: 17\n    }, this), game && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 1,\n              color: 'primary.main'\n            },\n            children: [\"Game ID: \", game.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 863,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              color: 'text.primary'\n            },\n            children: [\"Game Status: \", game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 866,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 25\n        }, this), (game.status === 'in_progress' || game.status === 'completed') && startTime && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'text.secondary'\n          },\n          children: [\"Time: \", formatTime(game.status === 'completed' && endTime ? endTime - startTime : currentTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 871,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 856,\n        columnNumber: 21\n      }, this), game.status === 'waiting' && playerId === ((_game$players$ = game.players[0]) === null || _game$players$ === void 0 ? void 0 : _game$players$.id) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartGame,\n        sx: {\n          mb: 3\n        },\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 878,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 3,\n            children: game.players.map(renderPlayer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: renderStatistics()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 887,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 847,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"AoM64q2HGstRV/HgE/wvV6IO1+0=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","keyframes","Stack","TableContainer","Table","TableHead","TableBody","TableCell","TableRow","Paper","TaskStatus","PlayerStatus","TaskType","gameService","WebSocketService","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","gameId","initialGameId","_s","_game$players$","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","currentTime","setCurrentTime","showResultPage","setShowResultPage","batchCompletionTimes","setBatchCompletionTimes","batchStartTimes","setBatchStartTimes","service","updatedGame","console","log","connect","disconnect","status","Date","now","timerInterval","setInterval","clearInterval","tasks","players","newStartTimes","newCompletionTimes","forEach","player","id","current_batch","batchNum","max_batches","_newStartTimes$player","batchTasks","filter","t","batch_number","assigned_to","startedAt","length","every","COMPLETED","handleCreateGame","newGameId","createGame","newPlayerId","joinGame","gameState","getGameState","handleJoinGame","targetGameId","exists","checkGameExists","handleStartGame","startGame","flipAnimation","flippingStates","setFlippingStates","renderCoin","type","isFlipping","isSmall","onClick","taskId","flipState","undefined","displayType","showOpposite","HEADS","TAILS","sx","width","height","borderRadius","display","alignItems","justifyContent","backgroundColor","border","color","fontWeight","fontSize","animation","perspective","mb","position","cursor","transition","transform","boxShadow","content","top","left","right","bottom","background","pointerEvents","children","fileName","_jsxFileName","lineNumber","columnNumber","handleCompleteTask","prev","setTimeout","completeTask","newState","getPlayerStatusColor","ACTIVE","WAITING","IDLE","getTaskStatusColor","IN_PROGRESS","PENDING","renderTaskRow","rows","i","push","slice","map","rowTasks","rowIndex","gap","flexWrap","task","_flippingStates$task$","_flippingStates$task$2","minWidth","overflow","p","pb","flexDirection","mt","label","size","padding","renderPlayer","_player$completed_tas","currentBatchTarget","current_tasks","completed_tasks","find","variant","name","container","spacing","item","xs","order","handleTabChange","_","newValue","handleGameComplete","formatTime","milliseconds","seconds","Math","floor","minutes","remainingSeconds","toString","padStart","renderCompletionDialog","totalTime","open","onClose","PaperProps","textAlign","py","window","location","reload","handleCompleteGame","handleReturnToMain","renderResultPage","minHeight","maxWidth","renderStatistics","Array","from","component","align","_batchStartTimes$play","_batchCompletionTimes","isCompleted","hasStarted","completionTime","max","_batchCompletionTimes2","value","onChange","borderBottom","borderColor","severity","fullWidth","e","target","required","autoComplete","md","Number","inputProps","min","disabled","toUpperCase","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes,\n    Stack,\n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableCell,\n    TableRow,\n    Paper\n} from '@mui/material';\nimport { Game as GameType, Player, Task, TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\n\ninterface GameProps {\n    gameId?: string;\n}\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | undefined>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n    const [batchCompletionTimes, setBatchCompletionTimes] = useState<{\n        [playerId: string]: {\n            [batchNumber: number]: number;\n        };\n    }>({});\n    const [batchStartTimes, setBatchStartTimes] = useState<{\n        [playerId: string]: {\n            [batchNum: number]: number;\n        };\n    }>({});\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, (updatedGame) => {\n                console.log('Game state updated:', updatedGame);\n                setGame(updatedGame);\n            });\n            service.connect();\n            setWsService(service);\n\n            // Cleanup function\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && startTime) {\n            timerInterval = setInterval(() => {\n                setCurrentTime(Date.now() - startTime);\n            }, 1000);\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, startTime, endTime]);\n\n    useEffect(() => {\n        if (game?.tasks && game.players) {\n            const newStartTimes = { ...batchStartTimes };\n            const newCompletionTimes = { ...batchCompletionTimes };\n\n            game.players.forEach(player => {\n                if (!newStartTimes[player.id]) {\n                    newStartTimes[player.id] = {};\n                }\n                if (!newCompletionTimes[player.id]) {\n                    newCompletionTimes[player.id] = {};\n                }\n\n                // Track when a player starts a new batch\n                if (player.current_batch && !newStartTimes[player.id][player.current_batch]) {\n                    newStartTimes[player.id][player.current_batch] = Date.now();\n                }\n\n                // Calculate completion times for each batch\n                for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const startedAt = newStartTimes[player.id]?.[batchNum];\n                    if (startedAt && \n                        batchTasks.length > 0 && \n                        batchTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                        !newCompletionTimes[player.id][batchNum]) {\n                        newCompletionTimes[player.id][batchNum] = Date.now() - startedAt;\n                    }\n                }\n            });\n\n            setBatchStartTimes(newStartTimes);\n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.tasks, game?.players]);\n\n    const handleCreateGame = async () => {\n        if (!playerName) {\n            setError('Please enter your name first');\n            return;\n        }\n\n        try {\n            const newGameId = await gameService.createGame(playerCount, maxBatches, coinsPerBatch);\n            setGameId(newGameId);\n            \n            // Automatically join the game as the creator\n            const newPlayerId = await gameService.joinGame(newGameId, playerName);\n            setPlayerId(newPlayerId);\n            \n            // Get initial game state\n            const gameState = await gameService.getGameState(newGameId);\n            setGame(gameState);\n            \n            // Reset all input fields\n            setPlayerName('');\n            setPlayerCount(2);\n            setMaxBatches(3);\n            setCoinsPerBatch(2);\n            setJoinGameId('');\n            setError(null);\n        } catch (error) {\n            setError('Failed to create game. Please try again.');\n            console.error('Error creating game:', error);\n        }\n    };\n\n    const handleJoinGame = async () => {\n        if (!playerName) {\n            setError('Please enter player name');\n            return;\n        }\n\n        const targetGameId = gameId || joinGameId;\n        if (!targetGameId) {\n            setError('Please enter game ID');\n            return;\n        }\n\n        try {\n            const exists = await gameService.checkGameExists(targetGameId);\n            if (!exists) {\n                setError('Game not found');\n                return;\n            }\n\n            const newPlayerId = await gameService.joinGame(targetGameId, playerName);\n            setPlayerId(newPlayerId);\n            setGameId(targetGameId);\n            setShowJoinDialog(false);\n            const gameState = await gameService.getGameState(targetGameId);\n            setGame(gameState);\n            \n            // Reset all input fields\n            setPlayerName('');\n            setPlayerCount(2);\n            setMaxBatches(3);\n            setCoinsPerBatch(2);\n            setJoinGameId('');\n            setError(null);\n        } catch (error) {\n            setError('Failed to join game. Please try again.');\n            console.error('Error joining game:', error);\n        }\n    };\n\n    const handleStartGame = async () => {\n        if (!gameId) return;\n\n        try {\n            await gameService.startGame(gameId);\n            setError(null);\n        } catch (error) {\n            setError('Failed to start game. Please try again.');\n            console.error('Error starting game:', error);\n        }\n    };\n\n    const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n    const [flippingStates, setFlippingStates] = useState<{[key: string]: { isFlipping: boolean; showOpposite: boolean }}>({});\n\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void, taskId?: string) => {\n        const flipState = taskId ? flippingStates[taskId] : undefined;\n        const displayType = (flipState?.showOpposite ? (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) : type);\n        \n        return (\n            <Box\n                sx={{\n                    width: isSmall ? 20 : 32,\n                    height: isSmall ? 20 : 32,\n                    borderRadius: '50%',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                    border: `${isSmall ? 1 : 2}px solid #B8860B`,\n                    color: '#704214',\n                    fontWeight: 'bold',\n                    fontSize: isSmall ? '0.6rem' : '0.8rem',\n                    animation: isFlipping ? `${flipAnimation} 0.6s ease-in-out` : 'none',\n                    perspective: 1000,\n                    mb: isSmall ? 0 : 1,\n                    position: 'relative',\n                    cursor: onClick ? 'pointer' : 'default',\n                    transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n                    '&:hover': onClick ? {\n                        transform: 'scale(1.05)',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                    } : {},\n                    '&:active': onClick ? {\n                        transform: 'scale(0.95)'\n                    } : {},\n                    '&::after': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        borderRadius: '50%',\n                        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                        pointerEvents: 'none'\n                    }\n                }}\n                onClick={onClick}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    const handleCompleteTask = (taskId: string) => {\n        if (wsService) {\n            // 开始翻转动画\n            setFlippingStates(prev => ({\n                ...prev,\n                [taskId]: { isFlipping: true, showOpposite: false }\n            }));\n\n            // 在动画中途改变显示的面\n            setTimeout(() => {\n                setFlippingStates(prev => ({\n                    ...prev,\n                    [taskId]: { isFlipping: true, showOpposite: true }\n                }));\n            }, 300);\n\n            // 动画结束后发送完成信息\n            setTimeout(() => {\n                wsService.completeTask(taskId);\n                setFlippingStates(prev => {\n                    const newState = { ...prev };\n                    delete newState[taskId];\n                    return newState;\n                });\n            }, 600);\n        }\n    };\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    const renderTaskRow = (tasks: Task[], playerName: string) => {\n        // 将任务分组为每行最多5个\n        const rows: Task[][] = [];\n        for (let i = 0; i < tasks.length; i += 5) {\n            rows.push(tasks.slice(i, i + 5));\n        }\n\n        return rows.map((rowTasks, rowIndex) => (\n            <Box \n                key={`row-${rowIndex}`} \n                sx={{ \n                    display: 'flex', \n                    gap: 1,\n                    mb: 1,\n                    flexWrap: 'nowrap',\n                    justifyContent: 'flex-start'\n                }}\n            >\n                {rowTasks.map(task => (\n                    <Card \n                        key={`${task.id}-${playerName}-${task.batch_number}`} \n                        sx={{ \n                            width: 100,\n                            minWidth: 100,\n                            backgroundColor: 'background.paper',\n                            position: 'relative',\n                            overflow: 'visible'\n                        }}\n                    >\n                        <CardContent sx={{ \n                            p: '8px !important',\n                            pb: '8px !important',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                        }}>\n                            {renderCoin(\n                                task.type, \n                                flippingStates[task.id]?.isFlipping || false,\n                                false,\n                                task.status === TaskStatus.PENDING && task.assigned_to === playerId && !flippingStates[task.id]?.isFlipping\n                                    ? () => handleCompleteTask(task.id)\n                                    : undefined,\n                                task.id\n                            )}\n                            <Box sx={{ width: '100%', mt: 0.5 }}>\n                                <Chip\n                                    label={task.status}\n                                    size=\"small\"\n                                    sx={{\n                                        backgroundColor: getTaskStatusColor(task.status),\n                                        color: 'white',\n                                        fontWeight: 500,\n                                        width: '100%',\n                                        height: '20px',\n                                        '& .MuiChip-label': {\n                                            fontSize: '0.65rem',\n                                            padding: '0 4px'\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        </CardContent>\n                    </Card>\n                ))}\n            </Box>\n        ));\n    };\n\n    const renderPlayer = (player: Player) => {\n        const currentBatchTarget = player.current_tasks.length > 0 \n            ? player.current_tasks[0].type \n            : player.completed_tasks.find(t => t.batch_number === player.current_batch)?.type;\n\n        return (\n            <Card sx={{ height: '100%' }}>\n                <CardContent sx={{ p: 2 }}>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n                        <Typography variant=\"h6\" sx={{ \n                            color: 'primary.main',\n                            fontSize: '1.1rem'\n                        }}>{player.name}</Typography>\n                        <Chip\n                            label={player.status}\n                            size=\"small\"\n                            color={getPlayerStatusColor(player.status)}\n                            sx={{ \n                                fontWeight: 500,\n                                height: '24px'\n                            }}\n                        />\n                    </Box>\n                    <Grid container spacing={1} sx={{ mb: 2 }}>\n                        <Grid item xs={12}>\n                            <Box sx={{ \n                                display: 'flex', \n                                alignItems: 'center', \n                                gap: 1,\n                                mb: 1,\n                                backgroundColor: 'rgba(33, 150, 243, 0.1)',\n                                p: 1,\n                                borderRadius: 1\n                            }}>\n                                <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\n                                    Current Batch: {player.current_batch} / {game?.max_batches}\n                                </Typography>\n                                {currentBatchTarget && (\n                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                                        <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\n                                            Target:\n                                        </Typography>\n                                        {renderCoin(currentBatchTarget, false, true)}\n                                    </Box>\n                                )}\n                            </Box>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Typography variant=\"body2\" color=\"textSecondary\">Current Tasks</Typography>\n                            <Typography variant=\"h6\" sx={{ fontSize: '1.1rem' }}>{player.current_tasks.length}</Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Typography variant=\"body2\" color=\"textSecondary\">Completed</Typography>\n                            <Typography variant=\"h6\" sx={{ fontSize: '1.1rem' }}>{player.completed_tasks.length}</Typography>\n                        </Grid>\n                    </Grid>\n                    <Box sx={{ mt: 2 }}>\n                        <Typography variant=\"subtitle2\" sx={{ color: 'primary.main', fontWeight: 500, mb: 1 }}>\n                            Current Tasks\n                        </Typography>\n                        {renderTaskRow(player.current_tasks, player.name)}\n                    </Box>\n                    {player.completed_tasks.length > 0 && game && player.order === game.players.length - 1 && (\n                        <Box sx={{ mt: 2 }}>\n                            <Typography variant=\"subtitle2\" sx={{ color: 'primary.main', fontWeight: 500, mb: 1 }}>\n                                Completed Tasks\n                            </Typography>\n                            {renderTaskRow(player.completed_tasks, player.name)}\n                        </Box>\n                    )}\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    const formatTime = (milliseconds: number) => {\n        const seconds = Math.floor(milliseconds / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed!\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTime(totalTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    const handleReturnToMain = () => {\n        window.location.reload();\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTime(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMain}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    const renderStatistics = () => {\n        if (!game) return null;\n\n        return (\n            <Box sx={{ p: 2 }}>\n                <Typography variant=\"h6\" sx={{ mb: 2, color: 'primary.main' }}>\n                    Game Statistics\n                </Typography>\n                {Array.from({ length: game.max_batches }, (_, i) => i + 1).map(batchNum => (\n                    <Box key={batchNum} sx={{ mb: 3 }}>\n                        <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                            Batch {batchNum}\n                        </Typography>\n                        <TableContainer component={Paper} sx={{ mb: 2 }}>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Player</TableCell>\n                                        <TableCell align=\"right\">Time</TableCell>\n                                        <TableCell align=\"right\">Status</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {game.players.map(player => {\n                                        const batchTasks = game.tasks.filter(t => \n                                            t.batch_number === batchNum && \n                                            t.assigned_to === player.id\n                                        );\n                                        const isCompleted = batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                                        const hasStarted = batchStartTimes[player.id]?.[batchNum] != null;\n                                        const completionTime = batchCompletionTimes[player.id]?.[batchNum];\n\n                                        return (\n                                            <TableRow key={player.id}>\n                                                <TableCell>{player.name}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    {completionTime ? formatTime(completionTime) : '-'}\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Chip \n                                                        label={isCompleted ? 'Completed' : (hasStarted ? 'In Progress' : 'Pending')}\n                                                        size=\"small\"\n                                                        color={isCompleted ? 'success' : (hasStarted ? 'primary' : 'default')}\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                    <TableRow sx={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}>\n                                        <TableCell><strong>Total</strong></TableCell>\n                                        <TableCell align=\"right\">\n                                            <strong>\n                                                {formatTime(Math.max(...game.players.map(p => \n                                                    batchCompletionTimes[p.id]?.[batchNum] || 0\n                                                )))}\n                                            </strong>\n                                        </TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    if (showResultPage) {\n        return renderResultPage();\n    }\n\n    if (!gameId || !playerId) {\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n            }}>\n                <Box sx={{ \n                    textAlign: 'center', \n                    mb: 4,\n                    mt: 4,\n                    background: 'linear-gradient(45deg, #2196f3 30%, #21CBF3 90%)',\n                    p: 3,\n                    borderRadius: 2,\n                    boxShadow: '0 3px 5px 2px rgba(33, 150, 243, .3)',\n                    color: 'white',\n                    width: '100%',\n                    maxWidth: 800\n                }}>\n                    <Typography variant=\"h3\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                        Online Multiplayer Coin Game\n                    </Typography>\n                    <Typography variant=\"subtitle1\">\n                        Flip coins with your friends in this multiplayer game!\n                    </Typography>\n                </Box>\n\n                <Box sx={{ \n                    width: '100%', \n                    maxWidth: 800,\n                    backgroundColor: 'white',\n                    borderRadius: 2,\n                    boxShadow: '0 3px 10px rgba(0,0,0,0.1)',\n                    p: 3\n                }}>\n                    <Tabs \n                        value={activeTab} \n                        onChange={handleTabChange} \n                        sx={{ \n                            mb: 3,\n                            borderBottom: 1,\n                            borderColor: 'divider'\n                        }}\n                    >\n                        <Tab label=\"Create Game\" />\n                        <Tab label=\"Join Game\" />\n                    </Tabs>\n\n                    {error && (\n                        <Alert severity=\"error\" sx={{ mb: 2 }}>\n                            {error}\n                        </Alert>\n                    )}\n\n                    {activeTab === 0 ? (\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Your Name\"\n                                    value={playerName}\n                                    onChange={(e) => setPlayerName(e.target.value)}\n                                    required\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Number of Players\"\n                                    type=\"number\"\n                                    value={playerCount}\n                                    onChange={(e) => setPlayerCount(Number(e.target.value))}\n                                    inputProps={{ min: 2, max: 5 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Number of Batches\"\n                                    type=\"number\"\n                                    value={maxBatches}\n                                    onChange={(e) => setMaxBatches(Number(e.target.value))}\n                                    inputProps={{ min: 1, max: 10 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Coins per Batch\"\n                                    type=\"number\"\n                                    value={coinsPerBatch}\n                                    onChange={(e) => setCoinsPerBatch(Number(e.target.value))}\n                                    inputProps={{ min: 1, max: 10 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button \n                                    variant=\"contained\" \n                                    onClick={handleCreateGame}\n                                    disabled={!playerName}\n                                    sx={{ mt: 2 }}\n                                    size=\"large\"\n                                >\n                                    Create Game\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    ) : (\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Game ID\"\n                                    value={joinGameId}\n                                    onChange={(e) => setJoinGameId(e.target.value.toUpperCase())}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Player Name\"\n                                    value={playerName}\n                                    onChange={(e) => setPlayerName(e.target.value)}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button \n                                    variant=\"contained\" \n                                    onClick={handleJoinGame}\n                                    sx={{ mt: 2 }}\n                                    size=\"large\"\n                                >\n                                    Join Game\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Box>\n            </Box>\n        );\n    }\n\n    return (\n        <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n            {error && (\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\n                    {error}\n                </Alert>\n            )}\n\n            {game && (\n                <>\n                    <Box sx={{ \n                        display: 'flex', \n                        justifyContent: 'space-between', \n                        alignItems: 'center',\n                        mb: 3\n                    }}>\n                        <Box>\n                            <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                                Game ID: {game.id}\n                            </Typography>\n                            <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                                Game Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                            </Typography>\n                        </Box>\n                        {(game.status === 'in_progress' || game.status === 'completed') && startTime && (\n                            <Typography variant=\"h6\" sx={{ color: 'text.secondary' }}>\n                                Time: {formatTime(game.status === 'completed' && endTime ? endTime - startTime : currentTime)}\n                            </Typography>\n                        )}\n                    </Box>\n\n                    {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleStartGame}\n                            sx={{ mb: 3 }}\n                        >\n                            Start Game\n                        </Button>\n                    )}\n\n                    <Grid container spacing={3}>\n                        {/* Left column: Player cards */}\n                        <Grid item xs={12} md={7}>\n                            <Stack spacing={3}>\n                                {game.players.map(renderPlayer)}\n                            </Stack>\n                        </Grid>\n\n                        {/* Right column: Results and statistics */}\n                        <Grid item xs={12} md={5}>\n                            {renderStatistics()}\n                        </Grid>\n                    </Grid>\n                </>\n            )}\n        </Box>\n    );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}