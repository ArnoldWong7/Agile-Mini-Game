{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\nexport const gameService = {\n  createGame: async (playerCount, maxBatches, tasksPerBatch) => {\n    console.log('Creating game with params:', {\n      playerCount,\n      maxBatches,\n      tasksPerBatch\n    });\n    const response = await axios.post(`${API_URL}/games/create`, null, {\n      params: {\n        player_count: playerCount,\n        max_batches: maxBatches,\n        tasks_per_batch: tasksPerBatch\n      }\n    });\n    console.log('Game created:', response.data);\n    return response.data.game_id;\n  },\n  checkGameExists: async gameId => {\n    console.log('Checking if game exists:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n    console.log('Game exists response:', response.data);\n    return response.data.exists;\n  },\n  joinGame: async (gameId, playerName) => {\n    console.log('Joining game:', {\n      gameId,\n      playerName\n    });\n    const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n      params: {\n        player_name: playerName\n      }\n    });\n    console.log('Join game response:', response.data);\n    return response.data.player_id;\n  },\n  startGame: async gameId => {\n    console.log('Starting game:', gameId);\n    await axios.post(`${API_URL}/games/${gameId}/start`);\n    console.log('Game started');\n  },\n  getGameState: async gameId => {\n    console.log('Getting game state:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}`);\n    console.log('Game state:', response.data);\n    return response.data;\n  },\n  flipCoin: async (gameId, taskId) => {\n    console.log('Flipping coin:', {\n      gameId,\n      taskId\n    });\n    await axios.post(`${API_URL}/games/${gameId}/flip/${taskId}`);\n    console.log('Coin flipped');\n  }\n};\nexport class WebSocketService {\n  constructor(gameId, playerId, onGameUpdate) {\n    this.ws = void 0;\n    this.messageHandlers = [];\n    const wsUrl = `${WS_URL}/ws/${gameId}/${playerId}`;\n    console.log('Connecting to WebSocket:', wsUrl);\n    this.ws = new WebSocket(wsUrl);\n    this.ws.onopen = () => {\n      console.log('WebSocket connection opened');\n      this.sendMessage({\n        type: 'GET_GAME_STATE',\n        data: {\n          gameId\n        }\n      });\n    };\n    this.ws.onmessage = event => {\n      const message = JSON.parse(event.data);\n      console.log('Received WebSocket message:', message);\n      if (message.type === 'GAME_UPDATE' || message.type === 'game_update') {\n        console.log('Updating game state:', message.data);\n        onGameUpdate(message.data);\n      }\n      this.messageHandlers.forEach(handler => handler(message));\n    };\n    this.ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    this.ws.onclose = () => {\n      console.log('WebSocket connection closed');\n      this.reconnect(gameId, playerId, onGameUpdate);\n    };\n  }\n  reconnect(gameId, playerId, onGameUpdate) {\n    console.log('Attempting to reconnect...');\n    setTimeout(() => {\n      const wsUrl = `${WS_URL}/ws/${gameId}/${playerId}`;\n      this.ws = new WebSocket(wsUrl);\n      this.setupWebSocket(onGameUpdate);\n    }, 3000);\n  }\n  setupWebSocket(onGameUpdate) {\n    this.ws.onmessage = event => {\n      const message = JSON.parse(event.data);\n      console.log('Received WebSocket message:', message);\n      if (message.type === 'GAME_UPDATE' || message.type === 'game_update') {\n        console.log('Updating game state:', message.data);\n        onGameUpdate(message.data);\n      }\n      this.messageHandlers.forEach(handler => handler(message));\n    };\n  }\n  sendMessage(message) {\n    if (this.ws.readyState === WebSocket.OPEN) {\n      console.log('Sending WebSocket message:', message);\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not open, message not sent:', message);\n    }\n  }\n  addMessageHandler(handler) {\n    this.messageHandlers.push(handler);\n  }\n  removeMessageHandler(handler) {\n    this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n  }\n  connect() {\n    if (this.ws.readyState === WebSocket.CLOSED) {\n      console.log('Reconnecting WebSocket...');\n      this.ws.onopen = () => {\n        console.log('WebSocket reconnected');\n      };\n    }\n  }\n  disconnect() {\n    if (this.ws.readyState === WebSocket.OPEN) {\n      console.log('Disconnecting WebSocket');\n      this.ws.close();\n    }\n  }\n  completeTask(taskId) {\n    this.sendMessage({\n      type: 'COMPLETE_TASK',\n      data: {\n        taskId\n      }\n    });\n  }\n}","map":{"version":3,"names":["axios","API_URL","WS_URL","gameService","createGame","playerCount","maxBatches","tasksPerBatch","console","log","response","post","params","player_count","max_batches","tasks_per_batch","data","game_id","checkGameExists","gameId","get","exists","joinGame","playerName","player_name","player_id","startGame","getGameState","flipCoin","taskId","WebSocketService","constructor","playerId","onGameUpdate","ws","messageHandlers","wsUrl","WebSocket","onopen","sendMessage","type","onmessage","event","message","JSON","parse","forEach","handler","onerror","error","onclose","reconnect","setTimeout","setupWebSocket","readyState","OPEN","send","stringify","warn","addMessageHandler","push","removeMessageHandler","filter","h","connect","CLOSED","disconnect","close","completeTask"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\n const API_URL = 'http://172.20.10.4:8000';\n const WS_URL = 'ws://172.20.10.4:8000';\n\nexport const gameService = {\n    createGame: async (playerCount: number, maxBatches: number, tasksPerBatch: number): Promise<string> => {\n        console.log('Creating game with params:', { playerCount, maxBatches, tasksPerBatch });\n        const response = await axios.post(`${API_URL}/games/create`, null, {\n            params: { player_count: playerCount, max_batches: maxBatches, tasks_per_batch: tasksPerBatch }\n        });\n        console.log('Game created:', response.data);\n        return response.data.game_id;\n    },\n\n    checkGameExists: async (gameId: string): Promise<boolean> => {\n        console.log('Checking if game exists:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n        console.log('Game exists response:', response.data);\n        return response.data.exists;\n    },\n\n    joinGame: async (gameId: string, playerName: string): Promise<string> => {\n        console.log('Joining game:', { gameId, playerName });\n        const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n            params: { player_name: playerName }\n        });\n        console.log('Join game response:', response.data);\n        return response.data.player_id;\n    },\n\n    startGame: async (gameId: string): Promise<void> => {\n        console.log('Starting game:', gameId);\n        await axios.post(`${API_URL}/games/${gameId}/start`);\n        console.log('Game started');\n    },\n\n    getGameState: async (gameId: string): Promise<Game> => {\n        console.log('Getting game state:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}`);\n        console.log('Game state:', response.data);\n        return response.data;\n    },\n\n    flipCoin: async (gameId: string, taskId: string): Promise<void> => {\n        console.log('Flipping coin:', { gameId, taskId });\n        await axios.post(`${API_URL}/games/${gameId}/flip/${taskId}`);\n        console.log('Coin flipped');\n    },\n};\n\nexport class WebSocketService {\n    private ws: WebSocket;\n    private messageHandlers: ((message: any) => void)[] = [];\n\n    constructor(gameId: string, playerId: string, onGameUpdate: (game: any) => void) {\n        const wsUrl = `${WS_URL}/ws/${gameId}/${playerId}`;\n        console.log('Connecting to WebSocket:', wsUrl);\n        this.ws = new WebSocket(wsUrl);\n\n        this.ws.onopen = () => {\n            console.log('WebSocket connection opened');\n            this.sendMessage({\n                type: 'GET_GAME_STATE',\n                data: { gameId }\n            });\n        };\n\n        this.ws.onmessage = (event) => {\n            const message = JSON.parse(event.data);\n            console.log('Received WebSocket message:', message);\n            \n            if (message.type === 'GAME_UPDATE' || message.type === 'game_update') {\n                console.log('Updating game state:', message.data);\n                onGameUpdate(message.data);\n            }\n            \n            this.messageHandlers.forEach(handler => handler(message));\n        };\n\n        this.ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n\n        this.ws.onclose = () => {\n            console.log('WebSocket connection closed');\n            this.reconnect(gameId, playerId, onGameUpdate);\n        };\n    }\n\n    private reconnect(gameId: string, playerId: string, onGameUpdate: (game: any) => void) {\n        console.log('Attempting to reconnect...');\n        setTimeout(() => {\n            const wsUrl = `${WS_URL}/ws/${gameId}/${playerId}`;\n            this.ws = new WebSocket(wsUrl);\n            this.setupWebSocket(onGameUpdate);\n        }, 3000);\n    }\n\n    private setupWebSocket(onGameUpdate: (game: any) => void) {\n        this.ws.onmessage = (event) => {\n            const message = JSON.parse(event.data);\n            console.log('Received WebSocket message:', message);\n            \n            if (message.type === 'GAME_UPDATE' || message.type === 'game_update') {\n                console.log('Updating game state:', message.data);\n                onGameUpdate(message.data);\n            }\n            \n            this.messageHandlers.forEach(handler => handler(message));\n        };\n    }\n\n    public sendMessage(message: any) {\n        if (this.ws.readyState === WebSocket.OPEN) {\n            console.log('Sending WebSocket message:', message);\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.warn('WebSocket is not open, message not sent:', message);\n        }\n    }\n\n    public addMessageHandler(handler: (message: any) => void) {\n        this.messageHandlers.push(handler);\n    }\n\n    public removeMessageHandler(handler: (message: any) => void) {\n        this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    }\n\n    public connect() {\n        if (this.ws.readyState === WebSocket.CLOSED) {\n            console.log('Reconnecting WebSocket...');\n            this.ws.onopen = () => {\n                console.log('WebSocket reconnected');\n            };\n        }\n    }\n\n    public disconnect() {\n        if (this.ws.readyState === WebSocket.OPEN) {\n            console.log('Disconnecting WebSocket');\n            this.ws.close();\n        }\n    }\n\n    public completeTask(taskId: string) {\n        this.sendMessage({\n            type: 'COMPLETE_TASK',\n            data: { taskId }\n        });\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}