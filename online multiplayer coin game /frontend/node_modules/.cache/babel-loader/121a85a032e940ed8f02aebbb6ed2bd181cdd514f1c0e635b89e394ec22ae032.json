{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Tabs, Tab, Alert, Chip } from '@mui/material';\nimport { keyframes } from '@mui/system';\nimport { TaskStatus, PlayerStatus, TaskType } from '../types/game';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const GameComponent = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  var _game$players$;\n  const [gameId, setGameId] = useState(initialGameId);\n  const [game, setGame] = useState(null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerId, setPlayerId] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n  const [playerCount, setPlayerCount] = useState(2);\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showResultPage, setShowResultPage] = useState(false);\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, updatedGame => {\n        console.log('Game state updated:', updatedGame);\n        if (updatedGame.status) {\n          setGame(updatedGame);\n        }\n      });\n      service.connect();\n      setWsService(service);\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  useEffect(() => {\n    let timerInterval = null;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && startTime) {\n      timerInterval = setInterval(() => {\n        setCurrentTime(Date.now() - startTime);\n      }, 1000);\n    }\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'completed' && startTime && !endTime) {\n      setEndTime(Date.now());\n      setShowResultPage(true);\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime, endTime]);\n  const handleCreateGame = async () => {\n    if (!playerName) {\n      setError('Please enter your name first');\n      return;\n    }\n    try {\n      const newGameId = await gameService.createGame(playerCount, maxBatches, coinsPerBatch);\n      setGameId(newGameId);\n\n      // Automatically join the game as the creator\n      const newPlayerId = await gameService.joinGame(newGameId, playerName);\n      setPlayerId(newPlayerId);\n\n      // Get initial game state\n      const gameState = await gameService.getGameState(newGameId);\n      if (gameState.status) {\n        setGame(gameState);\n      }\n\n      // Reset all input fields\n      setPlayerName('');\n      setPlayerCount(2);\n      setMaxBatches(3);\n      setCoinsPerBatch(2);\n      setJoinGameId('');\n      setError(null);\n    } catch (error) {\n      setError('Failed to create game. Please try again.');\n      console.error('Error creating game:', error);\n    }\n  };\n  const handleJoinGame = async () => {\n    if (!playerName) {\n      setError('Please enter player name');\n      return;\n    }\n    const targetGameId = gameId || joinGameId;\n    if (!targetGameId) {\n      setError('Please enter game ID');\n      return;\n    }\n    try {\n      const exists = await gameService.checkGameExists(targetGameId);\n      if (!exists) {\n        setError('Game not found');\n        return;\n      }\n      const newPlayerId = await gameService.joinGame(targetGameId, playerName);\n      setPlayerId(newPlayerId);\n      setGameId(targetGameId);\n      setShowJoinDialog(false);\n      const gameState = await gameService.getGameState(targetGameId);\n      if (gameState.status) {\n        setGame(gameState);\n      }\n\n      // Reset all input fields\n      setPlayerName('');\n      setPlayerCount(2);\n      setMaxBatches(3);\n      setCoinsPerBatch(2);\n      setJoinGameId('');\n      setError(null);\n    } catch (error) {\n      setError('Failed to join game. Please try again.');\n      console.error('Error joining game:', error);\n    }\n  };\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      setError(null);\n    } catch (error) {\n      setError('Failed to start game. Please try again.');\n      console.error('Error starting game:', error);\n    }\n  };\n  const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n  const [flippingStates, setFlippingStates] = useState({});\n  const handleCompleteTask = taskId => {\n    if (wsService) {\n      const task = game === null || game === void 0 ? void 0 : game.tasks.find(t => t.id === taskId);\n      if (!task) return;\n\n      // Start flipping animation\n      setFlippingStates(prev => ({\n        ...prev,\n        [taskId]: {\n          isFlipping: true,\n          showOpposite: false\n        }\n      }));\n\n      // After animation completes, keep showing the opposite side\n      setTimeout(() => {\n        setFlippingStates(prev => ({\n          ...prev,\n          [taskId]: {\n            isFlipping: false,\n            showOpposite: true\n          }\n        }));\n        wsService.completeTask(taskId);\n      }, 600);\n    }\n  };\n  const renderCoin = (type, isFlipping, isSmall = false, onClick, taskId) => {\n    const flipState = taskId ? flippingStates[taskId] : undefined;\n    const task = taskId ? game === null || game === void 0 ? void 0 : game.tasks.find(t => t.id === taskId) : undefined;\n\n    // Always show opposite side if flipState exists and showOpposite is true\n    const displayType = flipState !== null && flipState !== void 0 && flipState.showOpposite ? type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS : type;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: isSmall ? 20 : 32,\n        height: isSmall ? 20 : 32,\n        borderRadius: '50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n        border: `${isSmall ? 1 : 2}px solid #B8860B`,\n        color: '#704214',\n        fontWeight: 'bold',\n        fontSize: isSmall ? '0.6rem' : '0.8rem',\n        animation: flipState !== null && flipState !== void 0 && flipState.isFlipping ? `${flipAnimation} 0.6s ease-in-out` : 'none',\n        perspective: 1000,\n        mb: isSmall ? 0 : 1,\n        position: 'relative',\n        cursor: onClick ? 'pointer' : 'default',\n        transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n        '&:hover': onClick ? {\n          transform: 'scale(1.05)',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n        } : {},\n        '&:active': onClick ? {\n          transform: 'scale(0.95)'\n        } : {},\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          borderRadius: '50%',\n          background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n          pointerEvents: 'none'\n        }\n      },\n      onClick: onClick,\n      children: displayType === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this);\n  };\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n  const renderTaskRow = (tasks, playerName) => {\n    // 将任务分组为每行最多5个\n    const rows = [];\n    for (let i = 0; i < tasks.length; i += 5) {\n      rows.push(tasks.slice(i, i + 5));\n    }\n    return rows.map((rowTasks, rowIndex) => /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        gap: 1,\n        mb: 1,\n        flexWrap: 'nowrap',\n        justifyContent: 'flex-start'\n      },\n      children: rowTasks.map(task => {\n        var _flippingStates$task$, _flippingStates, _game$players$find;\n        return /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            width: 100,\n            minWidth: 100,\n            backgroundColor: 'background.paper',\n            position: 'relative',\n            overflow: 'visible'\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            sx: {\n              p: '8px !important',\n              pb: '8px !important',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center'\n            },\n            children: [renderCoin(task.type, ((_flippingStates$task$ = flippingStates[task.id]) === null || _flippingStates$task$ === void 0 ? void 0 : _flippingStates$task$.isFlipping) || false, false, task.status === TaskStatus.PENDING && task.assigned_to === playerId && !((_flippingStates = flippingStates[task.id || '']) !== null && _flippingStates !== void 0 && _flippingStates.isFlipping) && (game === null || game === void 0 ? void 0 : (_game$players$find = game.players.find(p => p.id === playerId)) === null || _game$players$find === void 0 ? void 0 : _game$players$find.status) === PlayerStatus.ACTIVE ? () => handleCompleteTask(task.id) : undefined, task.id), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: '100%',\n                mt: 0.5\n              },\n              children: /*#__PURE__*/_jsxDEV(Chip, {\n                label: task.status,\n                size: \"small\",\n                sx: {\n                  backgroundColor: getTaskStatusColor(task.status),\n                  color: 'white',\n                  fontWeight: 500,\n                  width: '100%',\n                  height: '20px',\n                  '& .MuiChip-label': {\n                    fontSize: '0.65rem',\n                    padding: '0 4px'\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 25\n          }, this)\n        }, `${task.id}-${playerName}-${task.batch_number}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 21\n        }, this);\n      })\n    }, `row-${rowIndex}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }, this));\n  };\n  const renderPlayer = player => {\n    var _player$completed_tas;\n    const currentBatchTarget = player.current_tasks.length > 0 ? player.current_tasks[0].type : (_player$completed_tas = player.completed_tasks.find(t => t.batch_number === player.current_batch)) === null || _player$completed_tas === void 0 ? void 0 : _player$completed_tas.type;\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 6,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          height: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          sx: {\n            p: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              mb: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                color: 'primary.main',\n                fontSize: '1.1rem'\n              },\n              children: player.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              label: player.status,\n              size: \"small\",\n              color: getPlayerStatusColor(player.status),\n              sx: {\n                fontWeight: 500,\n                height: '24px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 1,\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: 1,\n                  mb: 1,\n                  backgroundColor: 'rgba(33, 150, 243, 0.1)',\n                  p: 1,\n                  borderRadius: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  sx: {\n                    fontWeight: 500\n                  },\n                  children: [\"Current Batch: \", player.current_batch, \" / \", game === null || game === void 0 ? void 0 : game.max_batches]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 422,\n                  columnNumber: 37\n                }, this), currentBatchTarget && /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: 0.5\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    sx: {\n                      fontWeight: 500\n                    },\n                    children: \"Target:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 427,\n                    columnNumber: 45\n                  }, this), renderCoin(currentBatchTarget, false, true)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: \"Current Tasks\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                sx: {\n                  fontSize: '1.1rem'\n                },\n                children: player.current_tasks.length\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: \"Completed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                sx: {\n                  fontSize: '1.1rem'\n                },\n                children: player.completed_tasks.length\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              sx: {\n                color: 'primary.main',\n                fontWeight: 500,\n                mb: 1\n              },\n              children: \"Current Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 29\n            }, this), renderTaskRow(player.current_tasks, player.name)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 25\n          }, this), player.completed_tasks.length > 0 && game && player.order === game.players.length - 1 && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              sx: {\n                color: 'primary.main',\n                fontWeight: 500,\n                mb: 1\n              },\n              children: \"Completed Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 33\n            }, this), renderTaskRow(player.completed_tasks, player.name)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 17\n      }, this)\n    }, `player-${player.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 13\n    }, this);\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n  const formatTime = milliseconds => {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed! \\uD83C\\uDF89\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTime(totalTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteGame = () => {\n    setShowResultPage(true);\n  };\n  const handleReturnToMain = () => {\n    window.location.reload();\n  };\n  const renderResultPage = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 600,\n          width: '100%',\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            mb: 3,\n            color: 'primary.main'\n          },\n          children: \"Game Complete! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            mb: 4\n          },\n          children: [\"Total Time: \", formatTime(totalTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMain,\n          size: \"large\",\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 13\n    }, this);\n  };\n  if (showResultPage) {\n    return renderResultPage();\n  }\n  if (!gameId || !playerId) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          mb: 4,\n          mt: 4,\n          background: 'linear-gradient(45deg, #2196f3 30%, #21CBF3 90%)',\n          p: 3,\n          borderRadius: 2,\n          boxShadow: '0 3px 5px 2px rgba(33, 150, 243, .3)',\n          color: 'white',\n          width: '100%',\n          maxWidth: 800\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: \"Online Multiplayer Coin Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          children: \"Flip coins with your friends in this multiplayer game!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: '100%',\n          maxWidth: 800,\n          backgroundColor: 'white',\n          borderRadius: 2,\n          boxShadow: '0 3px 10px rgba(0,0,0,0.1)',\n          p: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tabs, {\n          value: activeTab,\n          onChange: handleTabChange,\n          sx: {\n            mb: 3,\n            borderBottom: 1,\n            borderColor: 'divider'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 21\n        }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          sx: {\n            mb: 2\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 25\n        }, this), activeTab === 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Your Name\",\n              value: playerName,\n              onChange: e => setPlayerName(e.target.value),\n              required: true,\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 645,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Number of Players\",\n              type: \"number\",\n              value: playerCount,\n              onChange: e => setPlayerCount(Number(e.target.value)),\n              inputProps: {\n                min: 2,\n                max: 5\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Number of Batches\",\n              type: \"number\",\n              value: maxBatches,\n              onChange: e => setMaxBatches(Number(e.target.value)),\n              inputProps: {\n                min: 1,\n                max: 10\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Coins per Batch\",\n              type: \"number\",\n              value: coinsPerBatch,\n              onChange: e => setCoinsPerBatch(Number(e.target.value)),\n              inputProps: {\n                min: 1,\n                max: 10\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 681,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 680,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleCreateGame,\n              disabled: !playerName,\n              sx: {\n                mt: 2\n              },\n              size: \"large\",\n              children: \"Create Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 693,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Game ID\",\n              value: joinGameId,\n              onChange: e => setJoinGameId(e.target.value.toUpperCase()),\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Player Name\",\n              value: playerName,\n              onChange: e => setPlayerName(e.target.value),\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 717,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleJoinGame,\n              sx: {\n                mt: 2\n              },\n              size: \"large\",\n              children: \"Join Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 727,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3,\n      backgroundColor: 'background.default',\n      minHeight: '100vh'\n    },\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 746,\n      columnNumber: 17\n    }, this), game && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 1,\n              color: 'primary.main'\n            },\n            children: [\"Game ID: \", game.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 760,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              color: 'text.primary'\n            },\n            children: [\"Game Status: \", game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 763,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 25\n        }, this), (game.status === 'in_progress' || game.status === 'completed') && startTime && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'text.secondary'\n          },\n          children: [\"Time: \", formatTime(game.status === 'completed' && endTime ? endTime - startTime : currentTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 21\n      }, this), game.status === 'waiting' && playerId === ((_game$players$ = game.players[0]) === null || _game$players$ === void 0 ? void 0 : _game$players$.id) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartGame,\n        sx: {\n          mb: 3\n        },\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: game.players.map(renderPlayer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 784,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 744,\n    columnNumber: 9\n  }, this);\n};\n_s(GameComponent, \"1GIrFIfbk5/VIyQQNOOe3q+/HtA=\");\n_c = GameComponent;\nvar _c;\n$RefreshReg$(_c, \"GameComponent\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","keyframes","TaskStatus","PlayerStatus","TaskType","gameService","WebSocketService","jsxDEV","_jsxDEV","Fragment","_Fragment","GameComponent","gameId","initialGameId","_s","_game$players$","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","currentTime","setCurrentTime","showResultPage","setShowResultPage","service","updatedGame","console","log","status","connect","disconnect","Date","now","timerInterval","setInterval","clearInterval","handleCreateGame","newGameId","createGame","newPlayerId","joinGame","gameState","getGameState","handleJoinGame","targetGameId","exists","checkGameExists","handleStartGame","startGame","flipAnimation","flippingStates","setFlippingStates","handleCompleteTask","taskId","task","tasks","find","t","id","prev","isFlipping","showOpposite","setTimeout","completeTask","renderCoin","type","isSmall","onClick","flipState","undefined","displayType","HEADS","TAILS","sx","width","height","borderRadius","display","alignItems","justifyContent","backgroundColor","border","color","fontWeight","fontSize","animation","perspective","mb","position","cursor","transition","transform","boxShadow","content","top","left","right","bottom","background","pointerEvents","children","fileName","_jsxFileName","lineNumber","columnNumber","getPlayerStatusColor","ACTIVE","WAITING","IDLE","getTaskStatusColor","COMPLETED","IN_PROGRESS","PENDING","renderTaskRow","rows","i","length","push","slice","map","rowTasks","rowIndex","gap","flexWrap","_flippingStates$task$","_flippingStates","_game$players$find","minWidth","overflow","p","pb","flexDirection","assigned_to","players","mt","label","size","padding","batch_number","renderPlayer","player","_player$completed_tas","currentBatchTarget","current_tasks","completed_tasks","current_batch","item","xs","md","variant","name","container","spacing","max_batches","order","handleTabChange","_","newValue","handleGameComplete","formatTime","milliseconds","seconds","Math","floor","minutes","remainingSeconds","toString","padStart","renderCompletionDialog","totalTime","open","onClose","PaperProps","textAlign","py","window","location","reload","handleCompleteGame","handleReturnToMain","renderResultPage","minHeight","maxWidth","value","onChange","borderBottom","borderColor","severity","fullWidth","e","target","required","autoComplete","Number","inputProps","min","max","disabled","toUpperCase","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n} from '@mui/material';\nimport { styled, keyframes } from '@mui/system';\nimport type { Game as GameType } from '../types/game';\nimport { Player, TaskStatus, PlayerStatus, TaskType, Task } from '../types/game';\nimport { gameService, WebSocketService } from '../services/gameService';\n\ninterface GameComponentProps {\n    gameId?: string;\n}\n\ninterface FlippingStates {\n    [key: string]: {\n        isFlipping: boolean;\n        showOpposite: boolean;\n    };\n}\n\nexport const GameComponent: React.FC<GameComponentProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | undefined>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, (updatedGame: GameType) => {\n                console.log('Game state updated:', updatedGame);\n                if (updatedGame.status) {\n                    setGame(updatedGame);\n                }\n            });\n            service.connect();\n            setWsService(service);\n\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && startTime) {\n            timerInterval = setInterval(() => {\n                setCurrentTime(Date.now() - startTime);\n            }, 1000);\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, startTime, endTime]);\n\n    const handleCreateGame = async () => {\n        if (!playerName) {\n            setError('Please enter your name first');\n            return;\n        }\n\n        try {\n            const newGameId = await gameService.createGame(playerCount, maxBatches, coinsPerBatch);\n            setGameId(newGameId);\n            \n            // Automatically join the game as the creator\n            const newPlayerId = await gameService.joinGame(newGameId, playerName);\n            setPlayerId(newPlayerId);\n            \n            // Get initial game state\n            const gameState = await gameService.getGameState(newGameId);\n            if (gameState.status) {\n                setGame(gameState);\n            }\n            \n            // Reset all input fields\n            setPlayerName('');\n            setPlayerCount(2);\n            setMaxBatches(3);\n            setCoinsPerBatch(2);\n            setJoinGameId('');\n            setError(null);\n        } catch (error) {\n            setError('Failed to create game. Please try again.');\n            console.error('Error creating game:', error);\n        }\n    };\n\n    const handleJoinGame = async () => {\n        if (!playerName) {\n            setError('Please enter player name');\n            return;\n        }\n\n        const targetGameId = gameId || joinGameId;\n        if (!targetGameId) {\n            setError('Please enter game ID');\n            return;\n        }\n\n        try {\n            const exists = await gameService.checkGameExists(targetGameId);\n            if (!exists) {\n                setError('Game not found');\n                return;\n            }\n\n            const newPlayerId = await gameService.joinGame(targetGameId, playerName);\n            setPlayerId(newPlayerId);\n            setGameId(targetGameId);\n            setShowJoinDialog(false);\n            const gameState = await gameService.getGameState(targetGameId);\n            if (gameState.status) {\n                setGame(gameState);\n            }\n            \n            // Reset all input fields\n            setPlayerName('');\n            setPlayerCount(2);\n            setMaxBatches(3);\n            setCoinsPerBatch(2);\n            setJoinGameId('');\n            setError(null);\n        } catch (error) {\n            setError('Failed to join game. Please try again.');\n            console.error('Error joining game:', error);\n        }\n    };\n\n    const handleStartGame = async () => {\n        if (!gameId) return;\n\n        try {\n            await gameService.startGame(gameId);\n            setError(null);\n        } catch (error) {\n            setError('Failed to start game. Please try again.');\n            console.error('Error starting game:', error);\n        }\n    };\n\n    const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n    const [flippingStates, setFlippingStates] = useState<{[key: string]: { isFlipping: boolean; showOpposite: boolean }}>({});\n\n    const handleCompleteTask = (taskId: string) => {\n        if (wsService) {\n            const task = game?.tasks.find(t => t.id === taskId);\n            if (!task) return;\n\n            // Start flipping animation\n            setFlippingStates(prev => ({\n                ...prev,\n                [taskId]: { \n                    isFlipping: true, \n                    showOpposite: false\n                }\n            }));\n\n            // After animation completes, keep showing the opposite side\n            setTimeout(() => {\n                setFlippingStates(prev => ({\n                    ...prev,\n                    [taskId]: { \n                        isFlipping: false, \n                        showOpposite: true\n                    }\n                }));\n                wsService.completeTask(taskId);\n            }, 600);\n        }\n    };\n\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void, taskId?: string) => {\n        const flipState = taskId ? flippingStates[taskId] : undefined;\n        const task = taskId ? game?.tasks.find(t => t.id === taskId) : undefined;\n        \n        // Always show opposite side if flipState exists and showOpposite is true\n        const displayType = (flipState?.showOpposite)\n            ? (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) \n            : type;\n        \n        return (\n            <Box\n                sx={{\n                    width: isSmall ? 20 : 32,\n                    height: isSmall ? 20 : 32,\n                    borderRadius: '50%',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                    border: `${isSmall ? 1 : 2}px solid #B8860B`,\n                    color: '#704214',\n                    fontWeight: 'bold',\n                    fontSize: isSmall ? '0.6rem' : '0.8rem',\n                    animation: flipState?.isFlipping ? `${flipAnimation} 0.6s ease-in-out` : 'none',\n                    perspective: 1000,\n                    mb: isSmall ? 0 : 1,\n                    position: 'relative',\n                    cursor: onClick ? 'pointer' : 'default',\n                    transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n                    '&:hover': onClick ? {\n                        transform: 'scale(1.05)',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                    } : {},\n                    '&:active': onClick ? {\n                        transform: 'scale(0.95)'\n                    } : {},\n                    '&::after': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        borderRadius: '50%',\n                        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                        pointerEvents: 'none'\n                    }\n                }}\n                onClick={onClick}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    const renderTaskRow = (tasks: Task[], playerName: string) => {\n        // 将任务分组为每行最多5个\n        const rows: Task[][] = [];\n        for (let i = 0; i < tasks.length; i += 5) {\n            rows.push(tasks.slice(i, i + 5));\n        }\n\n        return rows.map((rowTasks, rowIndex) => (\n            <Box \n                key={`row-${rowIndex}`} \n                sx={{ \n                    display: 'flex', \n                    gap: 1,\n                    mb: 1,\n                    flexWrap: 'nowrap',\n                    justifyContent: 'flex-start'\n                }}\n            >\n                {rowTasks.map(task => (\n                    <Card \n                        key={`${task.id}-${playerName}-${task.batch_number}`} \n                        sx={{ \n                            width: 100,\n                            minWidth: 100,\n                            backgroundColor: 'background.paper',\n                            position: 'relative',\n                            overflow: 'visible'\n                        }}\n                    >\n                        <CardContent sx={{ \n                            p: '8px !important',\n                            pb: '8px !important',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                        }}>\n                            {renderCoin(\n                                task.type, \n                                flippingStates[task.id]?.isFlipping || false,\n                                false,\n                                task.status === TaskStatus.PENDING && \n                                task.assigned_to === playerId && \n                                !flippingStates[task.id || '']?.isFlipping &&\n                                game?.players.find(p => p.id === playerId)?.status === PlayerStatus.ACTIVE\n                                    ? () => handleCompleteTask(task.id)\n                                    : undefined,\n                                task.id\n                            )}\n                            <Box sx={{ width: '100%', mt: 0.5 }}>\n                                <Chip\n                                    label={task.status}\n                                    size=\"small\"\n                                    sx={{\n                                        backgroundColor: getTaskStatusColor(task.status),\n                                        color: 'white',\n                                        fontWeight: 500,\n                                        width: '100%',\n                                        height: '20px',\n                                        '& .MuiChip-label': {\n                                            fontSize: '0.65rem',\n                                            padding: '0 4px'\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        </CardContent>\n                    </Card>\n                ))}\n            </Box>\n        ));\n    };\n\n    const renderPlayer = (player: Player) => {\n        const currentBatchTarget = player.current_tasks.length > 0 \n            ? player.current_tasks[0].type \n            : player.completed_tasks.find(t => t.batch_number === player.current_batch)?.type;\n\n        return (\n            <Grid item xs={12} md={6} key={`player-${player.id}`}>\n                <Card sx={{ height: '100%' }}>\n                    <CardContent sx={{ p: 2 }}>\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n                            <Typography variant=\"h6\" sx={{ \n                                color: 'primary.main',\n                                fontSize: '1.1rem'\n                            }}>{player.name}</Typography>\n                            <Chip\n                                label={player.status}\n                                size=\"small\"\n                                color={getPlayerStatusColor(player.status)}\n                                sx={{ \n                                    fontWeight: 500,\n                                    height: '24px'\n                                }}\n                            />\n                        </Box>\n                        <Grid container spacing={1} sx={{ mb: 2 }}>\n                            <Grid item xs={12}>\n                                <Box sx={{ \n                                    display: 'flex', \n                                    alignItems: 'center', \n                                    gap: 1,\n                                    mb: 1,\n                                    backgroundColor: 'rgba(33, 150, 243, 0.1)',\n                                    p: 1,\n                                    borderRadius: 1\n                                }}>\n                                    <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\n                                        Current Batch: {player.current_batch} / {game?.max_batches}\n                                    </Typography>\n                                    {currentBatchTarget && (\n                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                                            <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\n                                                Target:\n                                            </Typography>\n                                            {renderCoin(currentBatchTarget, false, true)}\n                                        </Box>\n                                    )}\n                                </Box>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Typography variant=\"body2\" color=\"textSecondary\">Current Tasks</Typography>\n                                <Typography variant=\"h6\" sx={{ fontSize: '1.1rem' }}>{player.current_tasks.length}</Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Typography variant=\"body2\" color=\"textSecondary\">Completed</Typography>\n                                <Typography variant=\"h6\" sx={{ fontSize: '1.1rem' }}>{player.completed_tasks.length}</Typography>\n                            </Grid>\n                        </Grid>\n                        <Box sx={{ mt: 2 }}>\n                            <Typography variant=\"subtitle2\" sx={{ color: 'primary.main', fontWeight: 500, mb: 1 }}>\n                                Current Tasks\n                            </Typography>\n                            {renderTaskRow(player.current_tasks, player.name)}\n                        </Box>\n                        {player.completed_tasks.length > 0 && game && player.order === game.players.length - 1 && (\n                            <Box sx={{ mt: 2 }}>\n                                <Typography variant=\"subtitle2\" sx={{ color: 'primary.main', fontWeight: 500, mb: 1 }}>\n                                    Completed Tasks\n                                </Typography>\n                                {renderTaskRow(player.completed_tasks, player.name)}\n                            </Box>\n                        )}\n                    </CardContent>\n                </Card>\n            </Grid>\n        );\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    const formatTime = (milliseconds: number) => {\n        const seconds = Math.floor(milliseconds / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed! 🎉\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTime(totalTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    const handleReturnToMain = () => {\n        window.location.reload();\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTime(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMain}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    if (showResultPage) {\n        return renderResultPage();\n    }\n\n    if (!gameId || !playerId) {\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n            }}>\n                <Box sx={{ \n                    textAlign: 'center', \n                    mb: 4,\n                    mt: 4,\n                    background: 'linear-gradient(45deg, #2196f3 30%, #21CBF3 90%)',\n                    p: 3,\n                    borderRadius: 2,\n                    boxShadow: '0 3px 5px 2px rgba(33, 150, 243, .3)',\n                    color: 'white',\n                    width: '100%',\n                    maxWidth: 800\n                }}>\n                    <Typography variant=\"h3\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                        Online Multiplayer Coin Game\n                    </Typography>\n                    <Typography variant=\"subtitle1\">\n                        Flip coins with your friends in this multiplayer game!\n                    </Typography>\n                </Box>\n\n                <Box sx={{ \n                    width: '100%', \n                    maxWidth: 800,\n                    backgroundColor: 'white',\n                    borderRadius: 2,\n                    boxShadow: '0 3px 10px rgba(0,0,0,0.1)',\n                    p: 3\n                }}>\n                    <Tabs \n                        value={activeTab} \n                        onChange={handleTabChange} \n                        sx={{ \n                            mb: 3,\n                            borderBottom: 1,\n                            borderColor: 'divider'\n                        }}\n                    >\n                        <Tab label=\"Create Game\" />\n                        <Tab label=\"Join Game\" />\n                    </Tabs>\n\n                    {error && (\n                        <Alert severity=\"error\" sx={{ mb: 2 }}>\n                            {error}\n                        </Alert>\n                    )}\n\n                    {activeTab === 0 ? (\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Your Name\"\n                                    value={playerName}\n                                    onChange={(e) => setPlayerName(e.target.value)}\n                                    required\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Number of Players\"\n                                    type=\"number\"\n                                    value={playerCount}\n                                    onChange={(e) => setPlayerCount(Number(e.target.value))}\n                                    inputProps={{ min: 2, max: 5 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Number of Batches\"\n                                    type=\"number\"\n                                    value={maxBatches}\n                                    onChange={(e) => setMaxBatches(Number(e.target.value))}\n                                    inputProps={{ min: 1, max: 10 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Coins per Batch\"\n                                    type=\"number\"\n                                    value={coinsPerBatch}\n                                    onChange={(e) => setCoinsPerBatch(Number(e.target.value))}\n                                    inputProps={{ min: 1, max: 10 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button \n                                    variant=\"contained\" \n                                    onClick={handleCreateGame}\n                                    disabled={!playerName}\n                                    sx={{ mt: 2 }}\n                                    size=\"large\"\n                                >\n                                    Create Game\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    ) : (\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Game ID\"\n                                    value={joinGameId}\n                                    onChange={(e) => setJoinGameId(e.target.value.toUpperCase())}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Player Name\"\n                                    value={playerName}\n                                    onChange={(e) => setPlayerName(e.target.value)}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button \n                                    variant=\"contained\" \n                                    onClick={handleJoinGame}\n                                    sx={{ mt: 2 }}\n                                    size=\"large\"\n                                >\n                                    Join Game\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Box>\n            </Box>\n        );\n    }\n\n    return (\n        <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n            {error && (\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\n                    {error}\n                </Alert>\n            )}\n\n            {game && (\n                <>\n                    <Box sx={{ \n                        display: 'flex', \n                        justifyContent: 'space-between', \n                        alignItems: 'center',\n                        mb: 3\n                    }}>\n                        <Box>\n                            <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                                Game ID: {game.id}\n                            </Typography>\n                            <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                                Game Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                            </Typography>\n                        </Box>\n                        {(game.status === 'in_progress' || game.status === 'completed') && startTime && (\n                            <Typography variant=\"h6\" sx={{ color: 'text.secondary' }}>\n                                Time: {formatTime(game.status === 'completed' && endTime ? endTime - startTime : currentTime)}\n                            </Typography>\n                        )}\n                    </Box>\n\n                    {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleStartGame}\n                            sx={{ mb: 3 }}\n                        >\n                            Start Game\n                        </Button>\n                    )}\n\n                    <Grid container spacing={3}>\n                        {game.players.map(renderPlayer)}\n                    </Grid>\n                </>\n            )}\n        </Box>\n    );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}