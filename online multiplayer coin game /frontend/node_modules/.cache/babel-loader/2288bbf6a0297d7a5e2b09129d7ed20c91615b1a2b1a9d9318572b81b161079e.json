{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Tabs, Tab, Alert, Chip, keyframes, Stack, TableContainer, Table, TableHead, TableBody, TableCell, TableRow } from '@mui/material';\nimport { TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Game = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  var _game$players$;\n  const [gameId, setGameId] = useState(initialGameId);\n  const [game, setGame] = useState(null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerId, setPlayerId] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n  const [playerCount, setPlayerCount] = useState(2);\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showResultPage, setShowResultPage] = useState(false);\n  const [batchStartTimes, setBatchStartTimes] = useState({});\n  const [batchCompletionTimes, setBatchCompletionTimes] = useState({});\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, updatedGame => {\n        console.log('Game state updated:', updatedGame);\n        setGame(updatedGame);\n      });\n      service.connect();\n      setWsService(service);\n\n      // Cleanup function\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  useEffect(() => {\n    let timerInterval = null;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && startTime) {\n      timerInterval = setInterval(() => {\n        setCurrentTime(Date.now() - startTime);\n      }, 1000);\n    }\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'completed' && startTime && !endTime) {\n      setEndTime(Date.now());\n      setShowResultPage(true);\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime, endTime]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && game.status === 'in_progress') {\n      const newBatchStartTimes = {\n        ...batchStartTimes\n      };\n\n      // Check for new batches that have started\n      game.tasks.forEach(task => {\n        if (task.status === TaskStatus.IN_PROGRESS && !newBatchStartTimes[task.batch_number]) {\n          newBatchStartTimes[task.batch_number] = Date.now();\n        }\n      });\n      setBatchStartTimes(newBatchStartTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.status]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && game.status === 'in_progress') {\n      const newCompletionTimes = {\n        ...batchCompletionTimes\n      };\n      game.players.forEach(player => {\n        if (!newCompletionTimes[player.id]) {\n          newCompletionTimes[player.id] = {};\n        }\n\n        // Check each batch\n        for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n\n          // If all tasks in this batch are completed and we haven't recorded time yet\n          if (batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[player.id][batchNum] && batchStartTimes[batchNum]) {\n            // Calculate time from batch start to completion\n            newCompletionTimes[player.id][batchNum] = Date.now() - batchStartTimes[batchNum];\n          }\n        }\n      });\n      setBatchCompletionTimes(newCompletionTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.status, batchStartTimes]);\n  const handleCreateGame = async () => {\n    if (!playerName) {\n      setError('Please enter your name first');\n      return;\n    }\n    try {\n      const newGameId = await gameService.createGame(playerCount, maxBatches, coinsPerBatch);\n      setGameId(newGameId);\n\n      // Automatically join the game as the creator\n      const newPlayerId = await gameService.joinGame(newGameId, playerName);\n      setPlayerId(newPlayerId);\n\n      // Get initial game state\n      const gameState = await gameService.getGameState(newGameId);\n      setGame(gameState);\n\n      // Reset all input fields\n      setPlayerName('');\n      setPlayerCount(2);\n      setMaxBatches(3);\n      setCoinsPerBatch(2);\n      setJoinGameId('');\n      setError(null);\n    } catch (error) {\n      setError('Failed to create game. Please try again.');\n      console.error('Error creating game:', error);\n    }\n  };\n  const handleJoinGame = async () => {\n    if (!playerName) {\n      setError('Please enter player name');\n      return;\n    }\n    const targetGameId = gameId || joinGameId;\n    if (!targetGameId) {\n      setError('Please enter game ID');\n      return;\n    }\n    try {\n      const exists = await gameService.checkGameExists(targetGameId);\n      if (!exists) {\n        setError('Game not found');\n        return;\n      }\n      const newPlayerId = await gameService.joinGame(targetGameId, playerName);\n      setPlayerId(newPlayerId);\n      setGameId(targetGameId);\n      setShowJoinDialog(false);\n      const gameState = await gameService.getGameState(targetGameId);\n      setGame(gameState);\n\n      // Reset all input fields\n      setPlayerName('');\n      setPlayerCount(2);\n      setMaxBatches(3);\n      setCoinsPerBatch(2);\n      setJoinGameId('');\n      setError(null);\n    } catch (error) {\n      setError('Failed to join game. Please try again.');\n      console.error('Error joining game:', error);\n    }\n  };\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      setError(null);\n    } catch (error) {\n      setError('Failed to start game. Please try again.');\n      console.error('Error starting game:', error);\n    }\n  };\n  const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n  const [flippingStates, setFlippingStates] = useState({});\n  const renderCoin = (type, isFlipping, isSmall = false, onClick, taskId) => {\n    const flipState = taskId ? flippingStates[taskId] : undefined;\n    const displayType = flipState !== null && flipState !== void 0 && flipState.showOpposite ? type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS : type;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: isSmall ? 20 : 32,\n        height: isSmall ? 20 : 32,\n        borderRadius: '50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n        border: `${isSmall ? 1 : 2}px solid #B8860B`,\n        color: '#704214',\n        fontWeight: 'bold',\n        fontSize: isSmall ? '0.6rem' : '0.8rem',\n        animation: isFlipping ? `${flipAnimation} 0.6s ease-in-out` : 'none',\n        perspective: 1000,\n        mb: isSmall ? 0 : 1,\n        position: 'relative',\n        cursor: onClick ? 'pointer' : 'default',\n        transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n        '&:hover': onClick ? {\n          transform: 'scale(1.05)',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n        } : {},\n        '&:active': onClick ? {\n          transform: 'scale(0.95)'\n        } : {},\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          borderRadius: '50%',\n          background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n          pointerEvents: 'none'\n        }\n      },\n      onClick: onClick,\n      children: displayType === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteTask = taskId => {\n    if (wsService) {\n      // 开始翻转动画\n      setFlippingStates(prev => ({\n        ...prev,\n        [taskId]: {\n          isFlipping: true,\n          showOpposite: false\n        }\n      }));\n\n      // 在动画中途改变显示的面\n      setTimeout(() => {\n        setFlippingStates(prev => ({\n          ...prev,\n          [taskId]: {\n            isFlipping: true,\n            showOpposite: true\n          }\n        }));\n      }, 300);\n\n      // 动画结束后发送完成信息\n      setTimeout(() => {\n        wsService.completeTask(taskId);\n        setFlippingStates(prev => {\n          const newState = {\n            ...prev\n          };\n          delete newState[taskId];\n          return newState;\n        });\n      }, 600);\n    }\n  };\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n  const renderTaskRow = (tasks, playerName) => {\n    // 将任务分组为每行最多5个\n    const rows = [];\n    for (let i = 0; i < tasks.length; i += 5) {\n      rows.push(tasks.slice(i, i + 5));\n    }\n    return rows.map((rowTasks, rowIndex) => /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        gap: 1,\n        mb: 1,\n        flexWrap: 'nowrap',\n        justifyContent: 'flex-start'\n      },\n      children: rowTasks.map(task => {\n        var _flippingStates$task$, _flippingStates$task$2;\n        return /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            width: 100,\n            minWidth: 100,\n            backgroundColor: 'background.paper',\n            position: 'relative',\n            overflow: 'visible'\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            sx: {\n              p: '8px !important',\n              pb: '8px !important',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center'\n            },\n            children: [renderCoin(task.type, ((_flippingStates$task$ = flippingStates[task.id]) === null || _flippingStates$task$ === void 0 ? void 0 : _flippingStates$task$.isFlipping) || false, false, task.status === TaskStatus.PENDING && task.assigned_to === playerId && !((_flippingStates$task$2 = flippingStates[task.id]) !== null && _flippingStates$task$2 !== void 0 && _flippingStates$task$2.isFlipping) ? () => handleCompleteTask(task.id) : undefined, task.id), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: '100%',\n                mt: 0.5\n              },\n              children: /*#__PURE__*/_jsxDEV(Chip, {\n                label: task.status,\n                size: \"small\",\n                sx: {\n                  backgroundColor: getTaskStatusColor(task.status),\n                  color: 'white',\n                  fontWeight: 500,\n                  width: '100%',\n                  height: '20px',\n                  '& .MuiChip-label': {\n                    fontSize: '0.65rem',\n                    padding: '0 4px'\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 25\n          }, this)\n        }, `${task.id}-${playerName}-${task.batch_number}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 21\n        }, this);\n      })\n    }, `row-${rowIndex}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 13\n    }, this));\n  };\n  const renderPlayer = player => {\n    var _player$completed_tas;\n    const currentBatchTarget = player.current_tasks.length > 0 ? player.current_tasks[0].type : (_player$completed_tas = player.completed_tasks.find(t => t.batch_number === player.current_batch)) === null || _player$completed_tas === void 0 ? void 0 : _player$completed_tas.type;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        height: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        sx: {\n          p: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              color: 'primary.main',\n              fontSize: '1.1rem'\n            },\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: player.status,\n            size: \"small\",\n            color: getPlayerStatusColor(player.status),\n            sx: {\n              fontWeight: 500,\n              height: '24px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: 1,\n                mb: 1,\n                backgroundColor: 'rgba(33, 150, 243, 0.1)',\n                p: 1,\n                borderRadius: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  fontWeight: 500\n                },\n                children: [\"Current Batch: \", player.current_batch, \" / \", game === null || game === void 0 ? void 0 : game.max_batches]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 33\n              }, this), currentBatchTarget && /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: 0.5\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  sx: {\n                    fontWeight: 500\n                  },\n                  children: \"Target:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 467,\n                  columnNumber: 41\n                }, this), renderCoin(currentBatchTarget, false, true)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 466,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"textSecondary\",\n              children: \"Current Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                fontSize: '1.1rem'\n              },\n              children: player.current_tasks.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"textSecondary\",\n              children: \"Completed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                fontSize: '1.1rem'\n              },\n              children: player.completed_tasks.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              color: 'primary.main',\n              fontWeight: 500,\n              mb: 1\n            },\n            children: \"Current Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 25\n          }, this), renderTaskRow(player.current_tasks, player.name)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 21\n        }, this), player.completed_tasks.length > 0 && game && player.order === game.players.length - 1 && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            sx: {\n              color: 'primary.main',\n              fontWeight: 500,\n              mb: 1\n            },\n            children: \"Completed Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 29\n          }, this), renderTaskRow(player.completed_tasks, player.name)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 13\n    }, this);\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n  const formatTime = milliseconds => {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTime(totalTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteGame = () => {\n    setShowResultPage(true);\n  };\n  const handleReturnToMain = () => {\n    window.location.reload();\n  };\n  const renderResultPage = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 600,\n          width: '100%',\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            mb: 3,\n            color: 'primary.main'\n          },\n          children: \"Game Complete! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            mb: 4\n          },\n          children: [\"Total Time: \", formatTime(totalTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMain,\n          size: \"large\",\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 13\n    }, this);\n  };\n  const getBatchTotalTime = batchNum => {\n    if (!game) return 0;\n    const batchTimes = game.players.map(player => {\n      var _batchCompletionTimes;\n      return ((_batchCompletionTimes = batchCompletionTimes[player.id]) === null || _batchCompletionTimes === void 0 ? void 0 : _batchCompletionTimes[batchNum]) || 0;\n    }).filter(time => time > 0);\n    return batchTimes.length > 0 ? Math.max(...batchTimes) : 0;\n  };\n  const renderStatistics = () => /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      height: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mb: 2,\n          color: 'primary.main',\n          fontSize: '1.5rem',\n          fontWeight: 'bold'\n        },\n        children: \"Game Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 17\n      }, this), Array.from({\n        length: (game === null || game === void 0 ? void 0 : game.max_batches) || 0\n      }, (_, i) => i + 1).map(batchNum => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 4,\n          backgroundColor: 'background.paper',\n          borderRadius: 2,\n          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n          overflow: 'hidden'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            p: 2,\n            backgroundColor: 'primary.main',\n            color: 'white',\n            fontWeight: 'bold'\n          },\n          children: [\"Batch \", batchNum]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  sx: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"Player\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 661,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  sx: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 662,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  sx: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 663,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 660,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 659,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [game === null || game === void 0 ? void 0 : game.players.map(player => {\n                var _batchCompletionTimes2;\n                const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n                const isCompleted = batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                const completionTime = (_batchCompletionTimes2 = batchCompletionTimes[player.id]) === null || _batchCompletionTimes2 === void 0 ? void 0 : _batchCompletionTimes2[batchNum];\n                let status = 'Pending';\n                if (isCompleted) {\n                  status = 'Completed';\n                } else if (batchTasks.some(t => t.status === TaskStatus.IN_PROGRESS)) {\n                  status = 'In Progress';\n                }\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: player.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 684,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: completionTime ? formatTime(completionTime) : '-'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 685,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: /*#__PURE__*/_jsxDEV(Chip, {\n                      label: status,\n                      size: \"small\",\n                      sx: {\n                        backgroundColor: status === 'Completed' ? '#4caf50' : status === 'In Progress' ? '#ff9800' : '#9e9e9e',\n                        color: 'white',\n                        fontWeight: 'bold',\n                        minWidth: '90px'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 689,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 688,\n                    columnNumber: 49\n                  }, this)]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 683,\n                  columnNumber: 45\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(TableRow, {\n                sx: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                  '& td': {\n                    fontWeight: 'bold'\n                  }\n                },\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Total\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 708,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: formatTime(getBatchTotalTime(batchNum))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 709,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 712,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 704,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 25\n        }, this)]\n      }, batchNum, true, {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 630,\n    columnNumber: 9\n  }, this);\n  if (showResultPage) {\n    return renderResultPage();\n  }\n  if (!gameId || !playerId) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          mb: 4,\n          mt: 4,\n          background: 'linear-gradient(45deg, #2196f3 30%, #21CBF3 90%)',\n          p: 3,\n          borderRadius: 2,\n          boxShadow: '0 3px 5px 2px rgba(33, 150, 243, .3)',\n          color: 'white',\n          width: '100%',\n          maxWidth: 800\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 1\n          },\n          children: \"Online Multiplayer Coin Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          children: \"Flip coins with your friends in this multiplayer game!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 752,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 737,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: '100%',\n          maxWidth: 800,\n          backgroundColor: 'white',\n          borderRadius: 2,\n          boxShadow: '0 3px 10px rgba(0,0,0,0.1)',\n          p: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tabs, {\n          value: activeTab,\n          onChange: handleTabChange,\n          sx: {\n            mb: 3,\n            borderBottom: 1,\n            borderColor: 'divider'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 774,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 775,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 21\n        }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          sx: {\n            mb: 2\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 25\n        }, this), activeTab === 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Your Name\",\n              value: playerName,\n              onChange: e => setPlayerName(e.target.value),\n              required: true,\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 787,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 786,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Number of Players\",\n              type: \"number\",\n              value: playerCount,\n              onChange: e => setPlayerCount(Number(e.target.value)),\n              inputProps: {\n                min: 2,\n                max: 5\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 798,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Number of Batches\",\n              type: \"number\",\n              value: maxBatches,\n              onChange: e => setMaxBatches(Number(e.target.value)),\n              inputProps: {\n                min: 1,\n                max: 10\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 810,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 809,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Coins per Batch\",\n              type: \"number\",\n              value: coinsPerBatch,\n              onChange: e => setCoinsPerBatch(Number(e.target.value)),\n              inputProps: {\n                min: 1,\n                max: 10\n              },\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 822,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 821,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleCreateGame,\n              disabled: !playerName,\n              sx: {\n                mt: 2\n              },\n              size: \"large\",\n              children: \"Create Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 834,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 833,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Game ID\",\n              value: joinGameId,\n              onChange: e => setJoinGameId(e.target.value.toUpperCase()),\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 848,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 847,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Player Name\",\n              value: playerName,\n              onChange: e => setPlayerName(e.target.value),\n              autoComplete: \"off\",\n              sx: {\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 858,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 857,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleJoinGame,\n              sx: {\n                mt: 2\n              },\n              size: \"large\",\n              children: \"Join Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 868,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 867,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 729,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3,\n      backgroundColor: 'background.default',\n      minHeight: '100vh'\n    },\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 887,\n      columnNumber: 17\n    }, this), game && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 1,\n              color: 'primary.main'\n            },\n            children: [\"Game ID: \", game.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 901,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              color: 'text.primary'\n            },\n            children: [\"Game Status: \", game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 904,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 900,\n          columnNumber: 25\n        }, this), (game.status === 'in_progress' || game.status === 'completed') && startTime && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'text.secondary'\n          },\n          children: [\"Time: \", formatTime(game.status === 'completed' && endTime ? endTime - startTime : currentTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 894,\n        columnNumber: 21\n      }, this), game.status === 'waiting' && playerId === ((_game$players$ = game.players[0]) === null || _game$players$ === void 0 ? void 0 : _game$players$.id) && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartGame,\n        sx: {\n          mb: 3\n        },\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 3,\n            children: game.players.map(renderPlayer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 928,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 927,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: renderStatistics()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 934,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 925,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 885,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"GcOi/YEsSs1U7gyNwqc+xOgMRQM=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Alert","Chip","keyframes","Stack","TableContainer","Table","TableHead","TableBody","TableCell","TableRow","TaskStatus","PlayerStatus","TaskType","gameService","WebSocketService","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","gameId","initialGameId","_s","_game$players$","setGameId","game","setGame","playerName","setPlayerName","playerId","setPlayerId","wsService","setWsService","showJoinDialog","setShowJoinDialog","playerCount","setPlayerCount","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","error","setError","activeTab","setActiveTab","startTime","setStartTime","endTime","setEndTime","showCompletionDialog","setShowCompletionDialog","currentTime","setCurrentTime","showResultPage","setShowResultPage","batchStartTimes","setBatchStartTimes","batchCompletionTimes","setBatchCompletionTimes","service","updatedGame","console","log","connect","disconnect","status","Date","now","timerInterval","setInterval","clearInterval","tasks","newBatchStartTimes","forEach","task","IN_PROGRESS","batch_number","newCompletionTimes","players","player","id","batchNum","max_batches","batchTasks","filter","t","assigned_to","length","every","COMPLETED","handleCreateGame","newGameId","createGame","newPlayerId","joinGame","gameState","getGameState","handleJoinGame","targetGameId","exists","checkGameExists","handleStartGame","startGame","flipAnimation","flippingStates","setFlippingStates","renderCoin","type","isFlipping","isSmall","onClick","taskId","flipState","undefined","displayType","showOpposite","HEADS","TAILS","sx","width","height","borderRadius","display","alignItems","justifyContent","backgroundColor","border","color","fontWeight","fontSize","animation","perspective","mb","position","cursor","transition","transform","boxShadow","content","top","left","right","bottom","background","pointerEvents","children","fileName","_jsxFileName","lineNumber","columnNumber","handleCompleteTask","prev","setTimeout","completeTask","newState","getPlayerStatusColor","ACTIVE","WAITING","IDLE","getTaskStatusColor","PENDING","renderTaskRow","rows","i","push","slice","map","rowTasks","rowIndex","gap","flexWrap","_flippingStates$task$","_flippingStates$task$2","minWidth","overflow","p","pb","flexDirection","mt","label","size","padding","renderPlayer","_player$completed_tas","currentBatchTarget","current_tasks","completed_tasks","find","current_batch","variant","name","container","spacing","item","xs","order","handleTabChange","_","newValue","handleGameComplete","formatTime","milliseconds","seconds","Math","floor","minutes","remainingSeconds","toString","padStart","renderCompletionDialog","totalTime","open","onClose","PaperProps","textAlign","py","window","location","reload","handleCompleteGame","handleReturnToMain","renderResultPage","minHeight","maxWidth","getBatchTotalTime","batchTimes","_batchCompletionTimes","time","max","renderStatistics","Array","from","align","_batchCompletionTimes2","isCompleted","completionTime","some","value","onChange","borderBottom","borderColor","severity","fullWidth","e","target","required","autoComplete","md","Number","inputProps","min","disabled","toUpperCase","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes,\n    Stack,\n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableCell,\n    TableRow,\n    Paper\n} from '@mui/material';\nimport { Game as GameType, Player, Task, TaskStatus, PlayerStatus, TaskType } from '../types';\nimport { gameService, WebSocketService } from '../services/gameService';\n\ninterface GameProps {\n    gameId?: string;\n}\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    const [gameId, setGameId] = useState<string | undefined>(initialGameId);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(!initialGameId);\n    const [playerCount, setPlayerCount] = useState(2);\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [activeTab, setActiveTab] = useState(0);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n    const [batchStartTimes, setBatchStartTimes] = useState<{\n        [batchNumber: number]: number;\n    }>({});\n    const [batchCompletionTimes, setBatchCompletionTimes] = useState<{\n        [playerId: string]: {\n            [batchNumber: number]: number;\n        };\n    }>({});\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, (updatedGame) => {\n                console.log('Game state updated:', updatedGame);\n                setGame(updatedGame);\n            });\n            service.connect();\n            setWsService(service);\n\n            // Cleanup function\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && startTime) {\n            timerInterval = setInterval(() => {\n                setCurrentTime(Date.now() - startTime);\n            }, 1000);\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, startTime, endTime]);\n\n    useEffect(() => {\n        if (game?.tasks && game.status === 'in_progress') {\n            const newBatchStartTimes = { ...batchStartTimes };\n            \n            // Check for new batches that have started\n            game.tasks.forEach(task => {\n                if (task.status === TaskStatus.IN_PROGRESS && !newBatchStartTimes[task.batch_number]) {\n                    newBatchStartTimes[task.batch_number] = Date.now();\n                }\n            });\n            \n            setBatchStartTimes(newBatchStartTimes);\n        }\n    }, [game?.tasks, game?.status]);\n\n    useEffect(() => {\n        if (game?.tasks && game.status === 'in_progress') {\n            const newCompletionTimes = { ...batchCompletionTimes };\n            \n            game.players.forEach(player => {\n                if (!newCompletionTimes[player.id]) {\n                    newCompletionTimes[player.id] = {};\n                }\n                \n                // Check each batch\n                for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    // If all tasks in this batch are completed and we haven't recorded time yet\n                    if (batchTasks.length > 0 && \n                        batchTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                        !newCompletionTimes[player.id][batchNum] &&\n                        batchStartTimes[batchNum]) {\n                        // Calculate time from batch start to completion\n                        newCompletionTimes[player.id][batchNum] = Date.now() - batchStartTimes[batchNum];\n                    }\n                }\n            });\n            \n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.tasks, game?.status, batchStartTimes]);\n\n    const handleCreateGame = async () => {\n        if (!playerName) {\n            setError('Please enter your name first');\n            return;\n        }\n\n        try {\n            const newGameId = await gameService.createGame(playerCount, maxBatches, coinsPerBatch);\n            setGameId(newGameId);\n            \n            // Automatically join the game as the creator\n            const newPlayerId = await gameService.joinGame(newGameId, playerName);\n            setPlayerId(newPlayerId);\n            \n            // Get initial game state\n            const gameState = await gameService.getGameState(newGameId);\n            setGame(gameState);\n            \n            // Reset all input fields\n            setPlayerName('');\n            setPlayerCount(2);\n            setMaxBatches(3);\n            setCoinsPerBatch(2);\n            setJoinGameId('');\n            setError(null);\n        } catch (error) {\n            setError('Failed to create game. Please try again.');\n            console.error('Error creating game:', error);\n        }\n    };\n\n    const handleJoinGame = async () => {\n        if (!playerName) {\n            setError('Please enter player name');\n            return;\n        }\n\n        const targetGameId = gameId || joinGameId;\n        if (!targetGameId) {\n            setError('Please enter game ID');\n            return;\n        }\n\n        try {\n            const exists = await gameService.checkGameExists(targetGameId);\n            if (!exists) {\n                setError('Game not found');\n                return;\n            }\n\n            const newPlayerId = await gameService.joinGame(targetGameId, playerName);\n            setPlayerId(newPlayerId);\n            setGameId(targetGameId);\n            setShowJoinDialog(false);\n            const gameState = await gameService.getGameState(targetGameId);\n            setGame(gameState);\n            \n            // Reset all input fields\n            setPlayerName('');\n            setPlayerCount(2);\n            setMaxBatches(3);\n            setCoinsPerBatch(2);\n            setJoinGameId('');\n            setError(null);\n        } catch (error) {\n            setError('Failed to join game. Please try again.');\n            console.error('Error joining game:', error);\n        }\n    };\n\n    const handleStartGame = async () => {\n        if (!gameId) return;\n\n        try {\n            await gameService.startGame(gameId);\n            setError(null);\n        } catch (error) {\n            setError('Failed to start game. Please try again.');\n            console.error('Error starting game:', error);\n        }\n    };\n\n    const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n    const [flippingStates, setFlippingStates] = useState<{[key: string]: { isFlipping: boolean; showOpposite: boolean }}>({});\n\n    const renderCoin = (type: TaskType, isFlipping: boolean, isSmall: boolean = false, onClick?: () => void, taskId?: string) => {\n        const flipState = taskId ? flippingStates[taskId] : undefined;\n        const displayType = (flipState?.showOpposite ? (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) : type);\n        \n        return (\n            <Box\n                sx={{\n                    width: isSmall ? 20 : 32,\n                    height: isSmall ? 20 : 32,\n                    borderRadius: '50%',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    backgroundColor: displayType === TaskType.HEADS ? '#FFD700' : '#DAA520',\n                    border: `${isSmall ? 1 : 2}px solid #B8860B`,\n                    color: '#704214',\n                    fontWeight: 'bold',\n                    fontSize: isSmall ? '0.6rem' : '0.8rem',\n                    animation: isFlipping ? `${flipAnimation} 0.6s ease-in-out` : 'none',\n                    perspective: 1000,\n                    mb: isSmall ? 0 : 1,\n                    position: 'relative',\n                    cursor: onClick ? 'pointer' : 'default',\n                    transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n                    '&:hover': onClick ? {\n                        transform: 'scale(1.05)',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n                    } : {},\n                    '&:active': onClick ? {\n                        transform: 'scale(0.95)'\n                    } : {},\n                    '&::after': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        borderRadius: '50%',\n                        background: 'linear-gradient(135deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0.1) 100%)',\n                        pointerEvents: 'none'\n                    }\n                }}\n                onClick={onClick}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    const handleCompleteTask = (taskId: string) => {\n        if (wsService) {\n            // 开始翻转动画\n            setFlippingStates(prev => ({\n                ...prev,\n                [taskId]: { isFlipping: true, showOpposite: false }\n            }));\n\n            // 在动画中途改变显示的面\n            setTimeout(() => {\n                setFlippingStates(prev => ({\n                    ...prev,\n                    [taskId]: { isFlipping: true, showOpposite: true }\n                }));\n            }, 300);\n\n            // 动画结束后发送完成信息\n            setTimeout(() => {\n                wsService.completeTask(taskId);\n                setFlippingStates(prev => {\n                    const newState = { ...prev };\n                    delete newState[taskId];\n                    return newState;\n                });\n            }, 600);\n        }\n    };\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    const renderTaskRow = (tasks: Task[], playerName: string) => {\n        // 将任务分组为每行最多5个\n        const rows: Task[][] = [];\n        for (let i = 0; i < tasks.length; i += 5) {\n            rows.push(tasks.slice(i, i + 5));\n        }\n\n        return rows.map((rowTasks, rowIndex) => (\n            <Box \n                key={`row-${rowIndex}`} \n                sx={{ \n                    display: 'flex', \n                    gap: 1,\n                    mb: 1,\n                    flexWrap: 'nowrap',\n                    justifyContent: 'flex-start'\n                }}\n            >\n                {rowTasks.map(task => (\n                    <Card \n                        key={`${task.id}-${playerName}-${task.batch_number}`} \n                        sx={{ \n                            width: 100,\n                            minWidth: 100,\n                            backgroundColor: 'background.paper',\n                            position: 'relative',\n                            overflow: 'visible'\n                        }}\n                    >\n                        <CardContent sx={{ \n                            p: '8px !important',\n                            pb: '8px !important',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                        }}>\n                            {renderCoin(\n                                task.type, \n                                flippingStates[task.id]?.isFlipping || false,\n                                false,\n                                task.status === TaskStatus.PENDING && task.assigned_to === playerId && !flippingStates[task.id]?.isFlipping\n                                    ? () => handleCompleteTask(task.id)\n                                    : undefined,\n                                task.id\n                            )}\n                            <Box sx={{ width: '100%', mt: 0.5 }}>\n                                <Chip\n                                    label={task.status}\n                                    size=\"small\"\n                                    sx={{\n                                        backgroundColor: getTaskStatusColor(task.status),\n                                        color: 'white',\n                                        fontWeight: 500,\n                                        width: '100%',\n                                        height: '20px',\n                                        '& .MuiChip-label': {\n                                            fontSize: '0.65rem',\n                                            padding: '0 4px'\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        </CardContent>\n                    </Card>\n                ))}\n            </Box>\n        ));\n    };\n\n    const renderPlayer = (player: Player) => {\n        const currentBatchTarget = player.current_tasks.length > 0 \n            ? player.current_tasks[0].type \n            : player.completed_tasks.find(t => t.batch_number === player.current_batch)?.type;\n\n        return (\n            <Card sx={{ height: '100%' }}>\n                <CardContent sx={{ p: 2 }}>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n                        <Typography variant=\"h6\" sx={{ \n                            color: 'primary.main',\n                            fontSize: '1.1rem'\n                        }}>{player.name}</Typography>\n                        <Chip\n                            label={player.status}\n                            size=\"small\"\n                            color={getPlayerStatusColor(player.status)}\n                            sx={{ \n                                fontWeight: 500,\n                                height: '24px'\n                            }}\n                        />\n                    </Box>\n                    <Grid container spacing={1} sx={{ mb: 2 }}>\n                        <Grid item xs={12}>\n                            <Box sx={{ \n                                display: 'flex', \n                                alignItems: 'center', \n                                gap: 1,\n                                mb: 1,\n                                backgroundColor: 'rgba(33, 150, 243, 0.1)',\n                                p: 1,\n                                borderRadius: 1\n                            }}>\n                                <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\n                                    Current Batch: {player.current_batch} / {game?.max_batches}\n                                </Typography>\n                                {currentBatchTarget && (\n                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                                        <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\n                                            Target:\n                                        </Typography>\n                                        {renderCoin(currentBatchTarget, false, true)}\n                                    </Box>\n                                )}\n                            </Box>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Typography variant=\"body2\" color=\"textSecondary\">Current Tasks</Typography>\n                            <Typography variant=\"h6\" sx={{ fontSize: '1.1rem' }}>{player.current_tasks.length}</Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Typography variant=\"body2\" color=\"textSecondary\">Completed</Typography>\n                            <Typography variant=\"h6\" sx={{ fontSize: '1.1rem' }}>{player.completed_tasks.length}</Typography>\n                        </Grid>\n                    </Grid>\n                    <Box sx={{ mt: 2 }}>\n                        <Typography variant=\"subtitle2\" sx={{ color: 'primary.main', fontWeight: 500, mb: 1 }}>\n                            Current Tasks\n                        </Typography>\n                        {renderTaskRow(player.current_tasks, player.name)}\n                    </Box>\n                    {player.completed_tasks.length > 0 && game && player.order === game.players.length - 1 && (\n                        <Box sx={{ mt: 2 }}>\n                            <Typography variant=\"subtitle2\" sx={{ color: 'primary.main', fontWeight: 500, mb: 1 }}>\n                                Completed Tasks\n                            </Typography>\n                            {renderTaskRow(player.completed_tasks, player.name)}\n                        </Box>\n                    )}\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    const formatTime = (milliseconds: number) => {\n        const seconds = Math.floor(milliseconds / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed!\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTime(totalTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    const handleReturnToMain = () => {\n        window.location.reload();\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTime(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMain}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    const getBatchTotalTime = (batchNum: number): number => {\n        if (!game) return 0;\n        const batchTimes = game.players\n            .map(player => batchCompletionTimes[player.id]?.[batchNum] || 0)\n            .filter(time => time > 0);\n        return batchTimes.length > 0 ? Math.max(...batchTimes) : 0;\n    };\n\n    const renderStatistics = () => (\n        <Card sx={{ height: '100%' }}>\n            <CardContent>\n                <Typography variant=\"h6\" sx={{ \n                    mb: 2, \n                    color: 'primary.main',\n                    fontSize: '1.5rem',\n                    fontWeight: 'bold'\n                }}>\n                    Game Statistics\n                </Typography>\n                \n                {Array.from({ length: game?.max_batches || 0 }, (_, i) => i + 1).map(batchNum => (\n                    <Box key={batchNum} sx={{ \n                        mb: 4,\n                        backgroundColor: 'background.paper',\n                        borderRadius: 2,\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n                        overflow: 'hidden'\n                    }}>\n                        <Typography variant=\"h6\" sx={{ \n                            p: 2, \n                            backgroundColor: 'primary.main',\n                            color: 'white',\n                            fontWeight: 'bold'\n                        }}>\n                            Batch {batchNum}\n                        </Typography>\n                        <TableContainer>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell sx={{ fontWeight: 'bold' }}>Player</TableCell>\n                                        <TableCell align=\"right\" sx={{ fontWeight: 'bold' }}>Time</TableCell>\n                                        <TableCell align=\"right\" sx={{ fontWeight: 'bold' }}>Status</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {game?.players.map(player => {\n                                        const batchTasks = game.tasks.filter(t => \n                                            t.batch_number === batchNum && \n                                            t.assigned_to === player.id\n                                        );\n                                        const isCompleted = batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                                        const completionTime = batchCompletionTimes[player.id]?.[batchNum];\n                                        \n                                        let status = 'Pending';\n                                        if (isCompleted) {\n                                            status = 'Completed';\n                                        } else if (batchTasks.some(t => t.status === TaskStatus.IN_PROGRESS)) {\n                                            status = 'In Progress';\n                                        }\n                                        \n                                        return (\n                                            <TableRow key={player.id}>\n                                                <TableCell>{player.name}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    {completionTime ? formatTime(completionTime) : '-'}\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Chip \n                                                        label={status}\n                                                        size=\"small\"\n                                                        sx={{\n                                                            backgroundColor: status === 'Completed' ? '#4caf50' : \n                                                                           status === 'In Progress' ? '#ff9800' : '#9e9e9e',\n                                                            color: 'white',\n                                                            fontWeight: 'bold',\n                                                            minWidth: '90px'\n                                                        }}\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                    <TableRow sx={{ \n                                        backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                                        '& td': { fontWeight: 'bold' }\n                                    }}>\n                                        <TableCell>Total</TableCell>\n                                        <TableCell align=\"right\">\n                                            {formatTime(getBatchTotalTime(batchNum))}\n                                        </TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Box>\n                ))}\n            </CardContent>\n        </Card>\n    );\n\n    if (showResultPage) {\n        return renderResultPage();\n    }\n\n    if (!gameId || !playerId) {\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n            }}>\n                <Box sx={{ \n                    textAlign: 'center', \n                    mb: 4,\n                    mt: 4,\n                    background: 'linear-gradient(45deg, #2196f3 30%, #21CBF3 90%)',\n                    p: 3,\n                    borderRadius: 2,\n                    boxShadow: '0 3px 5px 2px rgba(33, 150, 243, .3)',\n                    color: 'white',\n                    width: '100%',\n                    maxWidth: 800\n                }}>\n                    <Typography variant=\"h3\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                        Online Multiplayer Coin Game\n                    </Typography>\n                    <Typography variant=\"subtitle1\">\n                        Flip coins with your friends in this multiplayer game!\n                    </Typography>\n                </Box>\n\n                <Box sx={{ \n                    width: '100%', \n                    maxWidth: 800,\n                    backgroundColor: 'white',\n                    borderRadius: 2,\n                    boxShadow: '0 3px 10px rgba(0,0,0,0.1)',\n                    p: 3\n                }}>\n                    <Tabs \n                        value={activeTab} \n                        onChange={handleTabChange} \n                        sx={{ \n                            mb: 3,\n                            borderBottom: 1,\n                            borderColor: 'divider'\n                        }}\n                    >\n                        <Tab label=\"Create Game\" />\n                        <Tab label=\"Join Game\" />\n                    </Tabs>\n\n                    {error && (\n                        <Alert severity=\"error\" sx={{ mb: 2 }}>\n                            {error}\n                        </Alert>\n                    )}\n\n                    {activeTab === 0 ? (\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Your Name\"\n                                    value={playerName}\n                                    onChange={(e) => setPlayerName(e.target.value)}\n                                    required\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Number of Players\"\n                                    type=\"number\"\n                                    value={playerCount}\n                                    onChange={(e) => setPlayerCount(Number(e.target.value))}\n                                    inputProps={{ min: 2, max: 5 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Number of Batches\"\n                                    type=\"number\"\n                                    value={maxBatches}\n                                    onChange={(e) => setMaxBatches(Number(e.target.value))}\n                                    inputProps={{ min: 1, max: 10 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={4}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Coins per Batch\"\n                                    type=\"number\"\n                                    value={coinsPerBatch}\n                                    onChange={(e) => setCoinsPerBatch(Number(e.target.value))}\n                                    inputProps={{ min: 1, max: 10 }}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button \n                                    variant=\"contained\" \n                                    onClick={handleCreateGame}\n                                    disabled={!playerName}\n                                    sx={{ mt: 2 }}\n                                    size=\"large\"\n                                >\n                                    Create Game\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    ) : (\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Game ID\"\n                                    value={joinGameId}\n                                    onChange={(e) => setJoinGameId(e.target.value.toUpperCase())}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Player Name\"\n                                    value={playerName}\n                                    onChange={(e) => setPlayerName(e.target.value)}\n                                    autoComplete=\"off\"\n                                    sx={{ backgroundColor: 'white' }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button \n                                    variant=\"contained\" \n                                    onClick={handleJoinGame}\n                                    sx={{ mt: 2 }}\n                                    size=\"large\"\n                                >\n                                    Join Game\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Box>\n            </Box>\n        );\n    }\n\n    return (\n        <Box sx={{ p: 3, backgroundColor: 'background.default', minHeight: '100vh' }}>\n            {error && (\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\n                    {error}\n                </Alert>\n            )}\n\n            {game && (\n                <>\n                    <Box sx={{ \n                        display: 'flex', \n                        justifyContent: 'space-between', \n                        alignItems: 'center',\n                        mb: 3\n                    }}>\n                        <Box>\n                            <Typography variant=\"h4\" sx={{ mb: 1, color: 'primary.main' }}>\n                                Game ID: {game.id}\n                            </Typography>\n                            <Typography variant=\"h5\" sx={{ color: 'text.primary' }}>\n                                Game Status: {game.status === 'waiting' ? 'Waiting' : game.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                            </Typography>\n                        </Box>\n                        {(game.status === 'in_progress' || game.status === 'completed') && startTime && (\n                            <Typography variant=\"h6\" sx={{ color: 'text.secondary' }}>\n                                Time: {formatTime(game.status === 'completed' && endTime ? endTime - startTime : currentTime)}\n                            </Typography>\n                        )}\n                    </Box>\n\n                    {game.status === 'waiting' && playerId === game.players[0]?.id && (\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleStartGame}\n                            sx={{ mb: 3 }}\n                        >\n                            Start Game\n                        </Button>\n                    )}\n\n                    <Grid container spacing={3}>\n                        {/* Left column: Player cards */}\n                        <Grid item xs={12} md={7}>\n                            <Stack spacing={3}>\n                                {game.players.map(renderPlayer)}\n                            </Stack>\n                        </Grid>\n\n                        {/* Right column: Results and statistics */}\n                        <Grid item xs={12} md={5}>\n                            {renderStatistics()}\n                        </Grid>\n                    </Grid>\n                </>\n            )}\n        </Box>\n    );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}