{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\nexport const gameService = {\n  createGame: async (playerCount, maxBatches, tasksPerBatch) => {\n    console.log('Creating game with params:', {\n      playerCount,\n      maxBatches,\n      tasksPerBatch\n    });\n    const response = await axios.post(`${API_URL}/games/create`, null, {\n      params: {\n        player_count: playerCount,\n        max_batches: maxBatches,\n        tasks_per_batch: tasksPerBatch\n      }\n    });\n    console.log('Game created:', response.data);\n    return response.data.game_id;\n  },\n  checkGameExists: async gameId => {\n    console.log('Checking if game exists:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n    console.log('Game exists response:', response.data);\n    return response.data.exists;\n  },\n  joinGame: async (gameId, playerName) => {\n    console.log('Joining game:', {\n      gameId,\n      playerName\n    });\n    const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n      params: {\n        player_name: playerName\n      }\n    });\n    console.log('Join game response:', response.data);\n    return response.data.player_id;\n  },\n  startGame: async gameId => {\n    console.log('Starting game:', gameId);\n    await axios.post(`${API_URL}/games/${gameId}/start`);\n    console.log('Game started');\n  },\n  getGameState: async gameId => {\n    console.log('Getting game state:', gameId);\n    const response = await axios.get(`${API_URL}/games/${gameId}`);\n    console.log('Game state:', response.data);\n    return response.data;\n  }\n};\nexport class WebSocketService {\n  // 5 seconds\n\n  constructor(gameId, playerId, onGameUpdate) {\n    this.ws = null;\n    this.gameId = void 0;\n    this.playerId = void 0;\n    this.onGameUpdate = void 0;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.isConnecting = false;\n    this.connectionTimeout = null;\n    this.CONNECTION_TIMEOUT = 5000;\n    this.gameId = gameId;\n    this.playerId = playerId;\n    this.onGameUpdate = onGameUpdate;\n    console.log('WebSocket service initialized:', {\n      gameId,\n      playerId\n    });\n  }\n  async connect() {\n    if (this.isConnecting) {\n      console.log('Connection attempt already in progress');\n      return;\n    }\n    this.isConnecting = true;\n    console.log('Connecting WebSocket...');\n    try {\n      await this.establishConnection();\n      console.log('WebSocket connected successfully');\n    } catch (error) {\n      console.error('Error establishing connection:', error);\n      this.handleReconnect();\n      throw error;\n    } finally {\n      this.isConnecting = false;\n    }\n  }\n  establishConnection() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.ws = new WebSocket(`${WS_URL}/ws/${this.playerId}`);\n\n        // 设置连接超时\n        this.connectionTimeout = setTimeout(() => {\n          var _this$ws;\n          if (((_this$ws = this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.readyState) !== WebSocket.OPEN) {\n            console.error('Connection timeout');\n            this.cleanup();\n            reject(new Error('Connection timeout'));\n          }\n        }, this.CONNECTION_TIMEOUT);\n        this.ws.onopen = () => {\n          console.log('WebSocket connection opened');\n          if (this.connectionTimeout) {\n            clearTimeout(this.connectionTimeout);\n            this.connectionTimeout = null;\n          }\n          this.reconnectAttempts = 0;\n          this.getGameState();\n          resolve();\n        };\n        this.ws.onmessage = this.handleMessage.bind(this);\n        this.ws.onclose = this.handleClose.bind(this);\n        this.ws.onerror = error => {\n          console.error('WebSocket error:', error);\n          reject(error);\n        };\n      } catch (error) {\n        console.error('Error creating WebSocket:', error);\n        reject(error);\n      }\n    });\n  }\n  handleMessage(event) {\n    try {\n      const message = JSON.parse(event.data);\n      console.log('WebSocket message received:', message);\n      if (message.type === 'game_update' || message.type === 'game_started') {\n        console.log('Updating game state:', message.data);\n        this.onGameUpdate(message.data);\n      }\n    } catch (error) {\n      console.error('Error processing message:', error);\n    }\n  }\n  handleClose(event) {\n    console.log('WebSocket connection closed:', event.code, event.reason);\n    this.cleanup();\n    this.handleReconnect();\n  }\n  cleanup() {\n    if (this.connectionTimeout) {\n      clearTimeout(this.connectionTimeout);\n      this.connectionTimeout = null;\n    }\n    if (this.ws) {\n      try {\n        this.ws.close();\n      } catch (error) {\n        console.error('Error closing WebSocket:', error);\n      }\n      this.ws = null;\n    }\n  }\n  async getGameState() {\n    try {\n      const gameState = await gameService.getGameState(this.gameId);\n      this.onGameUpdate(gameState);\n    } catch (error) {\n      console.error('Error getting game state:', error);\n    }\n  }\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts - 1), 10000);\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts}) in ${delay}ms...`);\n      setTimeout(() => this.connect(), delay);\n    }\n  }\n  completeTask(taskId) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      const message = {\n        type: 'complete_task',\n        game_id: this.gameId,\n        task_id: taskId\n      };\n      console.log('Sending complete task message:', message);\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket not connected');\n      this.connect().catch(error => {\n        console.error('Failed to reconnect:', error);\n      });\n    }\n  }\n  disconnect() {\n    console.log('Disconnecting WebSocket');\n    this.cleanup();\n  }\n}","map":{"version":3,"names":["axios","API_URL","WS_URL","gameService","createGame","playerCount","maxBatches","tasksPerBatch","console","log","response","post","params","player_count","max_batches","tasks_per_batch","data","game_id","checkGameExists","gameId","get","exists","joinGame","playerName","player_name","player_id","startGame","getGameState","WebSocketService","constructor","playerId","onGameUpdate","ws","reconnectAttempts","maxReconnectAttempts","isConnecting","connectionTimeout","CONNECTION_TIMEOUT","connect","establishConnection","error","handleReconnect","Promise","resolve","reject","WebSocket","setTimeout","_this$ws","readyState","OPEN","cleanup","Error","onopen","clearTimeout","onmessage","handleMessage","bind","onclose","handleClose","onerror","event","message","JSON","parse","type","code","reason","close","gameState","delay","Math","min","pow","completeTask","taskId","task_id","send","stringify","catch","disconnect"],"sources":["/Users/huanghao/Desktop/online multiplayer coin game/frontend/src/services/gameService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Game, WebSocketMessage } from '../types';\n\nconst API_URL = 'http://172.20.10.4:8000';\nconst WS_URL = 'ws://172.20.10.4:8000';\n\nexport const gameService = {\n    createGame: async (playerCount: number, maxBatches: number, tasksPerBatch: number): Promise<string> => {\n        console.log('Creating game with params:', { playerCount, maxBatches, tasksPerBatch });\n        const response = await axios.post(`${API_URL}/games/create`, null, {\n            params: { player_count: playerCount, max_batches: maxBatches, tasks_per_batch: tasksPerBatch }\n        });\n        console.log('Game created:', response.data);\n        return response.data.game_id;\n    },\n\n    checkGameExists: async (gameId: string): Promise<boolean> => {\n        console.log('Checking if game exists:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}/exists`);\n        console.log('Game exists response:', response.data);\n        return response.data.exists;\n    },\n\n    joinGame: async (gameId: string, playerName: string): Promise<string> => {\n        console.log('Joining game:', { gameId, playerName });\n        const response = await axios.post(`${API_URL}/games/${gameId}/join`, null, {\n            params: { player_name: playerName }\n        });\n        console.log('Join game response:', response.data);\n        return response.data.player_id;\n    },\n\n    startGame: async (gameId: string): Promise<void> => {\n        console.log('Starting game:', gameId);\n        await axios.post(`${API_URL}/games/${gameId}/start`);\n        console.log('Game started');\n    },\n\n    getGameState: async (gameId: string): Promise<Game> => {\n        console.log('Getting game state:', gameId);\n        const response = await axios.get(`${API_URL}/games/${gameId}`);\n        console.log('Game state:', response.data);\n        return response.data;\n    }\n};\n\nexport class WebSocketService {\n    private ws: WebSocket | null = null;\n    private gameId: string;\n    private playerId: string;\n    private onGameUpdate: (game: Game) => void;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = 5;\n    private isConnecting: boolean = false;\n    private connectionTimeout: NodeJS.Timeout | null = null;\n    private readonly CONNECTION_TIMEOUT = 5000; // 5 seconds\n\n    constructor(gameId: string, playerId: string, onGameUpdate: (game: Game) => void) {\n        this.gameId = gameId;\n        this.playerId = playerId;\n        this.onGameUpdate = onGameUpdate;\n        console.log('WebSocket service initialized:', { gameId, playerId });\n    }\n\n    async connect(): Promise<void> {\n        if (this.isConnecting) {\n            console.log('Connection attempt already in progress');\n            return;\n        }\n\n        this.isConnecting = true;\n        console.log('Connecting WebSocket...');\n\n        try {\n            await this.establishConnection();\n            console.log('WebSocket connected successfully');\n        } catch (error) {\n            console.error('Error establishing connection:', error);\n            this.handleReconnect();\n            throw error;\n        } finally {\n            this.isConnecting = false;\n        }\n    }\n\n    private establishConnection(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            try {\n                this.ws = new WebSocket(`${WS_URL}/ws/${this.playerId}`);\n                \n                // 设置连接超时\n                this.connectionTimeout = setTimeout(() => {\n                    if (this.ws?.readyState !== WebSocket.OPEN) {\n                        console.error('Connection timeout');\n                        this.cleanup();\n                        reject(new Error('Connection timeout'));\n                    }\n                }, this.CONNECTION_TIMEOUT);\n\n                this.ws.onopen = () => {\n                    console.log('WebSocket connection opened');\n                    if (this.connectionTimeout) {\n                        clearTimeout(this.connectionTimeout);\n                        this.connectionTimeout = null;\n                    }\n                    this.reconnectAttempts = 0;\n                    this.getGameState();\n                    resolve();\n                };\n\n                this.ws.onmessage = this.handleMessage.bind(this);\n                this.ws.onclose = this.handleClose.bind(this);\n                this.ws.onerror = (error: Event) => {\n                    console.error('WebSocket error:', error);\n                    reject(error);\n                };\n\n            } catch (error) {\n                console.error('Error creating WebSocket:', error);\n                reject(error);\n            }\n        });\n    }\n\n    private handleMessage(event: MessageEvent) {\n        try {\n            const message = JSON.parse(event.data);\n            console.log('WebSocket message received:', message);\n            \n            if (message.type === 'game_update' || message.type === 'game_started') {\n                console.log('Updating game state:', message.data);\n                this.onGameUpdate(message.data);\n            }\n        } catch (error) {\n            console.error('Error processing message:', error);\n        }\n    }\n\n    private handleClose(event: CloseEvent) {\n        console.log('WebSocket connection closed:', event.code, event.reason);\n        this.cleanup();\n        this.handleReconnect();\n    }\n\n    private cleanup() {\n        if (this.connectionTimeout) {\n            clearTimeout(this.connectionTimeout);\n            this.connectionTimeout = null;\n        }\n        \n        if (this.ws) {\n            try {\n                this.ws.close();\n            } catch (error) {\n                console.error('Error closing WebSocket:', error);\n            }\n            this.ws = null;\n        }\n    }\n\n    private async getGameState() {\n        try {\n            const gameState = await gameService.getGameState(this.gameId);\n            this.onGameUpdate(gameState);\n        } catch (error) {\n            console.error('Error getting game state:', error);\n        }\n    }\n\n    private handleReconnect() {\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.reconnectAttempts++;\n            const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts - 1), 10000);\n            console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts}) in ${delay}ms...`);\n            setTimeout(() => this.connect(), delay);\n        }\n    }\n\n    completeTask(taskId: string) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            const message = {\n                type: 'complete_task',\n                game_id: this.gameId,\n                task_id: taskId\n            };\n            console.log('Sending complete task message:', message);\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.error('WebSocket not connected');\n            this.connect().catch(error => {\n                console.error('Failed to reconnect:', error);\n            });\n        }\n    }\n\n    disconnect() {\n        console.log('Disconnecting WebSocket');\n        this.cleanup();\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}