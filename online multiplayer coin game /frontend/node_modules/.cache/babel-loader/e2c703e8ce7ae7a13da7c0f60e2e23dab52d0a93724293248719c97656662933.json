{"ast":null,"code":"var _jsxFileName = \"/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Box, Button, Card, CardContent, Typography, Grid, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Chip, keyframes, Stack, TableContainer, Table, TableHead, TableBody, TableCell, TableRow, Paper, Divider } from '@mui/material';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport { TaskType, TaskStatus, PlayerStatus } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Game = ({\n  gameId: initialGameId\n}) => {\n  _s();\n  // 初始化状态\n  const [gameId, setGameId] = useState(initialGameId || null);\n  const [playerName, setPlayerName] = useState('');\n  const [playerCount, setPlayerCount] = useState(2);\n  const [playerId, setPlayerId] = useState(null);\n  const [game, setGame] = useState(null);\n  const [error, setError] = useState(null);\n  const [wsService, setWsService] = useState(null);\n  const [showJoinDialog, setShowJoinDialog] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [flipStates, setFlipStates] = useState({});\n  const [maxBatches, setMaxBatches] = useState(3);\n  const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n  const [joinGameId, setJoinGameId] = useState('');\n  const [activeTab, setActiveTab] = useState(0);\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n  const [showResultPage, setShowResultPage] = useState(false);\n  const [batchCompletionTimes, setBatchCompletionTimes] = useState({});\n  const [batchStartTimes, setBatchStartTimes] = useState({});\n  const [batchFlipStates, setBatchFlipStates] = useState({});\n\n  // 添加状态来跟踪硬币的翻转状态和批次完成状态\n  const [flippedCoins, setFlippedCoins] = useState([]);\n  const [pendingBatchCompletion, setPendingBatchCompletion] = useState({});\n\n  // 添加翻转动画状态\n\n  // 添加游戏状态更新处理函数\n  const handleGameUpdate = useCallback(updatedGame => {\n    console.log('Game state updated:', updatedGame);\n    setGame(updatedGame);\n\n    // 如果游戏状态变为completed，记录结束时间\n    if (updatedGame.status === 'completed' && !endTime) {\n      setEndTime(Date.now());\n    }\n  }, [endTime]);\n  useEffect(() => {\n    if (gameId && playerId) {\n      const service = new WebSocketService(gameId, playerId, handleGameUpdate);\n      service.connect();\n      setWsService(service);\n\n      // Cleanup function\n      return () => {\n        service.disconnect();\n      };\n    }\n  }, [gameId, playerId, handleGameUpdate]);\n  useEffect(() => {\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && !startTime) {\n      setStartTime(Date.now());\n    }\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime]);\n  useEffect(() => {\n    let timerInterval = null;\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'in_progress' && startTime) {\n      timerInterval = setInterval(() => {\n        setCurrentTime(Date.now() - startTime);\n      }, 1000);\n    }\n    if ((game === null || game === void 0 ? void 0 : game.status) === 'completed' && startTime && !endTime) {\n      setEndTime(Date.now());\n      setShowResultPage(true);\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [game === null || game === void 0 ? void 0 : game.status, startTime, endTime]);\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks && game.players) {\n      const newStartTimes = {\n        ...batchStartTimes\n      };\n      const newCompletionTimes = {\n        ...batchCompletionTimes\n      };\n      game.players.forEach(player => {\n        if (!newStartTimes[player.id]) {\n          newStartTimes[player.id] = {};\n        }\n        if (!newCompletionTimes[player.id]) {\n          newCompletionTimes[player.id] = {};\n        }\n\n        // 使用后端提供的批次开始时间\n        if (player.batch_start_time) {\n          Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n            newStartTimes[player.id][Number(batchNum)] = startTime;\n          });\n        }\n\n        // Calculate completion times for each batch\n        for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n          var _newStartTimes$player;\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === player.id);\n          const startedAt = (_newStartTimes$player = newStartTimes[player.id]) === null || _newStartTimes$player === void 0 ? void 0 : _newStartTimes$player[batchNum];\n          if (startedAt && batchTasks.length > 0 && batchTasks.every(t => t.status === TaskStatus.COMPLETED) && !newCompletionTimes[player.id][batchNum]) {\n            newCompletionTimes[player.id][batchNum] = Date.now() - startedAt;\n          }\n        }\n      });\n      setBatchStartTimes(newStartTimes);\n      setBatchCompletionTimes(newCompletionTimes);\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks, game === null || game === void 0 ? void 0 : game.players]);\n\n  // 修改创建游戏的函数\n  const handleCreateGame = async () => {\n    try {\n      // 使用固定的批次大小创建游戏\n      const newGameId = await gameService.createGame(playerCount, 4, [20, 10, 5, 2]);\n      setGameId(newGameId);\n\n      // 加入游戏\n      const newPlayerId = await gameService.joinGame(newGameId, playerName);\n      setPlayerId(newPlayerId);\n\n      // 创建WebSocket连接\n      const ws = new WebSocketService(newGameId, newPlayerId, handleGameUpdate);\n      setWsService(ws);\n      await ws.connect();\n\n      // 设置开始时间\n      setStartTime(Date.now());\n    } catch (err) {\n      console.error('Failed to create game:', err);\n      setError('Failed to create game. Please try again.');\n    }\n  };\n\n  // 处理加入游戏\n  const handleJoinGame = async () => {\n    try {\n      // 加入游戏\n      const newPlayerId = await gameService.joinGame(joinGameId, playerName);\n      setPlayerId(newPlayerId);\n      setGameId(joinGameId);\n\n      // 创建WebSocket连接\n      const ws = new WebSocketService(joinGameId, newPlayerId, handleGameUpdate);\n      setWsService(ws);\n      await ws.connect();\n\n      // 设置开始时间\n      setStartTime(Date.now());\n    } catch (err) {\n      console.error('Failed to join game:', err);\n      setError('Failed to join game. Please check the Game ID and try again.');\n    }\n  };\n  const handleStartGame = async () => {\n    if (!gameId) return;\n    try {\n      await gameService.startGame(gameId);\n      setError(null);\n    } catch (error) {\n      setError('Failed to start game. Please try again.');\n      console.error('Error starting game:', error);\n    }\n  };\n  const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n  // 添加一个专门用于渲染目标硬币的函数\n  const renderTargetCoin = type => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: {\n          xs: '20px',\n          sm: '32px'\n        },\n        height: {\n          xs: '20px',\n          sm: '32px'\n        },\n        borderRadius: '50%',\n        border: theme => ({\n          xs: `1px solid ${theme.palette.primary.main}`,\n          sm: `2px solid ${theme.palette.primary.main}`\n        }),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: theme => theme.palette.background.paper,\n        color: theme => theme.palette.text.primary,\n        fontSize: {\n          xs: '0.7rem',\n          sm: '0.9rem'\n        },\n        fontWeight: 'bold',\n        marginBottom: {\n          xs: 0,\n          sm: 1\n        },\n        marginRight: 1\n      },\n      children: type === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 检查批次是否所有硬币都已翻转\n  const isBatchAllFlipped = (batchNum, playerId) => {\n    const batchTasks = game === null || game === void 0 ? void 0 : game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === playerId);\n    return (batchTasks === null || batchTasks === void 0 ? void 0 : batchTasks.every(t => flippedCoins.includes(t.id))) || false;\n  };\n\n  // 处理硬币翻转\n  const handleCoinFlip = taskId => {\n    setFlipStates(prev => ({\n      ...prev,\n      [taskId]: {\n        isFlipping: true,\n        showOpposite: false\n      }\n    }));\n\n    // 600ms后停止动画，保持翻转状态\n    setTimeout(() => {\n      setFlipStates(prev => ({\n        ...prev,\n        [taskId]: {\n          isFlipping: false,\n          showOpposite: true\n        }\n      }));\n    }, 600);\n  };\n\n  // 处理批次完成\n  const handleCompleteBatch = batchNum => {\n    if (!game || !wsService) return;\n    const batchTasks = game.tasks.filter(t => t.batch_number === batchNum && t.assigned_to === playerId && t.status !== TaskStatus.COMPLETED);\n\n    // 完成所有任务\n    batchTasks.forEach(task => {\n      wsService.completeTask(task.id);\n    });\n\n    // 清除翻转状态\n    const taskIds = batchTasks.map(t => t.id);\n    setFlipStates(prev => {\n      const newState = {\n        ...prev\n      };\n      taskIds.forEach(id => {\n        delete newState[id];\n      });\n      return newState;\n    });\n  };\n\n  // 渲染硬币\n  const renderCoin = (type, taskId = undefined) => {\n    const flipState = taskId ? flipStates[taskId] : undefined;\n    const displayType = flipState !== null && flipState !== void 0 && flipState.showOpposite ? type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS : type;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: {\n          xs: '20px',\n          md: '32px'\n        },\n        height: {\n          xs: '20px',\n          md: '32px'\n        },\n        border: theme => ({\n          xs: `1px solid ${theme.palette.primary.main}`,\n          md: `2px solid ${theme.palette.primary.main}`\n        }),\n        borderRadius: '50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: taskId ? 'pointer' : 'default',\n        fontSize: {\n          xs: '0.6rem',\n          md: '0.8rem'\n        },\n        fontWeight: 'bold',\n        color: 'primary.main',\n        animation: flipState !== null && flipState !== void 0 && flipState.isFlipping ? 'flip 0.6s ease-in-out' : 'none',\n        '@keyframes flip': {\n          '0%': {\n            transform: 'rotateY(0)'\n          },\n          '100%': {\n            transform: 'rotateY(360deg)'\n          }\n        },\n        marginRight: 1,\n        marginBottom: {\n          xs: 0,\n          md: 1\n        },\n        backgroundColor: 'background.paper'\n      },\n      onClick: () => taskId && handleCoinFlip(taskId),\n      children: displayType === TaskType.HEADS ? 'H' : 'T'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染任务行\n  const renderTaskRow = (tasks, startIdx, count) => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: 1,\n        mb: 2\n      },\n      children: tasks.slice(startIdx, startIdx + count).map(task => /*#__PURE__*/_jsxDEV(Box, {\n        children: renderCoin(task.type, task.id)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 监听游戏状态变化\n  useEffect(() => {\n    if (game !== null && game !== void 0 && game.tasks) {\n      // 检查是否有新的批次开始\n      game.players.forEach(player => {\n        const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n        const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n\n        // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n        if (currentBatchTasks.length > 0 && currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n          // 清理上一个批次的翻转状态\n          const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n          const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n          setFlippedCoins(prev => prev.filter(id => !prevBatchTaskIds.includes(id)));\n        }\n      });\n    }\n  }, [game === null || game === void 0 ? void 0 : game.tasks]);\n  const getPlayerStatusColor = status => {\n    switch (status) {\n      case PlayerStatus.ACTIVE:\n        return 'success';\n      case PlayerStatus.WAITING:\n        return 'warning';\n      case PlayerStatus.IDLE:\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getTaskStatusColor = status => {\n    switch (status) {\n      case TaskStatus.COMPLETED:\n        return '#4caf50';\n      case TaskStatus.IN_PROGRESS:\n        return '#ff9800';\n      case TaskStatus.PENDING:\n        return '#9e9e9e';\n      default:\n        return '#9e9e9e';\n    }\n  };\n\n  // 渲染玩家卡片\n  const renderPlayer = player => {\n    if (!game) return null;\n    const currentBatchTasks = game.tasks.filter(t => t.batch_number === player.current_batch && t.assigned_to === player.id);\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        width: '100%',\n        mb: 2,\n        backgroundColor: player.id === playerId ? 'rgba(144, 202, 249, 0.1)' : 'background.paper'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"primary\",\n            children: [player.name, \" \", player.id === playerId && '(You)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: player.status,\n            size: \"small\",\n            color: player.status === PlayerStatus.ACTIVE ? 'success' : 'default'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            color: \"text.secondary\",\n            gutterBottom: true,\n            children: [\"Current Batch: \", player.current_batch]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 25\n          }, this), currentBatchTasks.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              color: \"text.secondary\",\n              gutterBottom: true,\n              children: \"Tasks:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 33\n            }, this), renderTaskRow(currentBatchTasks, 0, currentBatchTasks.length)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 21\n        }, this), player.id === playerId && currentBatchTasks.length > 0 && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          size: \"small\",\n          onClick: () => handleCompleteBatch(player.current_batch),\n          sx: {\n            mt: 1\n          },\n          children: [\"Complete Batch \", player.current_batch]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 17\n      }, this)\n    }, player.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 13\n    }, this);\n  };\n  const handleTabChange = (_, newValue) => {\n    // Reset all fields when switching tabs\n    setActiveTab(newValue);\n    setPlayerName('');\n    setPlayerCount(2);\n    setMaxBatches(3);\n    setCoinsPerBatch(2);\n    setJoinGameId('');\n    setError(null);\n  };\n  const handleGameComplete = () => {\n    setEndTime(Date.now());\n    setShowCompletionDialog(true);\n  };\n\n  // 添加一个辅助函数来处理毫秒到时间的转换\n  const formatTimeFromMs = ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const renderCompletionDialog = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showCompletionDialog,\n      onClose: () => setShowCompletionDialog(false),\n      PaperProps: {\n        sx: {\n          borderRadius: 2,\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: {\n          textAlign: 'center',\n          color: 'primary.main'\n        },\n        children: \"Game Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Total Time: \", formatTimeFromMs(totalTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: \"All players have successfully completed their tasks!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            setShowCompletionDialog(false);\n            window.location.reload(); // Reset the game\n          },\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 13\n    }, this);\n  };\n  const handleCompleteGame = () => {\n    setShowResultPage(true);\n  };\n  const handleReturnToMain = () => {\n    window.location.reload();\n  };\n  const renderResultPage = () => {\n    if (!startTime || !endTime) return null;\n    const totalTime = endTime - startTime;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        backgroundColor: 'background.default',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 600,\n          width: '100%',\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          sx: {\n            mb: 3,\n            color: 'primary.main'\n          },\n          children: \"Game Complete! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            mb: 4\n          },\n          children: [\"Total Time: \", formatTimeFromMs(totalTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleReturnToMain,\n          size: \"large\",\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 13\n    }, this);\n  };\n\n  // 渲染游戏统计\n  const renderGameStats = () => {\n    if (!game) return null;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        height: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            mb: 2,\n            color: 'primary.main'\n          },\n          children: \"Game Statistics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 21\n        }, this), Array.from({\n          length: game.max_batches\n        }, (_, i) => i + 1).map(batchNum => {\n          const batchTasks = game.tasks.filter(t => t.batch_number === batchNum);\n          const batchCompleted = batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n          return /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 3\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              sx: {\n                fontWeight: 'bold',\n                mb: 1\n              },\n              children: [\"Batch \", batchNum, \" (\", batchTasks.length, \" coins)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n              component: Paper,\n              sx: {\n                mb: 2\n              },\n              children: /*#__PURE__*/_jsxDEV(Table, {\n                size: \"small\",\n                children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                  children: /*#__PURE__*/_jsxDEV(TableRow, {\n                    children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                      children: \"Player\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 645,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      align: \"right\",\n                      children: \"Status\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 646,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      align: \"right\",\n                      children: \"Time\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 647,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 644,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 643,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                  children: game.players.map(player => {\n                    const playerTasks = batchTasks.filter(t => t.assigned_to === player.id);\n                    const isCompleted = playerTasks.every(t => t.status === TaskStatus.COMPLETED);\n                    return /*#__PURE__*/_jsxDEV(TableRow, {\n                      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                        children: player.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 657,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"right\",\n                        children: /*#__PURE__*/_jsxDEV(Chip, {\n                          label: isCompleted ? 'Completed' : 'Pending',\n                          size: \"small\",\n                          color: isCompleted ? 'success' : 'default'\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 659,\n                          columnNumber: 61\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 658,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"right\",\n                        children: isCompleted ? `${((currentTime - (startTime || 0)) / 1000).toFixed(1)}s` : '-'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 665,\n                        columnNumber: 57\n                      }, this)]\n                    }, player.id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 656,\n                      columnNumber: 53\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 650,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 642,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 33\n            }, this)]\n          }, batchNum, true, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 29\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 13\n    }, this);\n  };\n  if (showResultPage) {\n    return renderResultPage();\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: !gameId ?\n    /*#__PURE__*/\n    // 主菜单\n    _jsxDEV(Box, {\n      sx: {\n        maxWidth: 400,\n        mx: 'auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        sx: {\n          mb: 4,\n          color: 'primary.main'\n        },\n        children: \"Online Multiplayer Coin Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          mb: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              mb: 3\n            },\n            children: \"Create New Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Your Name\",\n            value: playerName,\n            onChange: e => setPlayerName(e.target.value),\n            sx: {\n              mb: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            type: \"number\",\n            label: \"Number of Players\",\n            value: playerCount,\n            onChange: e => setPlayerCount(Number(e.target.value)),\n            inputProps: {\n              min: 2,\n              max: 5\n            },\n            sx: {\n              mb: 3\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 709,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            variant: \"contained\",\n            onClick: handleCreateGame,\n            disabled: !playerName || playerCount < 2,\n            children: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: 2,\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Divider, {\n          sx: {\n            flex: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: \"OR\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          sx: {\n            flex: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          sx: {\n            display: 'flex',\n            gap: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Game ID\",\n            value: joinGameId,\n            onChange: e => setJoinGameId(e.target.value.toUpperCase()),\n            sx: {\n              flex: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: handleJoinGame,\n            disabled: !joinGameId,\n            children: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 744,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 736,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        sx: {\n          mt: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 755,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 17\n    }, this) :\n    /*#__PURE__*/\n    // 游戏界面\n    _jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          color: \"primary\",\n          children: [\"Game ID: \", gameId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 25\n        }, this), (game === null || game === void 0 ? void 0 : game.status) === 'waiting' && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 1\n          },\n          children: \"Share this ID with other players to join the game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 769,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 764,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 2,\n            children: game === null || game === void 0 ? void 0 : game.players.map(renderPlayer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 778,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: renderGameStats()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 762,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 687,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"qN0oD4eDRbi7HxolmNWuJ/AKgzg=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Box","Button","Card","CardContent","Typography","Grid","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Chip","keyframes","Stack","TableContainer","Table","TableHead","TableBody","TableCell","TableRow","Paper","Divider","gameService","WebSocketService","TaskType","TaskStatus","PlayerStatus","jsxDEV","_jsxDEV","Game","gameId","initialGameId","_s","setGameId","playerName","setPlayerName","playerCount","setPlayerCount","playerId","setPlayerId","game","setGame","error","setError","wsService","setWsService","showJoinDialog","setShowJoinDialog","startTime","setStartTime","endTime","setEndTime","currentTime","setCurrentTime","flipStates","setFlipStates","maxBatches","setMaxBatches","coinsPerBatch","setCoinsPerBatch","joinGameId","setJoinGameId","activeTab","setActiveTab","showCompletionDialog","setShowCompletionDialog","showResultPage","setShowResultPage","batchCompletionTimes","setBatchCompletionTimes","batchStartTimes","setBatchStartTimes","batchFlipStates","setBatchFlipStates","flippedCoins","setFlippedCoins","pendingBatchCompletion","setPendingBatchCompletion","handleGameUpdate","updatedGame","console","log","status","Date","now","service","connect","disconnect","timerInterval","setInterval","clearInterval","tasks","players","newStartTimes","newCompletionTimes","forEach","player","id","batch_start_time","Object","entries","batchNum","Number","max_batches","_newStartTimes$player","batchTasks","filter","t","batch_number","assigned_to","startedAt","length","every","COMPLETED","handleCreateGame","newGameId","createGame","newPlayerId","joinGame","ws","err","handleJoinGame","handleStartGame","startGame","flipAnimation","renderTargetCoin","type","sx","width","xs","sm","height","borderRadius","border","theme","palette","primary","main","display","alignItems","justifyContent","backgroundColor","background","paper","color","text","fontSize","fontWeight","marginBottom","marginRight","children","HEADS","fileName","_jsxFileName","lineNumber","columnNumber","isBatchAllFlipped","includes","handleCoinFlip","taskId","prev","isFlipping","showOpposite","setTimeout","handleCompleteBatch","task","completeTask","taskIds","map","newState","renderCoin","undefined","flipState","displayType","TAILS","md","cursor","animation","transform","onClick","renderTaskRow","startIdx","count","flexWrap","gap","mb","slice","playerTasks","currentBatchTasks","current_batch","PENDING","prevBatchTasks","prevBatchTaskIds","getPlayerStatusColor","ACTIVE","WAITING","IDLE","getTaskStatusColor","IN_PROGRESS","renderPlayer","variant","name","label","size","gutterBottom","mt","handleTabChange","_","newValue","handleGameComplete","formatTimeFromMs","ms","totalSeconds","Math","floor","minutes","seconds","toString","padStart","renderCompletionDialog","totalTime","open","onClose","PaperProps","p","textAlign","flexDirection","py","window","location","reload","handleCompleteGame","handleReturnToMain","renderResultPage","minHeight","maxWidth","renderGameStats","Array","from","i","batchCompleted","component","align","isCompleted","toFixed","mx","fullWidth","value","onChange","e","target","inputProps","min","max","disabled","flex","toUpperCase","container","spacing","item","_c","$RefreshReg$"],"sources":["/Users/huanghao/Desktop/online multiplayer task game/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tabs,\n    Tab,\n    Alert,\n    Chip,\n    keyframes,\n    Stack,\n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableCell,\n    TableRow,\n    Paper,\n    Divider\n} from '@mui/material';\nimport { gameService, WebSocketService } from '../services/gameService';\nimport type { Game as GameType } from '../types';\nimport { TaskType, TaskStatus, PlayerStatus } from '../types';\n\ninterface GameProps {\n    gameId?: string;\n}\n\nexport const Game: React.FC<GameProps> = ({ gameId: initialGameId }) => {\n    // 初始化状态\n    const [gameId, setGameId] = useState<string | null>(initialGameId || null);\n    const [playerName, setPlayerName] = useState('');\n    const [playerCount, setPlayerCount] = useState(2);\n    const [playerId, setPlayerId] = useState<string | null>(null);\n    const [game, setGame] = useState<GameType | null>(null);\n    const [error, setError] = useState<string | null>(null);\n    const [wsService, setWsService] = useState<WebSocketService | null>(null);\n    const [showJoinDialog, setShowJoinDialog] = useState(false);\n    const [startTime, setStartTime] = useState<number | null>(null);\n    const [endTime, setEndTime] = useState<number | null>(null);\n    const [currentTime, setCurrentTime] = useState<number>(0);\n    const [flipStates, setFlipStates] = useState<{[key: string]: { isFlipping: boolean, showOpposite: boolean }}>({});\n    const [maxBatches, setMaxBatches] = useState(3);\n    const [coinsPerBatch, setCoinsPerBatch] = useState(2);\n    const [joinGameId, setJoinGameId] = useState('');\n    const [activeTab, setActiveTab] = useState(0);\n    const [showCompletionDialog, setShowCompletionDialog] = useState(false);\n    const [showResultPage, setShowResultPage] = useState(false);\n    const [batchCompletionTimes, setBatchCompletionTimes] = useState<{\n        [playerId: string]: {\n            [batchNumber: number]: number;\n        };\n    }>({});\n    const [batchStartTimes, setBatchStartTimes] = useState<{\n        [playerId: string]: {\n            [batchNum: number]: number;\n        };\n    }>({});\n    const [batchFlipStates, setBatchFlipStates] = useState<{\n        [batchNum: number]: {\n            [taskId: string]: boolean;  // true means flipped\n        };\n    }>({});\n\n    // 添加状态来跟踪硬币的翻转状态和批次完成状态\n    const [flippedCoins, setFlippedCoins] = useState<string[]>([]);\n    const [pendingBatchCompletion, setPendingBatchCompletion] = useState<{\n        [batchNum: number]: string[];  // batchNum -> taskIds\n    }>({});\n\n    // 添加翻转动画状态\n    interface FlipState {\n        isFlipping: boolean;\n        showOpposite: boolean;\n    }\n\n    // 添加游戏状态更新处理函数\n    const handleGameUpdate = useCallback((updatedGame: GameType) => {\n        console.log('Game state updated:', updatedGame);\n        setGame(updatedGame);\n        \n        // 如果游戏状态变为completed，记录结束时间\n        if (updatedGame.status === 'completed' && !endTime) {\n            setEndTime(Date.now());\n        }\n    }, [endTime]);\n\n    useEffect(() => {\n        if (gameId && playerId) {\n            const service = new WebSocketService(gameId, playerId, handleGameUpdate);\n            service.connect();\n            setWsService(service);\n\n            // Cleanup function\n            return () => {\n                service.disconnect();\n            };\n        }\n    }, [gameId, playerId, handleGameUpdate]);\n\n    useEffect(() => {\n        if (game?.status === 'in_progress' && !startTime) {\n            setStartTime(Date.now());\n        }\n    }, [game?.status, startTime]);\n\n    useEffect(() => {\n        let timerInterval: NodeJS.Timeout | null = null;\n        \n        if (game?.status === 'in_progress' && startTime) {\n            timerInterval = setInterval(() => {\n                setCurrentTime(Date.now() - startTime);\n            }, 1000);\n        }\n\n        if (game?.status === 'completed' && startTime && !endTime) {\n            setEndTime(Date.now());\n            setShowResultPage(true);\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        }\n\n        return () => {\n            if (timerInterval) {\n                clearInterval(timerInterval);\n            }\n        };\n    }, [game?.status, startTime, endTime]);\n\n    useEffect(() => {\n        if (game?.tasks && game.players) {\n            const newStartTimes = { ...batchStartTimes };\n            const newCompletionTimes = { ...batchCompletionTimes };\n\n            game.players.forEach(player => {\n                if (!newStartTimes[player.id]) {\n                    newStartTimes[player.id] = {};\n                }\n                if (!newCompletionTimes[player.id]) {\n                    newCompletionTimes[player.id] = {};\n                }\n\n                // 使用后端提供的批次开始时间\n                if (player.batch_start_time) {\n                    Object.entries(player.batch_start_time).forEach(([batchNum, startTime]) => {\n                        newStartTimes[player.id][Number(batchNum)] = startTime;\n                    });\n                }\n\n                // Calculate completion times for each batch\n                for (let batchNum = 1; batchNum <= game.max_batches; batchNum++) {\n                    const batchTasks = game.tasks.filter(t => \n                        t.batch_number === batchNum && \n                        t.assigned_to === player.id\n                    );\n                    \n                    const startedAt = newStartTimes[player.id]?.[batchNum];\n                    if (startedAt && \n                        batchTasks.length > 0 && \n                        batchTasks.every(t => t.status === TaskStatus.COMPLETED) && \n                        !newCompletionTimes[player.id][batchNum]) {\n                        newCompletionTimes[player.id][batchNum] = Date.now() - startedAt;\n                    }\n                }\n            });\n\n            setBatchStartTimes(newStartTimes);\n            setBatchCompletionTimes(newCompletionTimes);\n        }\n    }, [game?.tasks, game?.players]);\n\n    // 修改创建游戏的函数\n    const handleCreateGame = async () => {\n        try {\n            // 使用固定的批次大小创建游戏\n            const newGameId = await gameService.createGame(playerCount, 4, [20, 10, 5, 2]);\n            setGameId(newGameId);\n            \n            // 加入游戏\n            const newPlayerId = await gameService.joinGame(newGameId, playerName);\n            setPlayerId(newPlayerId);\n            \n            // 创建WebSocket连接\n            const ws = new WebSocketService(newGameId, newPlayerId, handleGameUpdate);\n            setWsService(ws);\n            await ws.connect();\n            \n            // 设置开始时间\n            setStartTime(Date.now());\n            \n        } catch (err) {\n            console.error('Failed to create game:', err);\n            setError('Failed to create game. Please try again.');\n        }\n    };\n\n    // 处理加入游戏\n    const handleJoinGame = async () => {\n        try {\n            // 加入游戏\n            const newPlayerId = await gameService.joinGame(joinGameId, playerName);\n            setPlayerId(newPlayerId);\n            setGameId(joinGameId);\n            \n            // 创建WebSocket连接\n            const ws = new WebSocketService(joinGameId, newPlayerId, handleGameUpdate);\n            setWsService(ws);\n            await ws.connect();\n            \n            // 设置开始时间\n            setStartTime(Date.now());\n            \n        } catch (err) {\n            console.error('Failed to join game:', err);\n            setError('Failed to join game. Please check the Game ID and try again.');\n        }\n    };\n\n    const handleStartGame = async () => {\n        if (!gameId) return;\n\n        try {\n            await gameService.startGame(gameId);\n            setError(null);\n        } catch (error) {\n            setError('Failed to start game. Please try again.');\n            console.error('Error starting game:', error);\n        }\n    };\n\n    const flipAnimation = keyframes`\n        0% {\n            transform: rotateY(0deg);\n        }\n        49.9% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        50% {\n            transform: rotateY(90deg);\n            content: '';\n        }\n        100% {\n            transform: rotateY(360deg);\n        }\n    `;\n\n    // 添加一个专门用于渲染目标硬币的函数\n    const renderTargetCoin = (type: TaskType) => {\n        return (\n            <Box\n                sx={{\n                    width: { xs: '20px', sm: '32px' },\n                    height: { xs: '20px', sm: '32px' },\n                    borderRadius: '50%',\n                    border: theme => ({\n                        xs: `1px solid ${theme.palette.primary.main}`,\n                        sm: `2px solid ${theme.palette.primary.main}`\n                    }),\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    backgroundColor: theme => theme.palette.background.paper,\n                    color: theme => theme.palette.text.primary,\n                    fontSize: { xs: '0.7rem', sm: '0.9rem' },\n                    fontWeight: 'bold',\n                    marginBottom: { xs: 0, sm: 1 },\n                    marginRight: 1\n                }}\n            >\n                {type === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 检查批次是否所有硬币都已翻转\n    const isBatchAllFlipped = (batchNum: number, playerId: string) => {\n        const batchTasks = game?.tasks.filter(t => \n            t.batch_number === batchNum && \n            t.assigned_to === playerId\n        );\n        return batchTasks?.every(t => flippedCoins.includes(t.id)) || false;\n    };\n\n    // 处理硬币翻转\n    const handleCoinFlip = (taskId: string) => {\n        setFlipStates(prev => ({\n            ...prev,\n            [taskId]: { \n                isFlipping: true,\n                showOpposite: false\n            }\n        }));\n        \n        // 600ms后停止动画，保持翻转状态\n        setTimeout(() => {\n            setFlipStates(prev => ({\n                ...prev,\n                [taskId]: {\n                    isFlipping: false,\n                    showOpposite: true\n                }\n            }));\n        }, 600);\n    };\n\n    // 处理批次完成\n    const handleCompleteBatch = (batchNum: number) => {\n        if (!game || !wsService) return;\n        \n        const batchTasks = game.tasks.filter(t => \n            t.batch_number === batchNum && \n            t.assigned_to === playerId &&\n            t.status !== TaskStatus.COMPLETED\n        );\n        \n        // 完成所有任务\n        batchTasks.forEach(task => {\n            wsService.completeTask(task.id);\n        });\n        \n        // 清除翻转状态\n        const taskIds = batchTasks.map(t => t.id);\n        setFlipStates(prev => {\n            const newState = { ...prev };\n            taskIds.forEach(id => {\n                delete newState[id];\n            });\n            return newState;\n        });\n    };\n\n    // 渲染硬币\n    const renderCoin = (type: TaskType, taskId: string | undefined = undefined) => {\n        const flipState = taskId ? flipStates[taskId] : undefined;\n        const displayType = flipState?.showOpposite ? \n            (type === TaskType.HEADS ? TaskType.TAILS : TaskType.HEADS) : \n            type;\n        \n        return (\n            <Box\n                sx={{\n                    width: { xs: '20px', md: '32px' },\n                    height: { xs: '20px', md: '32px' },\n                    border: theme => ({\n                        xs: `1px solid ${theme.palette.primary.main}`,\n                        md: `2px solid ${theme.palette.primary.main}`\n                    }),\n                    borderRadius: '50%',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    cursor: taskId ? 'pointer' : 'default',\n                    fontSize: { xs: '0.6rem', md: '0.8rem' },\n                    fontWeight: 'bold',\n                    color: 'primary.main',\n                    animation: flipState?.isFlipping ? 'flip 0.6s ease-in-out' : 'none',\n                    '@keyframes flip': {\n                        '0%': { transform: 'rotateY(0)' },\n                        '100%': { transform: 'rotateY(360deg)' }\n                    },\n                    marginRight: 1,\n                    marginBottom: { xs: 0, md: 1 },\n                    backgroundColor: 'background.paper'\n                }}\n                onClick={() => taskId && handleCoinFlip(taskId)}\n            >\n                {displayType === TaskType.HEADS ? 'H' : 'T'}\n            </Box>\n        );\n    };\n\n    // 渲染任务行\n    const renderTaskRow = (tasks: GameType['tasks'], startIdx: number, count: number) => {\n        return (\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>\n                {tasks.slice(startIdx, startIdx + count).map((task) => (\n                    <Box key={task.id}>\n                        {renderCoin(task.type, task.id)}\n                    </Box>\n                ))}\n            </Box>\n        );\n    };\n\n    // 监听游戏状态变化\n    useEffect(() => {\n        if (game?.tasks) {\n            // 检查是否有新的批次开始\n            game.players.forEach(player => {\n                const playerTasks = game.tasks.filter(t => t.assigned_to === player.id);\n                const currentBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch);\n                \n                // 如果有新的批次任务，且都是PENDING状态，说明是新批次开始\n                if (currentBatchTasks.length > 0 && \n                    currentBatchTasks.every(t => t.status === TaskStatus.PENDING)) {\n                    // 清理上一个批次的翻转状态\n                    const prevBatchTasks = playerTasks.filter(t => t.batch_number === player.current_batch - 1);\n                    const prevBatchTaskIds = prevBatchTasks.map(t => t.id);\n                    setFlippedCoins(prev => prev.filter(id => !prevBatchTaskIds.includes(id)));\n                }\n            });\n        }\n    }, [game?.tasks]);\n\n    const getPlayerStatusColor = (status: PlayerStatus) => {\n        switch (status) {\n            case PlayerStatus.ACTIVE:\n                return 'success';\n            case PlayerStatus.WAITING:\n                return 'warning';\n            case PlayerStatus.IDLE:\n                return 'default';\n            default:\n                return 'default';\n        }\n    };\n\n    const getTaskStatusColor = (status: TaskStatus) => {\n        switch (status) {\n            case TaskStatus.COMPLETED:\n                return '#4caf50';\n            case TaskStatus.IN_PROGRESS:\n                return '#ff9800';\n            case TaskStatus.PENDING:\n                return '#9e9e9e';\n            default:\n                return '#9e9e9e';\n        }\n    };\n\n    // 渲染玩家卡片\n    const renderPlayer = (player: GameType['players'][0]) => {\n        if (!game) return null;\n\n        const currentBatchTasks = game.tasks.filter(t => \n            t.batch_number === player.current_batch && \n            t.assigned_to === player.id\n        );\n\n        return (\n            <Card \n                key={player.id}\n                sx={{\n                    width: '100%',\n                    mb: 2,\n                    backgroundColor: player.id === playerId ? 'rgba(144, 202, 249, 0.1)' : 'background.paper'\n                }}\n            >\n                <CardContent>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                        <Typography variant=\"h6\" color=\"primary\">\n                            {player.name} {player.id === playerId && '(You)'}\n                        </Typography>\n                        <Chip \n                            label={player.status}\n                            size=\"small\"\n                            color={player.status === PlayerStatus.ACTIVE ? 'success' : 'default'}\n                        />\n                    </Box>\n\n                    <Box sx={{ mb: 2 }}>\n                        <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                            Current Batch: {player.current_batch}\n                        </Typography>\n                        \n                        {currentBatchTasks.length > 0 && (\n                            <Box sx={{ mt: 2 }}>\n                                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                                    Tasks:\n                                </Typography>\n                                {renderTaskRow(currentBatchTasks, 0, currentBatchTasks.length)}\n                            </Box>\n                        )}\n                    </Box>\n\n                    {player.id === playerId && currentBatchTasks.length > 0 && (\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            size=\"small\"\n                            onClick={() => handleCompleteBatch(player.current_batch)}\n                            sx={{ mt: 1 }}\n                        >\n                            Complete Batch {player.current_batch}\n                        </Button>\n                    )}\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n        // Reset all fields when switching tabs\n        setActiveTab(newValue);\n        setPlayerName('');\n        setPlayerCount(2);\n        setMaxBatches(3);\n        setCoinsPerBatch(2);\n        setJoinGameId('');\n        setError(null);\n    };\n\n    const handleGameComplete = () => {\n        setEndTime(Date.now());\n        setShowCompletionDialog(true);\n    };\n\n    // 添加一个辅助函数来处理毫秒到时间的转换\n    const formatTimeFromMs = (ms: number) => {\n        const totalSeconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    const renderCompletionDialog = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Dialog \n                open={showCompletionDialog} \n                onClose={() => setShowCompletionDialog(false)}\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        p: 2\n                    }\n                }}\n            >\n                <DialogTitle sx={{ textAlign: 'center', color: 'primary.main' }}>\n                    Game Completed!\n                </DialogTitle>\n                <DialogContent>\n                    <Box sx={{ \n                        display: 'flex', \n                        flexDirection: 'column', \n                        alignItems: 'center',\n                        gap: 2,\n                        py: 2\n                    }}>\n                        <Typography variant=\"h6\">\n                            Total Time: {formatTimeFromMs(totalTime)}\n                        </Typography>\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                            All players have successfully completed their tasks!\n                        </Typography>\n                    </Box>\n                </DialogContent>\n                <DialogActions sx={{ justifyContent: 'center' }}>\n                    <Button \n                        variant=\"contained\" \n                        onClick={() => {\n                            setShowCompletionDialog(false);\n                            window.location.reload(); // Reset the game\n                        }}\n                    >\n                        Start New Game\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleCompleteGame = () => {\n        setShowResultPage(true);\n    };\n\n    const handleReturnToMain = () => {\n        window.location.reload();\n    };\n\n    const renderResultPage = () => {\n        if (!startTime || !endTime) return null;\n        const totalTime = endTime - startTime;\n\n        return (\n            <Box sx={{ \n                p: 3, \n                backgroundColor: 'background.default', \n                minHeight: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                <Card sx={{ \n                    maxWidth: 600, \n                    width: '100%',\n                    p: 4,\n                    textAlign: 'center'\n                }}>\n                    <Typography variant=\"h4\" sx={{ mb: 3, color: 'primary.main' }}>\n                        Game Complete! 🎉\n                    </Typography>\n                    <Typography variant=\"h5\" sx={{ mb: 4 }}>\n                        Total Time: {formatTimeFromMs(totalTime)}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleReturnToMain}\n                        size=\"large\"\n                    >\n                        Return to Main Menu\n                    </Button>\n                </Card>\n            </Box>\n        );\n    };\n\n    // 渲染游戏统计\n    const renderGameStats = () => {\n        if (!game) return null;\n\n        return (\n            <Card sx={{ height: '100%' }}>\n                <CardContent>\n                    <Typography variant=\"h6\" sx={{ mb: 2, color: 'primary.main' }}>\n                        Game Statistics\n                    </Typography>\n                    \n                    {Array.from({ length: game.max_batches }, (_, i) => i + 1).map(batchNum => {\n                        const batchTasks = game.tasks.filter(t => t.batch_number === batchNum);\n                        const batchCompleted = batchTasks.every(t => t.status === TaskStatus.COMPLETED);\n                        \n                        return (\n                            <Box key={batchNum} sx={{ mb: 3 }}>\n                                <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                                    Batch {batchNum} ({batchTasks.length} coins)\n                                </Typography>\n                                <TableContainer component={Paper} sx={{ mb: 2 }}>\n                                    <Table size=\"small\">\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell>Player</TableCell>\n                                                <TableCell align=\"right\">Status</TableCell>\n                                                <TableCell align=\"right\">Time</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {game.players.map(player => {\n                                                const playerTasks = batchTasks.filter(t => t.assigned_to === player.id);\n                                                const isCompleted = playerTasks.every(t => t.status === TaskStatus.COMPLETED);\n                                                \n                                                return (\n                                                    <TableRow key={player.id}>\n                                                        <TableCell>{player.name}</TableCell>\n                                                        <TableCell align=\"right\">\n                                                            <Chip \n                                                                label={isCompleted ? 'Completed' : 'Pending'}\n                                                                size=\"small\"\n                                                                color={isCompleted ? 'success' : 'default'}\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell align=\"right\">\n                                                            {isCompleted ? `${((currentTime - (startTime || 0)) / 1000).toFixed(1)}s` : '-'}\n                                                        </TableCell>\n                                                    </TableRow>\n                                                );\n                                            })}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </Box>\n                        );\n                    })}\n                </CardContent>\n            </Card>\n        );\n    };\n\n    if (showResultPage) {\n        return renderResultPage();\n    }\n\n    return (\n        <Box sx={{ p: 3 }}>\n            {!gameId ? (\n                // 主菜单\n                <Box sx={{ maxWidth: 400, mx: 'auto', textAlign: 'center' }}>\n                    <Typography variant=\"h4\" sx={{ mb: 4, color: 'primary.main' }}>\n                        Online Multiplayer Coin Game\n                    </Typography>\n                    \n                    <Card sx={{ mb: 3 }}>\n                        <CardContent>\n                            <Typography variant=\"h6\" sx={{ mb: 3 }}>\n                                Create New Game\n                            </Typography>\n                            \n                            <TextField\n                                fullWidth\n                                label=\"Your Name\"\n                                value={playerName}\n                                onChange={(e) => setPlayerName(e.target.value)}\n                                sx={{ mb: 2 }}\n                            />\n                            \n                            <TextField\n                                fullWidth\n                                type=\"number\"\n                                label=\"Number of Players\"\n                                value={playerCount}\n                                onChange={(e) => setPlayerCount(Number(e.target.value))}\n                                inputProps={{ min: 2, max: 5 }}\n                                sx={{ mb: 3 }}\n                            />\n                            \n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                onClick={handleCreateGame}\n                                disabled={!playerName || playerCount < 2}\n                            >\n                                Create Game\n                            </Button>\n                        </CardContent>\n                    </Card>\n\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>\n                        <Divider sx={{ flex: 1 }} />\n                        <Typography variant=\"body2\" color=\"text.secondary\">OR</Typography>\n                        <Divider sx={{ flex: 1 }} />\n                    </Box>\n\n                    <Card>\n                        <CardContent sx={{ display: 'flex', gap: 2 }}>\n                            <TextField\n                                label=\"Game ID\"\n                                value={joinGameId}\n                                onChange={(e) => setJoinGameId(e.target.value.toUpperCase())}\n                                sx={{ flex: 1 }}\n                            />\n                            <Button\n                                variant=\"contained\"\n                                onClick={handleJoinGame}\n                                disabled={!joinGameId}\n                            >\n                                Join Game\n                            </Button>\n                        </CardContent>\n                    </Card>\n                    \n                    {error && (\n                        <Typography color=\"error\" sx={{ mt: 2 }}>\n                            {error}\n                        </Typography>\n                    )}\n                </Box>\n            ) : (\n                // 游戏界面\n                <Box>\n                    {/* 游戏ID显示 */}\n                    <Box sx={{ mb: 3, textAlign: 'center' }}>\n                        <Typography variant=\"h6\" color=\"primary\">\n                            Game ID: {gameId}\n                        </Typography>\n                        {game?.status === 'waiting' && (\n                            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                                Share this ID with other players to join the game\n                            </Typography>\n                        )}\n                    </Box>\n\n                    <Grid container spacing={3}>\n                        {/* 左侧：玩家卡片 */}\n                        <Grid item xs={12} md={7}>\n                            <Stack spacing={2}>\n                                {game?.players.map(renderPlayer)}\n                            </Stack>\n                        </Grid>\n                        \n                        {/* 右侧：游戏统计 */}\n                        <Grid item xs={12} md={5}>\n                            {renderGameStats()}\n                        </Grid>\n                    </Grid>\n                </Box>\n            )}\n        </Box>\n    );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}